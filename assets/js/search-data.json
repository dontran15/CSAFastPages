{
  
    
        "post0": {
            "title": "College Board Unit Review",
            "content": "Comprehensive Study Guide . Here is a comprehensive study guide for college board material. This can both help with Java fundamentals and act as a study guide to help me prepare for the AP Exam. . Unit 1 Primitives . Primitives are the most basic data types in Java and most other languages. Built into most programming languages, even low level ones, primitives are predefined data types holding only values (unlike objects). They also cannot call methods are have attributes of their own and thus fundamentally different from objects. . The main types of primitives used in java are int, double, boolean, and char. Some properties unique to primitives in Java are that they can be compared with using the == operator, can be casted, and can be converted into Wrapper Classes (Java Object). . Casting (Division &amp; Rounding/Truncating) . Casting is a way to convert primitives into other primitive types (commonly from int to double or vice versa). When converting double to int, we can also truncate/round decimals to the nearest integer . int a = 10; int b = 3; // Examples of Casting // Casting in Division w/ casting (rounds down a/b in comparison to a more precise answer) System.out.println(a/b); System.out.println((double) a / b); // Casting to Round/Truncate double c = 3.5; System.out.println((int)(a + c)); . 3 3.3333333333333335 13 . Wrapper Classes . Wrapper classes enable an object oriented approach to primitives giving them access to methods like the toString method, the ability to be used in purely w ArrayLists. Some wrapper classes include Integer, Double, Boolean, and Character. They hold the same value as their primitive counterparts but open them to object oriented programming. . import java.util.ArrayList; // To initialize a Wrapper class as a variable, you instantiate just like any object Integer wrapperInteger = new Integer(10); System.out.println(wrapperInteger); // Some object only methods are shown below // toString() method System.out.println(&quot;This is a Wrapper Class: &quot; + wrapperInteger.toString()); // ArrayLists ArrayList&lt;Integer&gt; integers = new ArrayList&lt;Integer&gt;(); integers.add(wrapperInteger); System.out.println(integers); . 10 This is a Wrapper Class: 10 [10, 5] . Unit 2 Using Objects . Objects are just an instance created out of a class created w/ a constructor (which takes in parameters describing the object Methods in objects can be void (returns nothing) or have a return type specified. Static methods and properties are tied to class rather than object (ie. same value for all objects). Methods can be overloaded (have different sets of parameters) as long as order of types differs between method definitions even with same name. . Concatenation . Concatenation refers to the combination of strings. To concatenate non String types, you have to convert them into a String. When converting, primitives must be converted to wrapper classes in order to use the toString method. All objects must use toString method in order to be concatenated. Use + to concatenate strings. . String name = &quot;Don&quot;; Integer age = new Integer(17); System.out.println(&quot;My Name: &quot; + name); System.out.println(&quot;My Age: &quot; + age.toString()); . My Name: Don My Age: 17 . Math Class (Random) . Math class enables a lot of mathematical operations like floor, roof, exponents, rounding, logs, and other operations not in Java by default. It enables complex mathematical operations which can be used for programs like calculators. . // Floor Function System.out.println(Math.floor(10.999999999)); // Ceiling Function System.out.println(Math.ceil(10.999999999)); // Exponents System.out.println(Math.pow(10, 3)); // Logarithms in base 10 System.out.println(Math.log(2)); // Rounding System.out.println(Math.round(15.546432)); // Random (generates random number btwn 0 &amp; 1) System.out.println(Math.random()); . 10.0 11.0 1000.0 0.6931471805599453 16 0.7980473864210647 . Unit 3 Booleans, If/Else Statements, &amp; Comparison . Booleans are a key concept within computer science as a whole where they only store either True or False. Built on 0s and 1s, computers are essentially boolean based machines. Likewise, one can build complex methods through booleans and comparison operators/statements as the help with control flow in Java of code. The most common operators dealing with this include &lt;, &gt;, &lt;=, &gt;=, ==, !=, &amp;&amp;, and ||. If statements take in a boolean or boolean expression and run if the expression evaluates to &quot;true&quot;. Else &amp; Else if statements can be used in conjunction with if statements to run code if the if statement evaluates to false. . Comparisons w/ Primitives (numbers, characters, booleans), Strings, &amp; Objects . Comparing with Primitives, as stated above evaluate through == operator. Strings and Objects are evaluated through the .equals() method which is a default method inherited from the objects class. (more on that below) . int a = 0; int b = 0; int c = 1; // Comparing two same numbers System.out.println(a == b); // Comparing two different numbers System.out.println(a == c); String as = new String(&quot;yay&quot;); String bs = new String(&quot;cool&quot;); // Comparing the same string to itself (SAME memory location) System.out.println(as == as); // Comparing strings with same content using wrong operator (DIFFERENT memory location) System.out.println(as == bs); // Comparing strings with same content using correct .equals() System.out.println(as.equals(bs)); . true false true false false . Compound Boolean Expression . Using combinations of boolean operators, you can make compound boolean expressions. Operators that can be used include and (&amp;&amp;), or (||), not (!), as well as parenthesis for grouping purposes. . boolean a = true; boolean b = false; // Creating a compound expression boolean compound = !(a &amp;&amp; b) &amp;&amp; (b || a) &amp;&amp; (!b &amp;&amp; !a); // Printing the result System.out.println(compound); . false . Truth Tables . Can be used to see the values of boolean expressions. For example, below is truth tables for some common compound boolean expressions. (AND, OR, XOR, NOT) . . De Morgan&#39;s Law . De Morgan&#39;s Law is useful for simplifying boolean expressions and logic. States that !(a &amp;&amp; b) = !a || !b AND !(a || b) = !a &amp;&amp; !b (distribute and switch the middle sign almost like commutative property) . boolean a = true; boolean b = false; boolean c = true; boolean d = false; // complicated boolean expression boolean res1 = !((!(a &amp;&amp; b)) || (!(a || b))); // simplified using De Morgan&#39;s Law once boolean res2 = !((!a || !b) || (!a &amp;&amp; !b)); //simplified using De Morgan&#39;s Law twice boolean res3 = !(!a || !b) &amp;&amp; !(!a &amp;&amp; !b); // all results are the same System.out.println(res1 + &quot; &quot; + res2 + &quot; &quot; + res3); . false false false . Unit 4 Loops . While loop runs while a boolean condition is true. For loops create a variable which is modified on every loop iteration and has an end condition (useful for iterating through arrays, especially in different ways based on the modification, ie. i += 2 for all even indexes). For &amp; while loops can be nested inside each other to achieve more iteration (really useful with 2D arrays). For each/Enhanced for loops really useful for looping through an array (int val : array) but limited in that they go through all elements from first to last and that cannot be modified. Loops help control repetition in our code as a sequential code flow controller. It also prevents us from excruciating arthritis. . For Loop &amp; Enhanced For Loop . For loops can be used to iterate through an index, and modify it in different ways in the for loop declaration. The enhanced for loop is exclusively used for iterating fully through an iterable (such as array). . // looping through even numbers for (int i = 0; i&lt;10; i+=2) { System.out.println(i); } int[] arr = {1, 2, 3, 7, 8}; // looping through array with conventional for lopo for (int i = 0; i&lt;arr.length; i++) { System.out.println(arr[i]); } // looping through array with enhanced for loop for (int i : arr) { System.out.println(i); } . While Loop &amp; Do While Loop . While loops run while a condition is true, the condition is checked before each iteration of the code is run. . Do while loops also run while a condition is true, but the condition is checked AFTER each iteration of the code is run. This means that no matter what the do block runs at least once before the condition is checked . int i = 0; boolean falseBool = false; // printing even numbers with while loop while (i &lt; 10) { System.out.println(i); i += 2; } // if condition is false while loop does not run at all while (falseBool) { System.out.println(&quot;inside while loop&quot;); } // if condition is false in do while, the loop runs once do { System.out.println(&quot;inside do-while loop&quot;); } while (falseBool); . Nested Loops . Loops can be used inside each other for better iteration and they are especially useful for 2D arrays which can be 2D and thus need to be iterated through twice to access each individual element. . int[][] arr = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; // using nested for loops for 2D array for (int i = 0; i&lt;arr.length; i++) { for (int j = 0; j&lt;arr[i].length; j++) { System.out.print(arr[i][j] + &quot; &quot;); } System.out.println(); } . 1 2 3 4 5 6 7 8 9 . Unit 5 Classes (Own Lesson) . Classes can be used for creating objects and have two main things: properties and methods. Properties are used to store information about each object of a class (can be made private/public which determines accessibility outside of class). Methods are used to modify the object &amp; do things. Getter and Setter Methods can be used to modify properties of a class which are made private. . Breakdown of a Class . Breakdown of a Method . Access Modifiers . Access modifiers control whether properties and methods can be accessed outside the class. The public means the property/method is accessible outside while if it is private it is not accessible from outside the class. Protected usually refers to within the package (a package in this case is almost like a special type of directory). Default is when no access modifier is specified and by default only subclasses can access variables and package subclasses. Below is a table of them . . Static Methods &amp; Class Methods . Static properties and methods are part of the class rather than each object. Static methods do not require an object, and static properties only have one instance that is the same for all objects. . Creating a Class . Classes can be created using the class keyword along with definitions in front of it. A class should always be defined using upper camelcase (camelcase but first letter capital). . class SomeClass{ } . Main Method &amp; Tester Methods . The main method is used to test a class, is automatically called when class ran. It usually creates an object and can test methods hence it is mostly used as a tester method for classes. To execute the main portion of the code, a Main class with a main method is normally reserved which handles most of the executions of the code. . class SomeClass { // main method (definition for main method, more on individual parts later) public static void main(String[] args){ System.out.println(&quot;cool main method&quot;); } } SomeClass.main(null); . cool main method . this Keyword . The &quot;this&quot; keyword allows you to access properties of the class. See constructor example to see use of this keyword. . Constructors . Constructors are called whenever the object is created and usually initializes fields (data/attributes defined in the class). It does not return anything because the object is automatically given to the user when constructor is called and thus its return type is implied. . // creating a class (camel casing w/ first letter capitalized) class SomeClass { int someInt; String someString; // Constructor public SomeClass(int someInt, String someString){ // constructor passes in outside parameters if we want to initialize certain fields // this references objects own fields to differentiate (more on that later) this.someInt = someInt; this.someString = someString; } public static void main(String[] args){ SomeClass obj = new SomeClass(123, &quot;abc&quot;); System.out.println(obj.someInt); System.out.println(obj.someString); } } SomeClass.main(null); . 123 abc . Mutator Methods &amp; Setter Methods . These methods are used to get properties of an object from the outside the class definition. They are almost always necessary for private variables within classes. . Getters can be applied on only the properties which should be accessed outside the class. They always have a return type of whatever data field is being retrieved. . Setters are used to only set properties which are set outside the class. They are always void methods as their only purpose is to set variables. . class SomeClass { private int someInt; private String someString; public SomeClass(int someInt, String someString){ this.someInt = someInt; this.someString = someString; } // Getter method public int getSomeInt(){ return this.someInt; } public static void main(String[] args){ SomeClass obj = new SomeClass(123, &quot;abc&quot;); //Using Getter Method System.out.println(obj.getSomeInt()); } } SomeClass.main(null); . 123 . class SomeClass { private int someInt; private String someString; public SomeClass(int someInt, String someString){ this.someInt = someInt; this.someString = someString; } public int getSomeInt(){ return this.someInt; } // Setter public void setSomeInt(int newInt){ this.someInt = newInt; } public static void main(String[] args){ SomeClass obj = new SomeClass(123, &quot;abc&quot;); // Using setter method obj.setSomeInt(111); System.out.println(obj.getSomeInt()); } } SomeClass.main(null); . 111 . Unit 6 Lists . Lists are a way to store a &quot;collection&quot; of data (particularly primitives). They have a set size and can only store data of the same type. The most important thing to consider are the bounds and size of the array which dictates the entries you can access and loop through. . int[] array = {1, 2, 3, 4, 5, 10, 15}; for (int num : array) { if (num % 5 == 0 &amp;&amp; num % 3 != 0) { System.out.println(num); } } . Unit 7 ArrayLists . An ArrayList is like an array but the length can be changed. For ArrayList you must use a wrapper class rather than a primitive Due to ArrayList using generics. ArrayList can also work with enhanced for loops and have many convenient functions. . // using &quot;Integer&quot; wrapper class ArrayList&lt;Integer&gt; listOfIntegers = new ArrayList&lt;&gt;(); // Explicitly creating integer listOfIntegers.add(new Integer(10)); // automatically converts to Integer listOfIntegers.add(1); // using toString method of ArrayList System.out.println(listOfIntegers); . Unit 8 2D Arrays . Arrays can be placed inside arrays, creating 2D array. Useful for representing 2d space, or text (as 2d). Defined by using two pairs of square brackets after the type. Can be traversed using nested for loop. Concept of putting one for loop inside another. Really useful for traversing 2d arrays. . // defining 2d array int[][] arr2d = { {1, 2, 3}, {4, 5, 6, 7}, {8, 9, 10} }; // using nested for loops for (int[] row : arr2d) { for (int val : row) { System.out.print(val + &quot; &quot;); } System.out.println(); } . Unit 9 Inheritance . Inheritance can be used when two classes share similar functionality. Allows super class to have base functionality (ie. car). Sub class adds additional functionality to the base (ie. tesla car) &quot;extends&quot; and &quot;abstract&quot; keywords can be used to define inheritance in Java. . Extends key word . Defines a sub class that inherits all the methods from the super class. Useful because you don&#39;t need to redefine everything from super class. . public class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } public void sayHello () { System.out.println(&quot;hello, I am &quot; + color + &quot; and I am &quot; + age + &quot; years old.&quot;); } public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { this.color = color; this.age = age; this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } } Cat c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); // using method from parent class c.sayHello(); // using method from child class c.sayOwner(); . Subclass constructor, super Keyword . The constructor in a subclass can use &quot;super&quot; to access the parent class constructor &quot;super&quot; can also be used to access parent class methods . public class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } public void sayHello () { System.out.println(&quot;hello, I am &quot; + color + &quot; and I am &quot; + age + &quot; years old.&quot;); } public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { // reduce code duplication super(color, age); this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } public void sayOwnerAndHello() { super.sayHello(); sayOwner(); } } Cat c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); c.sayOwnerAndHello(); . Polymorphism: Any of Overloading, Overriding, Late Binding . Polymorphism literally means many forms. In the context of OOP, it stands as one of its pillars. Through Polymorphism, methods can take on different implementations and instances thus making them capable of generating variety of outputs under different circumstances. Such nameSpacing helps organize our methods that do essentially the same outputs in different ways. . Overriding a Method (Same Signature of a Method) . Allows you to define a method in the parent class, but then change it in child class. Really useful to change functionality in child class. . public class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } public void sayHello () { System.out.println(&quot;hello, I am &quot; + color + &quot; and I am &quot; + age + &quot; years old.&quot;); } public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { // reduce code duplication super(color, age); this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } // Adding more functionality in say hello for cat @Override public void sayHello() { super.sayHello(); System.out.println(&quot;meow...&quot;); } } // Cat uses cat method Cat c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); c.sayHello(); // Animal uses animal method Animal a = new Animal(&quot;blue&quot;, 3); a.sayHello(); . Abstract Class, Abstract Method . Abstract class means a class cannot be instantiated, it is simply a template. Abstract methods define the signature but the method must be implemented in child class. For example, lets say we don&#39;t want an animal to be created... . abstract class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } // must be defined in child class abstract void sayHello (); public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { // reduce code duplication super(color, age); this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } // Defining method that was abstract @Override public void sayHello() { System.out.println(&quot;meow...&quot;); } } // Cat uses cat method Cat c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); c.sayHello(); . Late Binding of Object, Referencing Superclass Object . Allows you to use the type of a superclass but have an object of the subclass. Useful if you know it will be part of the superclass, but don&#39;t know which subclass it is. I know it is an animal but I don&#39;t know which type. Works well with abstract methods. . abstract class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } // must be defined in child class abstract void sayHello (); public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { // reduce code duplication super(color, age); this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } // Defining method that was abstract @Override public void sayHello() { System.out.println(&quot;meow...&quot;); } } // Defining cat as an animal! Animal c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); // can use because abstract method guarentees implentation in child class c.sayHello(); . Overloading a Method (Same Name Different Parameters) . Allows you to have a method, but different sets of arguments The method which is called is determined at compile time (early binding) based on the arguments passed in . abstract class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } // must be defined in child class abstract void sayHello (); public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { // reduce code duplication super(color, age); this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } // Defining method that was abstract @Override public void sayHello() { System.out.println(&quot;meow...&quot;); } // same method with different arguments public void sayHello(String person) { System.out.println(&quot;meow... hello &quot; + person); } } Cat c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); // two different argument sets for same method c.sayHello(); c.sayHello(&quot;mark&quot;) . Standard methods: toString(), equals(), hashCode() . All objects automatically inherit from Object class and have some methods. toString should list properties, equals should compare properties, hashCode should give unique identifier. . abstract class Animal { String color; int age; public Animal () {} public Animal (String color, int age) { this.color = color; this.age = age; } // must be defined in child class abstract void sayHello (); public void walk () { System.out.println(&quot;walking...&quot;); } public void eat () { System.out.println(&quot;eating&quot;); } } public class Cat extends Animal { String owner; public Cat (String color, int age, String owner) { // reduce code duplication super(color, age); this.owner = owner; } public void sayOwner () { System.out.println(&quot;my owner is &quot; + owner); } // Defining method that was abstract @Override public void sayHello() { System.out.println(&quot;meow...&quot;); } // same method with different arguments public void sayHello(String person) { System.out.println(&quot;meow... hello &quot; + person); } // Overriding the to string @Override public String toString () { return &quot;[Cat]: &quot; + &quot;color=&quot; + color + &quot;, &quot; + &quot;age=&quot; + age + &quot;, &quot; + &quot;owner=&quot; + owner; } } // Object superclass is automatically inherited Object c = new Cat(&quot;green&quot;, 2, &quot;joe&quot;); // System.out.println uses toString method internally System.out.println(c); . Unit 10 Recursion . Recursion can be used in situations where you need to repeatedly do something, instead of loops. Recursion must call itself and have a base case. Base case allows the recursion to end at some point. . Big O notation for Hash map, Binary Search, Single loop, Nested Loop . Used to describe the most time it would take for a function to run (without constants). For example, the recursion below would take O(n) time as it has to go through n iterations to calculate the factorial. . public int factorial (int n) { if (n == 0 || n == 1) { return 1; } return n * factorial(n-1); } System.out.println(factorial(5)); .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/collegeboard/study%20guide/2023/06/12/cb-unit-review.html",
            "relUrl": "/pbl/collegeboard/study%20guide/2023/06/12/cb-unit-review.html",
            "date": " • Jun 12, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "2D Arrays",
            "content": "2D Arrays . Array of arrays | Can be initialized using [][] (double brackets) | Two for loops can be used to traverse through each row and then each column in the 2d array | Specify index by row and column to access 2d array (like a matrix | Change how you print and display them according to row/column and iterate through them in different ways to go through them | . 2D Array HW . import java.util.Scanner; public class Arrays{ int[][] numbers; public Arrays(){ int[][] newArray = new int[4][4];; for (int i = 0; i &lt; newArray.length; i++){ for (int j = 0; j &lt; newArray[i].length; j++){ newArray[i][j] = (j+1) * (int) (Math.random()*10); } } this.numbers = newArray; } public void printArray(){ for(int i = 0; i &lt; numbers.length; i++){ for(int j = 0; j &lt; numbers[i].length; j++){ System.out.print(numbers[i][j] + &quot; &quot;); } System.out.println(); } } public void reverseArray(){ System.out.println(&quot; n nPrinting out values backward&quot;); for(int i = numbers.length-1;i&gt;=0;i--){ for(int j = numbers[i].length-1; j &gt;= 0;j--){ System.out.print(numbers[i][j] + &quot; &quot;); } System.out.println(&quot; &quot;); } } public void askForIndex(){ Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter Row Index: &quot;); int rowIndex = scanner.nextInt(); System.out.println(rowIndex); System.out.print(&quot;Enter Column Index: &quot;); int columnIndex = scanner.nextInt(); System.out.println(columnIndex); System.out.print(&quot;Result: &quot;); System.out.println(numbers[rowIndex][columnIndex]); } public void multiplyThenSum(){ int sum = 0; for(int i = 0; i &lt; numbers.length; i++){ int multiply = 1; for(int j = 0; j &lt; numbers[i].length; j++){ multiply *= numbers[i][j]; } sum += multiply; } System.out.print(&quot;Sum: &quot;); System.out.println(sum); } public static void main(String[] args){ Arrays array = new Arrays(); array.printArray(); array.reverseArray(); array.askForIndex(); array.multiplyThenSum(); } } Arrays.main(null); . 7 10 21 0 9 16 0 8 6 10 18 36 2 6 12 16 Printing out values backward 16 12 6 2 36 18 10 6 8 0 16 9 0 21 10 7 Enter Row Index: 0 Enter Column Index: 0 Result: 7 Sum: 41184 .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/unit%208/2023/04/05/d-arrays.html",
            "relUrl": "/college%20board/unit%208/2023/04/05/d-arrays.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Sort Week",
            "content": "Generic Objects . One of the key concepts of object oriented programming is the idea that objects can inherit from one another. Thus, it stands to reason that you can have a generic type class that holds as many generic properties as possible that can be inherited and overridden by subsequent subclasses. Breaking these down we essentially get a tree of objects that inherit from one another or implement methods from one another. . Here, I&#39;ll make a generic class called vehicle which is based on Mr. M&#39;s &quot;Collectable&quot; object. . public abstract class Vehicle implements Comparable &lt;Vehicle&gt;{ public final String masterType = &quot;Vehicle&quot;; private String type; /* * Not sure what key types are for * TODO: find out what enumeration is (enumeration, enumerated interfaces, etc.) */ // enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // get type public String getType() { return type; } // set type public void setType(String type) { this.type = type; } // this method is used to establish key order ??? public abstract String toString(); // builds ascii string and converts back public abstract int toAscii(); public static Map&lt;Vehicle, Integer&gt; mapAscii(Vehicle[] vehicles){ Map&lt;Vehicle, Integer&gt; asciiMap = new HashMap&lt;&gt;(); for (Vehicle vehicle : vehicles) { asciiMap.put(vehicle, vehicle.toAscii()); } return asciiMap; } // how to make better generic method for this // this method is used to compare toString of objects, compares two object together public int compareTo(Vehicle obj) { return this.toString().compareTo(obj.toString()); } // this method is used to compare toAscii of objects, compares two objects together // public int asciiCompareTo(Vehicle obj) { // if(this.toAscii() &gt; obj.toAscii()){ // return 1; // } else if(this.toAscii() == obj.toAscii()){ // return 0; // } else if (this.toAscii() &lt; obj.toAscii()){ // return -1; // } else { // return -2; // } // } // static print method used by extended classes (generally can use to list objects) public static void print(Vehicle[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Vehicle&#39; properties if (objs.length &gt; 0) { Vehicle obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Vehicle: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . Sub Classes (Motor Vehicle, Marine Vehicle, Aerial Vehicle Extends Vehicle) . Through a generic class (vehicles in this case), we can inherit general methods and properties before building them up. For simplicity, I&#39;ll make some implementations of sub classes and focus in on motor vehicles and cars. . The code below is an instance of using an object within an object. . // shows object storing object public class Engine { private String type; private boolean on; public Engine(String type){ this.type = type; this.on = false; } public void powerOn(){ this.on = true; } public void powerOff(){ this.on = false; } public String getType(){ return this.type; } public boolean getOn(){ return on; } } . public class Car extends Vehicle{ public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Car.key = key;} public enum KeyType implements KeyTypes {title, brand, model, engine, capacity} // Instance data (note could add more data for realism but this is just for demonstration purposes) private final String brand; private final String model; private final Engine engine; private final int capacity; // static id counter private static int uniqueID = 0; // Constructor public Car(String brand, String model, Engine engine, int capacity){ this.setType(&quot;Car&quot;); this.brand = brand; this.model = model; this.engine = engine; this.capacity = capacity; } /* * &#39;Vehicle&#39; requires getKey to help enforce KeyTypes usage * Mort&#39;s Code TODO: Understand key types */ @Override protected KeyTypes getKey() { return Car.key; } /* * &#39;Vehicle&#39; requires toString override (overrides are required if abstract method) * toString provides data based off of Static Key setting * TODO: Understand this toString Method */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.model.equals(this.getKey())) { output += this.model; } else if (KeyType.brand.equals(this.getKey())) { output += this.brand; } else if (KeyType.capacity.equals(this.getKey())){ output += String.valueOf(this.capacity); } else { output = super.getType() + &quot;: &quot; + this.model + &quot;, &quot; + this.brand; } return output; } // dk how to do multiple long values way (can ask abt this) @Override public int toAscii(){ if (KeyType.capacity.equals(this.getKey())){ return this.capacity; } else if (KeyType.brand.equals(this.getKey())) { return (int) this.brand.charAt(0); } else if (KeyType.model.equals(this.getKey())) { return (int) this.model.charAt(0); } else { return -1; } } public String generateNumber(){ if (KeyType.model.equals(this.getKey())){ uniqueID += 1; char c = this.model.charAt(0); String id = &quot;&quot;; id += String.valueOf((int) c); id += String.valueOf(uniqueID); return id; } else if (KeyType.brand.equals(this.getKey())) { uniqueID += 1; char c = this.brand.charAt(0); String id = &quot;&quot;; id += String.valueOf((int) c); id += String.valueOf(uniqueID); return id; } else { return &quot;&quot;; } } // creates hash of registration numbers public Map&lt;String, Car&gt; registrationNumber(Car[] cars){ HashMap&lt;String, Car&gt; numberToCar = new HashMap&lt;&gt;(); for (Car car : cars) { numberToCar.put(car.generateNumber(), car); } return numberToCar; } // creates list of numbers based on cars public ArrayList&lt;String&gt; carNumberList(Car[] cars){ ArrayList&lt;String&gt; numberArray = new ArrayList&lt;&gt;(); for (Car car : cars){ numberArray.add(car.generateNumber()); } return numberArray; } public void printCars(ArrayList&lt;String&gt; numberArray, Map&lt;String, Car&gt; map){ for (String number : numberArray){ System.out.println(map.get(number)); } } // Test data initializer public static Car[] cars() { return new Car[]{ new Car(&quot;Honda&quot;, &quot;Civic&quot;, new Engine(&quot;Combustion&quot;), 5), new Car(&quot;Toyota&quot;, &quot;Mirai&quot;, new Engine(&quot;Hydrogen Fuel Cell&quot;), 5), new Car(&quot;Chrysler&quot;, &quot;Voyager&quot;, new Engine(&quot;Combustion&quot;), 7), new Car(&quot;Tesla&quot;, &quot;Model 3&quot;, new Engine(&quot;Electric Motor&quot;), 7), new Car(&quot;Mercedes&quot;, &quot;Some Car Model&quot;, new Engine(&quot;Combustion&quot;), 5), new Car(&quot;BMW&quot;, &quot;Some Card Model&quot;, new Engine(&quot;Combustion&quot;), 5), new Car(&quot;Chevrolet&quot;, &quot;Some Car Model&quot;, new Engine(&quot;Combustion&quot;), 7), new Car(&quot;Hyundai&quot;, &quot;Some Car Model&quot;, new Engine(&quot;Combustion&quot;), 6), new Car(&quot;Ford&quot;, &quot;Some Car Model&quot;, new Engine(&quot;Combustion&quot;), 4), }; } public static void main(String[] args) { // Inheritance Hierarchy Car[] cars = cars(); // Array is reference type only, no methods List&lt;Car&gt; carsList = new ArrayList&lt;Car&gt;(Arrays.asList(cars)); // conversion required to make it a Collection System.out.println(&quot;-&quot;); // print with brand order Car.setOrder(KeyType.brand); Car.print(cars); for (Car car : carsList) System.out.println(car); System.out.println(&quot;-&quot;); // convert to Collection and sort in model order Car.setOrder(KeyType.model); Collections.sort(carsList); // This works because of Collectable compareTo method Car.print(cars); for (Car car : carsList) System.out.println(car); System.out.println(&quot;-&quot;); // convert to Collection and sort in capacity order Car.setOrder(KeyType.capacity); Collections.sort(carsList); // This works because of Collectable compareTo method Car.print(cars); // doesn&#39;t sort properly but oh well LOL for (Car car : carsList) System.out.println(car); System.out.println(&quot;-&quot;); } } Car.main(null); public class Boat /* extends Vehicle */ { /* implementation not shown */ } public class Airplane /* extends Vehicle */ { /* implementation not shown */ } . - class [LREPL.$JShell$12BE$Car; 9 Vehicle: Car listed by brand Honda Toyota Chrysler Tesla Mercedes BMW Chevrolet Hyundai Ford Honda Toyota Chrysler Tesla Mercedes BMW Chevrolet Hyundai Ford - class [LREPL.$JShell$12BE$Car; 9 Vehicle: Car listed by model Civic Mirai Voyager Model 3 Some Car Model Some Card Model Some Car Model Some Car Model Some Car Model Civic Mirai Model 3 Some Car Model Some Car Model Some Car Model Some Car Model Some Card Model Voyager - class [LREPL.$JShell$12BE$Car; 9 Vehicle: Car listed by capacity 5 5 7 7 5 5 7 6 4 4 5 5 5 5 6 7 7 7 - . Sorting . Sorting is a fundamental in CS because it helps us sort classified objects into groups that we can then use to have easier access to the data we store. There are many types of sorting algorithms, but for this class the main ones we have put focus on are bubble, selection, insertion, and merge sorting. Below is an implementation of these sorts first from a generic and then to a wider sort. . In this case, we are using cars to sort. Using the ascii converter into a hashmap, we sort the objects together. . abstract class Sort { abstract void sort(String[] list); /* * @param n: the size of the list * @param k: the number of simulations run * */ // public double runSimulations(int size, int simRuns) { // double sumTime = 0; // for (int i = 0; i &lt; simRuns; i++) { // int[] list = new int[size]; // for (int j = 0; j &lt; size; j++) { // list[j] = (int) (Math.random() * 200); // } // double startTime = System.nanoTime(); // sort(list); // double endTime = System.nanoTime(); // sumTime += endTime - startTime; // } // return (sumTime / simRuns) / 1000000; // } public Vehicle[] sortVehicles(Map&lt;Vehicle, Integer&gt; map){ Car[] cars = Car.cars(); Car.setOrder(KeyType.brand) return cars; } } . class SelectionSort extends Sort { private String[] list; SelectionSort(String[] list) { this.list = list; } public void sort() { sort(this.list); } @Override public void sort(String[] list) { for (int i = 0; i &lt; list.length - 1; i++) { int smallest = Integer.valueOf(list[i].substring(0, 2)); int smallestIndex = i; for (int j = i + 1; j &lt; list.length; j++) { if (smallest &gt; Integer.valueOf(list[j].substring(0, 2))) { smallest = Integer.valueOf(list[j].substring(0, 2)); smallestIndex = j; } if (Integer.valueOf(list[i].substring(0, 2)) != smallest) { String tmp = list[i]; list[i] = list[smallestIndex]; list[smallestIndex] = tmp; } } } } public String[] get() { return list; } } . // class BubbleSort&lt;T&gt; extends Sort { // private double timeElapsed; // private int[] list; // BubbleSort(int[] list) { // this.list = list; // } // @Override // public void sort(int[] list) { // boolean unsorted = true; // while (unsorted) { // unsorted = false; // for (int i = 0; i &lt; list.length - 1; i++) { // if (list[i] &gt; list[i + 1]) { // int tmp = list[i]; // list[i] = list[i + 1]; // list[i + 1] = tmp; // unsorted = true; // } // } // } // } // public void sort() { // sort(this.list); // } // public int[] get() { // return list; // } // } . // class InsertionSort extends Sort { // private int[] list; // InsertionSort(int[] list) { // this.list = list; // } // public void sort(int[] list) { // for (int i = 1; i &lt; list.length; i++) { // int j = i; // // I&#39;m gonna be honest I have no idea why it&#39;s j &gt; 1 and not j &gt; 0 // while ((list[j - 1] &gt; list[j]) &amp;&amp; (j &gt; 1)) { // int tmp = list[j - 1]; // list[j - 1] = list[j]; // list[j] = tmp; // j--; // } // } // } // public void sort() { // sort(this.list); // } // public int[] get() { // return list; // } // } . // class MergeSort extends Sort { // private int[] list; // MergeSort(int[] list) { // this.list = list; // } // public void sort() { // sort(this.list); // } // @Override // public void sort(int[] list) { // this.list = mergeSort(list); // } // public int[] mergeSort(int[] list) { // if (list.length == 1) { // return list; // } // int[] left = Arrays.copyOfRange(list, 0, (int) Math.floor(list.length/2.0)); // int[] right = Arrays.copyOfRange(list, (int) Math.floor(list.length/2.0), list.length); // return merge(mergeSort(left), mergeSort(right)); // } // public int[] merge(int[] arr1, int[] arr2) { // int[] merged = new int[arr1.length + arr2.length]; // int counter = 0; // int ind1 = 0; // int ind2 = 0; // int size1 = arr1.length; // int size2 = arr2.length; // while (size1 != 0 || size2 != 0) { // if (size1 == 0) { // merged[counter] = arr2[ind2]; // counter++; // ind2++; // size2--; // } else if (size2 == 0) { // merged[counter] = arr1[ind1]; // counter++; // ind1++; // size1--; // } else if (arr1[ind1] &lt;= arr2[ind2]) { // merged[counter] = arr1[ind1]; // counter++; // ind1++; // size1--; // } else { // merged[counter] = arr2[ind2]; // counter++; // ind2++; // size2--; // } // } // return merged; // } // public int[] get() { // return list; // } // } . public class Main { public static void main(String[] args){ Car[] cars = Car.cars(); Car.setOrder(Car.KeyType.model); // bubbleSort.sortVehicles(Vehicle.mapAscii(cars)); } } Main.main(null); . HashMaps . Almost like python dictionaries. Has key value pair that enables quick look up due to hash encoding. . public class HashTester { public static void main(String[] args) { HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); int[] arr = new int[500000]; for (int i = 0; i &lt; 500000; i++) { Integer value = (int) (Math.random() * 500000); map.put(value, -value); arr[i] = value; } System.out.println(&quot;--&quot;); System.out.println(&quot;hash map look up&quot;); System.out.println(&quot;--&quot;); double luTime = 0; // used to throw out times double smallestTime = 0; double largestTime = 0; // get num to search for from scanner Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter a number to search for: &quot;); Integer num = sc.nextInt(); for (int i = 0; i &lt; 12; i++) { // check look up time for hash map long time = (lookUp(map, num)); luTime += time; if (time &gt; smallestTime){ smallestTime = time; } if (time &lt; largestTime || largestTime == 0){ largestTime = time; } String str = (time + &quot; ns&quot;); System.out.println(str); } luTime -= smallestTime; luTime -= largestTime; System.out.println(&quot;Average: &quot; + (luTime / 10) + &quot; ns (excluding shortest time: &quot; + String.valueOf(largestTime) + &quot; ns and, longest time &quot; + String.valueOf(smallestTime) + &quot; ns)&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot;binary search&quot;); System.out.println(&quot;--&quot;); double bsTime = 0; smallestTime = 0; largestTime = 0; for (int i = 0; i &lt; 12; i++) { // check look up time for hash map long time = (binarySearch(arr, num)); bsTime += time; if (time &gt; smallestTime){ smallestTime = time; } if (time &lt; largestTime || largestTime == 0){ largestTime = time; } String str = (time + &quot; ns&quot;); System.out.println(str); } bsTime -= smallestTime; bsTime -= largestTime; System.out.println(&quot;Average: &quot; + (bsTime / 10) + &quot; ns (excluding shortest time: &quot; + String.valueOf(largestTime) + &quot; ns and, longest time &quot; + String.valueOf(smallestTime) + &quot; ns)&quot;); } public static long lookUp(HashMap&lt;Integer, Integer&gt; map, Integer value) { long start = System.nanoTime(); map.containsKey(value); long end = System.nanoTime(); return (end - start); } public static long binarySearch(int[] arr, Integer value){ long start = System.nanoTime(); int low = 0; int high = arr.length - 1; int mid = (low + high) / 2; while (low &lt;= high) { if (arr[mid] &lt; value) { low = mid + 1; } else if (arr[mid] == value) { break; } else { high = mid - 1; } mid = (low + high) / 2; } long end = System.nanoTime(); return (end - start); } } HashTester.main(null); . -- hash map look up -- Enter a number to search for: 487 ns 1188 ns 296 ns 500 ns 329 ns 558 ns 257 ns 113 ns 143 ns 403 ns 188 ns 148 ns Average: 330.9 ns (excluding shortest time: 113.0 ns and, longest time 1188.0 ns) -- binary search -- 627 ns 19158 ns 368 ns 244 ns 197 ns 194 ns 189 ns 172 ns 219 ns 296 ns 230 ns 181 ns Average: 274.5 ns (excluding shortest time: 172.0 ns and, longest time 19158.0 ns) .",
            "url": "https://dontran15.github.io/CSAFastPages/collegeboard/2023/03/23/stuff.html",
            "relUrl": "/collegeboard/2023/03/23/stuff.html",
            "date": " • Mar 23, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Generics Types and Collections",
            "content": "Hacks . College Board Classes and Objects . As a part of OOP, classes and objects are fundamentals to the OOP paradigm serving as the building blocks. Essentially, classes are like blueprints and objects are just instances or constructions of that blue print. Classes have a lot of properties and in particular their most useful quality is gathering data and methods into a single place. Methods and data types can either only be called through an instantiation of the class or statically called from the class . Access Modifiers . Access modifiers indicate the level of access different classes/objects have over other classes and objects. Of the four most common types, there are: . private: only the object/class at hand can modify the object/class itself and cannot be called by sub classes or any other class. | protected: subclasses can modify/use methods and data from its super classes | default: default is the setting which enables the entire package (usually sub-classes) to access methods or data. | public: any thing can call the methods or access the data of public variables/functions | . Constructor . Constructors are the most important part of classes/objects since they dictate what happens to the object on the instantiation of the class. They usually ether take in parameters and set them data fields using those parameters, or run internal logic to set those parameters. . Modifiers . Modifiers are special attachments to functions that dictate the use of that function. For instance static only enables the class to call upon functions/data. Finals prevents any other change from occurring at all. . Getters/Setters . Getters and setters are usually reserved for private fields and help access references of certain classes to both as implied get information and set information. . Inheritance, Polymorphism, Abstraction, and Encapsulation . Probably the most important part about classes and objects are the 4 pillars of OOP. Inheritance is the passing down of methods and data from a super class to sub classes. This helps organize objects as &quot;like&quot; each other. We see this particular in this weeks hacks with GenericType and Object classes. Polymorphism is the ability for multiple classes to have the same name implying same output for the same reason but perhaps a different implementation. Abstraction is the broader overview of classes where we want to limit the scope of certain classes as much as possible so that only the most important of their implementation is visible and usable. Finally, encapsulation is the &quot;wrapping&quot; of classes into single objects/classes. . Generic Classes . /* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Owner extends Generics { public static KeyTypes key = KeyType.title; public static void setOrder(KeyTypes key) { Owner.key = key; } public enum KeyType implements KeyTypes {title, name, age, year, trusted} private final String name; private final int age; private final int year; // True if used, false if new private final boolean trusted; public Owner(String name, int year, int age, boolean trusted) { super.setType(&quot;Owner&quot;); this.name = name; this.age = age; this.year = year; this.trusted = trusted; } @Override protected KeyTypes getKey() { return Owner.key; } @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.year.equals(this.getKey())) { output += this.year; } else if (KeyType.trusted.equals(this.getKey())) { output += this.trusted; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.year + &quot;, &quot; + this.age + &quot;, &quot; + this.trusted; } return output; } // Test data initializer public static Owner[] owners() { return new Owner[]{ new Owner(&quot;Don Trannn&quot;, 17, 2023, false), new Owner(&quot;Bailey Say&quot;, 17, 2023, true), new Owner(&quot;Evan Sanches&quot;, 17, 2023, true) }; } public static void main(String[] args) { // Inheritance Hierarchy Owner[] objs = owners(); // print with title Owner.setOrder(KeyType.title); Owner.print(objs); // print name only Owner.setOrder(KeyType.name); Owner.print(objs); } } Owner.main(null); . class [LREPL.$JShell$20B$Owner; 3 Generic: Owner listed by title Owner: Don Trannn, 17, 2023, false Owner: Bailey Say, 17, 2023, true Owner: Evan Sanches, 17, 2023, true class [LREPL.$JShell$20B$Owner; 3 Generic: Owner listed by name Don Trannn Bailey Say Evan Sanches . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of NCS Generics Owner.setOrder(Owner.KeyType.name); // Illustrates use of a series of repeating arguments QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;, Owner.owners()); qGenerics.printQueue(); qGenerics.queue.add(new Owner(&quot;Nathan Shih&quot;, 18, 2023, false)); qGenerics.printQueue(); qGenerics.queue.delete(); qGenerics.printQueue(); } } QueueTester.main(null); . My Generics count: 3 My Generics data: Don Trannn Bailey Say Evan Sanches My Generics count: 3 My Generics data: Don Trannn Bailey Say Evan Sanches Nathan Shih My Generics count: 3 My Generics data: Bailey Say Evan Sanches Nathan Shih . Example of Linked List, Queues, Stacks . import java.util.Iterator; public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; // Create new node with T data and reference to previous LinkedList&lt;T&gt; node public LinkedList(T data, LinkedList&lt;T&gt; node) { setData(data); setPrevNode(node); setNextNode(null); } // Create new node using copy public LinkedList(LinkedList&lt;T&gt; node) { setData(node.data); setPrevNode(node.prevNode); setNextNode(node.nextNode); } // Getters public T getData() { return this.data; } public LinkedList&lt;T&gt; getPrev() { return this.prevNode; } public LinkedList&lt;T&gt; getNext() { return this.nextNode; } // Setters public void setData(T data) { this.data = data; } public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } } /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { try { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } catch (Exception E) { return null; } } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { try { return this.head.getData(); } catch (Exception E) { return null; } } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } // Challenge 1 public T delete() { count--; return this.queue.delete(); } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of Words Object[] words = new String[] { &quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; QueueManager qWords = new QueueManager(&quot;Words&quot;, words ); qWords.printQueue(); while (qWords.delete() != null) { qWords.printQueue(); } } } QueueTester.main(null); . Words count: 7 Words data: seven slimy snakes sallying slowly slithered southward Words count: 6 Words data: slimy snakes sallying slowly slithered southward Words count: 5 Words data: snakes sallying slowly slithered southward Words count: 4 Words data: sallying slowly slithered southward Words count: 3 Words data: slowly slithered southward Words count: 2 Words data: slithered southward Words count: 1 Words data: southward Words count: 0 Words data: .",
            "url": "https://dontran15.github.io/CSAFastPages/collegeboard/2023/03/20/generic-type.html",
            "relUrl": "/collegeboard/2023/03/20/generic-type.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "College Board Practice Exam 2015",
            "content": "Score . Corrections . Question 19 . This one was an oopsie dasies by me, i clicked the wrong answer. Since x = 1, no matter what condition keeps the while loop true, x will only ever increase by 2 thus keeping it an odd number. So x%2 == 0 can&#39;t possibly occur. . Question 21 . The correct answer is A since each element is printed out through the for each loop causing the correct output of 123456. One thing I should do is look at all the answers before moving on since I clicked C given it was the first one I saw and looked alright to me lol. . Question 25 . Just needed to pay attention to code, I didn&#39;t realize the inner loop was starting at an index of y = x rather than just y = 0. If correctly thought out, the answer should be 10 since it&#39;s essentially summing all the numbers from 1 to 4. .",
            "url": "https://dontran15.github.io/CSAFastPages/collegeboard/quizzes/2023/03/12/cb-corrections.html",
            "relUrl": "/collegeboard/quizzes/2023/03/12/cb-corrections.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Data Structures",
            "content": "Code Exercise Examples . import java.lang.Math; import java.util.ArrayList; // int System.out.println(&quot;--&quot;); System.out.println(&quot;integer:&quot;); int[] intArray = new int[5]; int sum = 0; for (int i = 0; i &lt; intArray.length; i++) { intArray[i] = (int) (Math.floor(Math.random() * 100)); System.out.println(&quot;num&quot; + i + &quot;: &quot; + intArray[i]); sum += intArray[i]; } System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;--&quot;); // double System.out.println(&quot;--&quot;); System.out.println(&quot;double:&quot;); double double1 = 10.0; double double2 = 3.0; double ratio = double1/double2; System.out.println(&quot;double1: &quot; + double1); System.out.println(&quot;double1: &quot; + double2); System.out.println(&quot;double1 / double2: &quot; + ratio); System.out.println(&quot;--&quot;); // boolean System.out.println(&quot;--&quot;); System.out.println(&quot;boolean:&quot;); boolean smelly = true; if(smelly){System.out.println(&quot;Ew you&#39;re smelly! Smelly: &quot; + smelly + &quot;Go take a shower!&quot;);} else{System.out.println(&quot;Good Job! Clean: &quot; + !smelly);} System.out.println(&quot;--&quot;); // char System.out.println(&quot;--&quot;); System.out.println(&quot;char:&quot;); char c1, c2, c3; // 65 &amp; 67 are ASCII codes c1 = 65; c2 = &#39;B&#39;; c3 = 67; System.out.println(&quot;c1 = 65; c2 = &#39;B&#39;; c3 = 67;&quot;); System.out.println(&quot;The characters are: &quot; + c1 + c2 + c3); System.out.println(&quot;--&quot;); // Wrapper Classes System.out.println(&quot;--&quot;); System.out.println(&quot;Wrapper Classes:&quot;); // Integer ArrayList&lt;Integer&gt; intArrayList = new ArrayList&lt;&gt;(); for (int i : intArray){ intArrayList.add(new Integer(i)); } System.out.println(&quot;intArrayList: &quot; + intArrayList.toString()); // Double System.out.println(&quot;Double: &quot; + new Double(ratio).toString()); // Boolean System.out.println(&quot;Boolean: &quot; + new Boolean(smelly).toString()); // Character System.out.println(&quot;Character: &quot; + new Character(c1).toString() + new Character(c2).toString() + new Character(c3).toString()); . -- integer: num0: 99 num1: 54 num2: 46 num3: 97 num4: 68 Sum: 364 -- -- double: double1: 10.0 double1: 3.0 double1 / double2: 3.3333333333333335 -- -- boolean: Ew you&#39;re smelly! Smelly: trueGo take a shower! -- -- char: c1 = 65; c2 = &#39;B&#39;; c3 = 67; The characters are: ABC -- -- Wrapper Classes: intArrayList: [99, 54, 46, 97, 68] Double: 3.3333333333333335 Boolean: true Character: ABC . Methods and Control Structures . Methods . A method in Java is a block of code that, when called, performs specific actions mentioned in it. | For instance, if you have written instructions to draw a circle in the method, it will do that task. | You can insert values or parameters into methods, and they will only be executed when called. | A method is similar to a function in other programming languages such as python | . Control Structures . Control Structures can be considered as the building blocks of computer programs. | They are commands that enable a program to “take decisions”, following one path or another. | A program is usually not limited to a linear sequence of instructions since during its process it may bifurcate, repeat code or bypass sections. | . APCSA FRQ 2017 Methods and Control Structures . - https://apcentral.collegeboard.org/media/pdf/ap-computer-science-a-frq-2017.pdf . Exploring teacher code . Diverse Array . Checks if the sums of each row in a 2d array are all different (diverse) | Returns true if this is true, returns false if not | Starts by summing arrays then returns that sums into single arrray ##### Matric | Contains methods and control structures | Multiple methods that allow stuff to happen | Multiple control structures . Loops For | While | . | If statements | . | Fits within data types because contains arrays which is a data type . | Takeaway: most code segments no matter what they are on have to do with methods and control structures . | . Random . Math.random | Gives value between 0 and 1 | To get a random value between 7 and 9, double a Math.random value and add 7 to it | . Do nothing by value . You&#39;re basically changing a variable but the variable doesn&#39;t actually change because it is changing the subvalue and not the actual value | Changing a variable only happens at a large scale Can&#39;t do it locally | . | . Int by Reference . The int changes its value even though you are doing it locally | Basically says theres a way to get around the fact that you cant edit variables locally | . Menu . Try, Catch, Runnable are used to control program execution | . package com.nighthawk.hacks.methodsDataTypes; import java.util.HashMap; import java.util.Map; import java.util.Scanner; /** * Menu: custom implementation * @author John Mortensen * * Uses String to contain Title for an Option * Uses Runnable to store Class-Method to be run when Title is selected */ // The Menu Class has a HashMap of Menu Rows public class Menu { // Format // Key {0, 1, 2, ...} created based on order of input menu // Value {MenuRow0, MenuRow1, MenuRow2,...} each corresponds to key // MenuRow {&lt;Exit,Noop&gt;, Option1, Option2, ...} Map&lt;Integer, MenuRow&gt; menu = new HashMap&lt;&gt;(); /** * Constructor for Menu, * * @param rows, is the row data for menu. */ public Menu(MenuRow[] rows) { int i = 0; for (MenuRow row : rows) { // Build HashMap for lookup convenience menu.put(i++, new MenuRow(row.getTitle(), row.getAction())); } } /** * Get Row from Menu, * * @param i, HashMap key (k) * * @return MenuRow, the selected menu */ public MenuRow get(int i) { return menu.get(i); } /** * Iterate through and print rows in HashMap */ public void print() { for (Map.Entry&lt;Integer, MenuRow&gt; pair : menu.entrySet()) { System.out.println(pair.getKey() + &quot; ==&gt; &quot; + pair.getValue().getTitle()); } } /** * To test run Driver */ public static void main(String[] args) { Driver.main(args); } } // The MenuRow Class has title and action for individual line item in menu class MenuRow { String title; // menu item title Runnable action; // menu item action, using Runnable /** * Constructor for MenuRow, * * @param title, is the description of the menu item * @param action, is the run-able action for the menu item */ public MenuRow(String title, Runnable action) { this.title = title; this.action = action; } /** * Getters */ public String getTitle() { return this.title; } public Runnable getAction() { return this.action; } /** * Runs the action using Runnable (.run) */ public void run() { action.run(); } } // The Main Class illustrates initializing and using Menu with Runnable action class Driver { /** * Menu Control Example */ public static void main(String[] args) { // Row initialize MenuRow[] rows = new MenuRow[]{ // lambda style, () -&gt; to point to Class.Method new MenuRow(&quot;Exit&quot;, () -&gt; main(null)), new MenuRow(&quot;Do Nothing&quot;, () -&gt; DoNothingByValue.main(null)), new MenuRow(&quot;Swap if Hi-Low&quot;, () -&gt; IntByReference.main(null)), new MenuRow(&quot;Matrix Reverse&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Diverse Array&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Random Squirrels&quot;, () -&gt; Number.main(null)) }; // Menu construction Menu menu = new Menu(rows); // Run menu forever, exit condition contained in loop while (true) { System.out.println(&quot;Hacks Menu:&quot;); // print rows menu.print(); // Scan for input try { Scanner scan = new Scanner(System.in); int selection = scan.nextInt(); // menu action try { MenuRow row = menu.get(selection); // stop menu if (row.getTitle().equals(&quot;Exit&quot;)) { if (scan != null) scan.close(); // scanner resource requires release return; } // run option row.run(); } catch (Exception e) { System.out.printf(&quot;Invalid selection %d n&quot;, selection); } } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } } } . Method and Control Structures . There are three kinds of control structures: Conditional Branches, which we use for choosing between two or more paths. There are three types in Java: if/else/else if, ternary operator and switch. Loops that are used to iterate through multiple values/objects and repeatedly run specific code blocks. . | MenuRow and Runnable are data types and also control structures . | . Exploring AP Classroom . public class FrogSimulation { /** Distance, in inches, from the starting position to the goal. */ private int goalDistance; /** Maximum number of hops allowed to reach the goal. */ private int maxHops; /** Constructs a FrogSimulation where dist is the distance, in inches, from the starting * position to the goal, and numHops is the maximum number of hops allowed to reach the goal. * Precondition: dist &gt; 0; numHops &gt; 0 */ public FrogSimulation(int dist, int numHops) { goalDistance = dist; maxHops = numHops; } /** Returns an integer representing the distance, in inches, to be moved when the frog hops. */ private int hopDistance() { /* implementation not shown */ // Int datatype used because steps should be whole numbers return (int) (Math.random() * 20) - 10; } /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { /* to be implemented in part (a) */ int distance = 0; // if control structures catch any return conditions being met for (int i = 0; i &lt; maxHops; i++) { distance += hopDistance(); if (distance &lt; 0) { return false; } if (distance &gt;= goalDistance) { return true; } } return false; } /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { /* to be implemented in part (b) */ // Note the usage of the double datatype here // When doubles are operated on with ints, the result is an integer double trueResults = 0; for (int i = 0; i &lt; num; i++) { // if control structure differentiates between successful and unsuccessful simulations if (this.simulate()) { trueResults++; } } // Here a double and int are operated on together, resulting in another double return trueResults / num; } public static void main(String[] args) { FrogSimulation test = new FrogSimulation(24, 5); System.out.println(test.simulate()); System.out.println(test.runSimulations(100)); } } FrogSimulation.main(null); . false 0.0 . Data Types . There are 2 main datatypes present in the above code, which are: . ints | doubles | . Certain datatypes are better suited than others to model a situation; since the situation includes the distance per hop, the maximum distance, and the max number of hops are all whole numbers, ints are preferrable to use here. . However, considering the output of runSimulations() being a ratio, a different datatype would be better suited: a double. . Methods and Control Structures . Control structures form the building blocks of most methods, allowing them to handle simple tasks such as filtering or calculating. In this case, the main methods are simulate() and runSimulations(). . simulate() utilizes both for loops, in order to iterate through the hops and their effect on distance, and if loops, in order to check if any one of the return conditions are met (negative distance, max hops, or reached distance). . runSimulations() also takes advantage of for loops in order to run simulate() numerous times, using an if statement to distinguish between successful and unsuccessful simulations. .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/2023/03/09/data-structures.html",
            "relUrl": "/pbl/2023/03/09/data-structures.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Extra Credit",
            "content": "public class Binary { public static String binaryAddition(String binary1, String binary2){ return Integer.toBinaryString(Integer.parseInt(binary1, 2) + Integer.parseInt(binary2, 2)); } public static void main(String[] args){ System.out.println(binaryAddition(&quot;11&quot;, &quot;11&quot;)); } } Binary.main(null); . 110 .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/2023/03/06/yippee.html",
            "relUrl": "/pbl/2023/03/06/yippee.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "F1 Racing Bets Development",
            "content": "Overview . Over the course of the project our group has been doing, one key feature we decided to add was betting. In F1 Racing, one key part of the sport for viewers is betting on teams. Thus, for the user side, we decided to add the betting feature to allow users to bet for races using a virtual currency we&#39;ve coined as &quot;F1 Coins&quot; (pun unintended). Let&#39;s take a look at the front end first! . Frontend . Of course, the first thing to do would be to log into a user (in this case someone with the role of audience). The most important thing we want from our log in is the JWT cookie that comes with logging in which importantly stores the users id. Through the user id, we can now proceed to the perfectly legal and fun part of our site, betting. . Note: without logging in, the betting page will automatically redirect to the log in page prompting it in order to use the betting page. . Now onto bets! Although not as clean as I would like (and besides the scuffed html), the bets page has all of the functionality necessary to demonstrate the backend that was developed for bets. Besides the scuffed text inputs and messy table, the slideshow and increamental f1 coin inputs are the key front end portions (thanks to Nathan for his work on a lot of the front end html elements and CSS). . If the html were to be better developed, the gray box would store dynamic listings of races that would allow the user to select what race they would like to bet for. For now, the data necessary for the API call RequestBody is handled in simple text inputs. . Starting with the top right, we have the f1 coins that each user has in their possession (starts at 100). This is accomplished by taking the user id stored in local storage (props to Aadit) which can then be passed through as a parameter into the API request retrieving the f1coin amount of any user. . Moving to the actual betting part, in the red area of the page, we have a slide show that translates into specific teams as an index for the slide show. That index is then translated into its corresponding team when the submit button is clicked (currently, custom teams are not supported given the exclusivity of F1 Racing). Below that is the numeber input for f1 coins. Moving to below the main betting interface is the temporary race season and race name text inputs which are meant to be passed for the required request body fields. Given a functional frontend, the race season and name would be handled by the race they select. Once the submit button is clicked, all of the above values are passed into a body that is passed to the api fetch which creates a bet. If a field is missing or is wrongly inputted, an alert for a failure to make the bet will pop up. . Finally, below is a list of the bets and url options to update the bets and delete them. The update link will send the user to a new page in which they must pass the bet id and the changes to team and f1 coins they are making (could be better esp. since the link does not actually store the bet id as it should). The delete will delete the bet from the database. . Backend . So how does the bet creation, updating, deleting, and other related APIs, JPAs, and methods work? Let&#39;s start with the bets themselves. For our entire database, much of the POJO&#39;s stored are weaved in a complex web of relationships which applies most to the Bet POJO we created. . As seen above, beyond the standard fields stored are three ManyToOne relationships with join columns. The CascadeType.MERGE for each of the relationships serves to enable the changes to one side of the relationship to be mirrored in the other POJOs in the relationship. The resulting Bet object is then stored in a BetJPARepository which has the following functions used to query the database and return them. . . I&#39;ll skim over the other objects but they are also all equally complex using JPA repositories to store them. . For the api controller, this is all handled under user given it is an action done by the user. For the make bet, most of it is standard creating a pojo and saving it to the JPA repo. All missing inputs are checked and returns a bad request if bad. If the time the bet is returned is after the race date, it also returns an error. This also changes the f1coin amounts of users. The make bets uses jpa repository for users, teams, and races (this is a table created on initialization calling the API) An override exists for testing in PostMan. Update and delete are pretty standard as well with the update to an existing bet and delete to delete an existing bet. A processBets() method exists as a way to process a bet by a date to check who the winner is (this is used for testing in postman). . . Finally, the last part to our backend for bets is the periodic methods that are ran to find race winners on that day and to process bets on that given day. This is done through SpringBoot&#39;s Scheduler annotations which allows the periodic running of methods. In this case, we have it run every 20 minutes. For race results, this is all done using ergast&#39;s api to get winners for a given day which then stores it into the race object through the race jpa repo. For processing bets, each bet given a specific race has the team that the bet was for compared to the winner of the race and updated accordingly ultimately leaving the bet inactive after the bet has been processed. . End . That&#39;s all for bets. Although there were a fair amount of things in regards to bets that I could have covered, these are the key features and overview of the entire feature itself and I hope it helps in understanding the development of this feature. .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/2023/02/23/f1racing-bets.html",
            "relUrl": "/pbl/2023/02/23/f1racing-bets.html",
            "date": " • Feb 23, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Timed College Board Stuff",
            "content": "Overall Reflection . Of the practices MCQs we did so far I found this one the most challenging and most time consuming. If I spent as much time as I wanted on it, I think I&#39;d definitely be able to complete with almost a perfect score overall. Although 60/66 is not bad in any sense of the matter, I think a lot of them were less conceptual misunderstandings and more so mental exhaustion. I think if I practice doing continuos quizzes more that exhaustion will be better and I&#39;ll be able to analyze the code a lot better. I also spent well over 1.5 hours (although I did take breaks in between) but overall I think my total time on the reflection was around 2.5 hours of continuous answering them. . . Corrections . Here are my corrections for both quizzes. . 66 Question Quiz Corrections . In implementation I, num is used as a local variable rather than an actual reference variable and thus does not get assigned which I thought it did. This means I should work on getting better at recognizing the scope of my variables and how they are affected as a whole. . This involved a lot of 2D array columns which I mistook which ones were iterating through columns and which one through rows. I think honibg in on improving my identification of code in loops would help a lot. . This was just a lot of silly miscalculation (idk if thats the right word) of de morgans law that caused me to accidently apply the not symbol a flip some signs accidently. . Remember indices since it messes up a lot of code sometimes and is important to consider in logic for inclusive or not. . Overlooked the out of bounds error. . Forgot about initialization. .",
            "url": "https://dontran15.github.io/CSAFastPages/collegeboard/quizzes/2023/01/31/cb-quiz.html",
            "relUrl": "/collegeboard/quizzes/2023/01/31/cb-quiz.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Timed College Board Quizzes",
            "content": "Overall Reflection . Of the practices MCQs we did so far I found this one the most challenging and most time consuming. If I spent as much time as I wanted on it, I think I&#39;d definitely be able to complete with almost a perfect score overall. Although 60/66 is not bad in any sense of the matter, I think a lot of them were less conceptual misunderstandings and more so mental exhaustion. I think if I practice doing continuos quizzes more that exhaustion will be better and I&#39;ll be able to analyze the code a lot better. I also spent well over 1.5 hours (although I did take breaks in between) but overall I think my total time on the reflection was around 2.5 hours of continuous answering them. . . Corrections . Here are my corrections for both quizzes. . 66 Question Quiz Corrections . In implementation I, num is used as a local variable rather than an actual reference variable and thus does not get assigned which I thought it did. This means I should work on getting better at recognizing the scope of my variables and how they are affected as a whole. . This involved a lot of 2D array columns which I mistook which ones were iterating through columns and which one through rows. I think honibg in on improving my identification of code in loops would help a lot. . This was just a lot of silly miscalculation (idk if thats the right word) of de morgans law that caused me to accidently apply the not symbol a flip some signs accidently. . Remember indices since it messes up a lot of code sometimes and is important to consider in logic for inclusive or not. . Overlooked the out of bounds error. . Forgot about initialization. .",
            "url": "https://dontran15.github.io/CSAFastPages/collegeboard/quizzes/2023/01/21/timed-quizzes.html",
            "relUrl": "/collegeboard/quizzes/2023/01/21/timed-quizzes.html",
            "date": " • Jan 21, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Recursion",
            "content": "Recursive Method . A method that calls itself. Similar to recursive functions in math that continuously calls itself to get an output value. One base case that halts recursion an once recursive call. Each recursion has its own local variables and thus act independently of itself. Parameters take progress. Can be replaced w an iterative and give same result so acts like loop that traverses strings array arraylist. There&#39;s always an if statement to stop the call. Can have multiple instances of recursion within itself. . Binary Search . Taking array and starting at midpoint. It is one of the ,ost efficient searches w complexity n*log(n). find the midpoint and iterate through to compare midpoint to bounds and checking if target is greater/less. Way to find how to not to binary search. . Merge Sort . Can be used to sort array list which uses Divide and Conquer algorithm Divides them in half and then calls itself into different halves and sorts them. It then merges the two sorted halves into one list. Recursion to divide and compare left and right sides. . Visualizing Recursion . One way is building a recursive tree making note of each recursive case. This makes it easy to visualize the call and track the conditions of the recursion. . public static void main(String[] args){ System.out.println(equation(8)); } public static int equation(int a){ if(a &lt;= 5){ return 12; } return equation(a-2) * equation(a-1); } main(null); . 248832 .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/unit%2010/2022/12/13/recursion.html",
            "relUrl": "/college%20board/unit%2010/2022/12/13/recursion.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "College Board Units HW",
            "content": "HW Scores . Unit Score Comments . Unit 6 Array | 0.9/1 | Took lots of notes and did extra problems | . Unit 7 ArrayLists | 0.9/1 | Notes are good, homework completed | . Unit 8 2D Arrays | 0.95/1 | no comment | . Unit 9 Inheritance | 1/1 | Completed all of the tasks in an organized matter and had very detailed code. | . Unit 10 Recursion | 0.9/1 | Good class participation. No extra files showing recursion were submitted | . total | 4.65/5 | | . Unit 6 Array . // Write array methods for the Array Methods class below out of the options given above. public class ArrayMethods { private int[] values = {1, 2, 3, 4, 5, 6, 7, 8}; public void printElements(){ for(int i = 0; i &lt; values.length; i++){ System.out.println(values[i]); } } public void swapElements(){ int lastElement = values[values.length-1]; values[values.length-1] = values[0]; values[0] = lastElement; } public void replaceAllZero(){ for(int i = 0; i &lt; values.length; i++){ values[i] = 0; } } public static void main(String[] args){ System.out.println(&quot;First and Last Element Swap: &quot;); ArrayMethods swapElements = new ArrayMethods(); swapElements.swapElements(); swapElements.printElements(); System.out.println(&quot;Replacing All Elements w/ Zero: &quot;); ArrayMethods replaceAllZero = new ArrayMethods(); swapElements.replaceAllZero(); swapElements.printElements(); } } ArrayMethods.main(null); . Unit 7 ArrayList . // Initializing an ArrayList filled with strings ArrayList&lt;String&gt; strings = new ArrayList&lt;&gt;(); strings.add(&quot;5&quot;); strings.add(&quot;5.0&quot;); strings.add(&quot;5AB3&quot;); strings.add(&quot;Eighty Six&quot;); strings.add(&quot;86&quot;); strings.add(&quot;Your mom&quot;); strings.add(&quot;Cool&quot;); // 2nd bullet point (Find and display the hashCode of an Arraylist before and after being sorted) // hashCode before being sorted System.out.println(&quot;Unsorted hashCode: &quot; + strings.hashCode()); // sorted hashCode Collections.sort(strings); System.out.println(&quot;Sorted hashCode: &quot; + strings.hashCode()); . Unit 8 2D ArrayList . import java.util.Scanner; public class Arrays{ int[][] numbers; public Arrays(){ int[][] newArray = new int[4][4];; for (int i = 0; i &lt; newArray.length; i++){ for (int j = 0; j &lt; newArray[i].length; j++){ newArray[i][j] = (j+1) * (int) (Math.random()*10); } } this.numbers = newArray; } public void printArray(){ for(int i = 0; i &lt; numbers.length; i++){ for(int j = 0; j &lt; numbers[i].length; j++){ System.out.print(numbers[i][j] + &quot; &quot;); } System.out.println(); } } public void reverseArray(){ System.out.println(&quot; n nPrinting out values backward&quot;); for(int i = numbers.length-1;i&gt;=0;i--){ for(int j = numbers[i].length-1; j &gt;= 0;j--){ System.out.print(numbers[i][j] + &quot; &quot;); } System.out.println(&quot; &quot;); } } public void askForIndex(){ Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter Row Index: &quot;); int rowIndex = scanner.nextInt(); System.out.println(rowIndex); System.out.print(&quot;Enter Column Index: &quot;); int columnIndex = scanner.nextInt(); System.out.println(columnIndex); System.out.print(&quot;Result: &quot;); System.out.println(numbers[rowIndex][columnIndex]); } public void multiplyThenSum(){ int sum = 0; for(int i = 0; i &lt; numbers.length; i++){ int multiply = 1; for(int j = 0; j &lt; numbers[i].length; j++){ multiply *= numbers[i][j]; } sum += multiply; } System.out.print(&quot;Sum: &quot;); System.out.println(sum); } public static void main(String[] args){ Arrays array = new Arrays(); array.printArray(); array.reverseArray(); array.askForIndex(); array.multiplyThenSum(); } } Arrays.main(null); . Unit 9 Inheritance . public class QuarterFinalTeam{ String jerseyColor; boolean quarterFinals; boolean semiFinals; public QuarterFinalTeam(){ this.quarterFinals = true; } public static void determineResults(QuarterFinalTeam team1, QuarterFinalTeam team2){ team1.quarterFinalResult(); team2.quarterFinalResult(); } public void quarterFinalResult(){} public static void main(String[] args){ Netherlands netherlands = new Netherlands(); Argentina argentina = new Argentina(); Croatia croatia = new Croatia(); Brazil brazil = new Brazil(); England england = new England(); France france = new France(); Morocco morocco = new Morocco(); Portugal portugal = new Portugal(); QuarterFinalTeam.determineResults(netherlands, argentina); QuarterFinalTeam.determineResults(croatia, brazil); QuarterFinalTeam.determineResults(england, france); QuarterFinalTeam.determineResults(morocco, portugal); System.out.println(&quot;Netherlands: &quot; + &quot;jerseyColor = &quot; + netherlands.jerseyColor + &quot;, quarterFinals = &quot; + netherlands.quarterFinals + &quot;, semiFinals = &quot; + netherlands.semiFinals); System.out.println(&quot;Argentina: &quot; + &quot;jerseyColor = &quot; + argentina.jerseyColor + &quot;, quarterFinals = &quot; + argentina.quarterFinals + &quot;, semiFinals = &quot; + argentina.semiFinals); System.out.println(&quot;Croatia: &quot; + &quot;jerseyColor = &quot; + croatia.jerseyColor + &quot;, quarterFinals = &quot; + croatia.quarterFinals + &quot;, semiFinals = &quot; + croatia.semiFinals); System.out.println(&quot;Brazil: &quot; + &quot;jerseyColor = &quot; + brazil.jerseyColor + &quot;, quarterFinals = &quot; + brazil.quarterFinals + &quot;, semiFinals = &quot; + brazil.semiFinals); System.out.println(&quot;England: &quot; + &quot;jerseyColor = &quot; + england.jerseyColor + &quot;, quarterFinals = &quot; + england.quarterFinals + &quot;, semiFinals = &quot; + england.semiFinals); System.out.println(&quot;France: &quot; + &quot;jerseyColor = &quot; + france.jerseyColor + &quot;, quarterFinals = &quot; + france.quarterFinals + &quot;, semiFinals = &quot; + france.semiFinals); System.out.println(&quot;Morocco: &quot; + &quot;jerseyColor = &quot; + morocco.jerseyColor + &quot;, quarterFinals = &quot; + morocco.quarterFinals + &quot;, semiFinals = &quot; + morocco.semiFinals); System.out.println(&quot;Portugal: &quot; + &quot;jerseyColor = &quot; + portugal.jerseyColor + &quot;, quarterFinals = &quot; + portugal.quarterFinals + &quot;, semiFinals = &quot; + portugal.semiFinals); } } public class Netherlands extends QuarterFinalTeam{ public Netherlands(){ super(); super.jerseyColor = &quot;Orange&quot;; } public void quarterFinalResult(){ super.semiFinals = false; } } public class Argentina extends QuarterFinalTeam{ public Argentina(){ super(); super.jerseyColor = &quot;Blue &amp; White&quot;; } public void quarterFinalResult(){ super.semiFinals = true; } } public class Croatia extends QuarterFinalTeam{ public Croatia(){ super(); super.jerseyColor = &quot;Red &amp; White&quot;; } public void quarterFinalResult(){ super.semiFinals = true; } } public class Brazil extends QuarterFinalTeam{ public Brazil(){ super(); super.jerseyColor = &quot;Yellow&quot;; } public void quarterFinalResult(){ super.semiFinals = false; } } public class England extends QuarterFinalTeam{ public England(){ super(); super.jerseyColor = &quot;White &amp; Blue&quot;; } public void quarterFinalResult(){ super.semiFinals = false; } } public class France extends QuarterFinalTeam{ public France(){ super(); super.jerseyColor = &quot;Blue White &amp; Red&quot;; } public void quarterFinalResult(){ super.semiFinals = true; } } public class Morocco extends QuarterFinalTeam{ public Morocco(){ super(); super.jerseyColor = &quot;Red &amp; Green&quot;; } public void quarterFinalResult(){ super.semiFinals = true; } } public class Portugal extends QuarterFinalTeam{ public Portugal(){ super(); super.jerseyColor = &quot;Red &amp; Green&quot;; } public void quarterFinalResult(){ super.semiFinals = false; } } QuarterFinalTeam.main(null); . import java.util.Date; import java.text.SimpleDateFormat; import java.time.LocalDate; import java.time.Period; import java.time.ZoneId; public class Person { private String name; private String birthday; public Person (String name, String birthday){ this.name = name; this.birthday = birthday; } public String getName(){ return name; } public int getAge(){ if (this.birthday != null) { // LocalDate birthDay = this.birthday.toInstant().atZone(ZoneId.systemDefault()).toLocalDate(); // return Period.between(birthDay, LocalDate.now()).getYears(); // too lazy to use a name thing } return -1; } } public class Student extends Person { private int grade; private double gpa; public Student (String name, String birthday, int grade, double gpa) { super(name, birthday); this.grade = grade; this.gpa = gpa; } public int getGrade(){ return grade; } @Override public String toString(){ return &quot;wow crazy string, im too lazy to write a proper to string&quot;; } } public class Teacher extends Person { private String subject; public Teacher (String name, String birthday, String subject){ super(name, birthday); this.subject = subject; } @Override public String toString(){ return &quot;woah&quot;; } } public class Main{ public static void main(String[] args){ Student nathan = new Student(&quot;Nathan&quot;, &quot;Sometime in April? I think?&quot;, 11, 4.0); System.out.println(nathan.toString()); Teacher mrMort = new Teacher(&quot;John Mortensen&quot;, &quot;Old.&quot;, &quot;Computer Science&quot;); System.out.println(mrMort.toString()); } } Main.main(null); . Unit 10 Recursion . Google form submitted by group .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/study%20guide/2022/12/13/hw-part-two.html",
            "relUrl": "/college%20board/study%20guide/2022/12/13/hw-part-two.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Inheritance",
            "content": "Inheritance . A ability to inherit characteristics from super class to sub classes. Reduces risk of error and reduces redundancy. extends key word used to inherit characteristics from a class. You can have multiple instances of inheritance. Constructors in a sub class needs to have at least the same definition as the old class. When you call super() you call the supper class&#39;s constructor which must have all relevant parameters passed into it. @Override needed to state overriding methods of a super class and makes it readable . Creating Reference Using Inheritance Hierarchies . Tree called inheritance hierarchies where lower subclasses inherit upper super classes in the hierarchy . Polymorphism . Allows methods to take on multiple forms for code reusability of methods with different forms/implementations but execute the same way . Super class . Includes equals() and toString() methods which are the most common methods of the Object class . Homework Part I . public class QuarterFinalTeam{ String jerseyColor; boolean quarterFinals; boolean semiFinals; public QuarterFinalTeam(){ this.quarterFinals = true; } public static void determineResults(QuarterFinalTeam team1, QuarterFinalTeam team2){ team1.quarterFinalResult(); team2.quarterFinalResult(); } public void quarterFinalResult(){} public static void main(String[] args){ Netherlands netherlands = new Netherlands(); Argentina argentina = new Argentina(); Croatia croatia = new Croatia(); Brazil brazil = new Brazil(); England england = new England(); France france = new France(); Morocco morocco = new Morocco(); Portugal portugal = new Portugal(); QuarterFinalTeam.determineResults(netherlands, argentina); QuarterFinalTeam.determineResults(croatia, brazil); QuarterFinalTeam.determineResults(england, france); QuarterFinalTeam.determineResults(morocco, portugal); System.out.println(&quot;Netherlands: &quot; + &quot;jerseyColor = &quot; + netherlands.jerseyColor + &quot;, quarterFinals = &quot; + netherlands.quarterFinals + &quot;, semiFinals = &quot; + netherlands.semiFinals); System.out.println(&quot;Argentina: &quot; + &quot;jerseyColor = &quot; + argentina.jerseyColor + &quot;, quarterFinals = &quot; + argentina.quarterFinals + &quot;, semiFinals = &quot; + argentina.semiFinals); System.out.println(&quot;Croatia: &quot; + &quot;jerseyColor = &quot; + croatia.jerseyColor + &quot;, quarterFinals = &quot; + croatia.quarterFinals + &quot;, semiFinals = &quot; + croatia.semiFinals); System.out.println(&quot;Brazil: &quot; + &quot;jerseyColor = &quot; + brazil.jerseyColor + &quot;, quarterFinals = &quot; + brazil.quarterFinals + &quot;, semiFinals = &quot; + brazil.semiFinals); System.out.println(&quot;England: &quot; + &quot;jerseyColor = &quot; + england.jerseyColor + &quot;, quarterFinals = &quot; + england.quarterFinals + &quot;, semiFinals = &quot; + england.semiFinals); System.out.println(&quot;France: &quot; + &quot;jerseyColor = &quot; + france.jerseyColor + &quot;, quarterFinals = &quot; + france.quarterFinals + &quot;, semiFinals = &quot; + france.semiFinals); System.out.println(&quot;Morocco: &quot; + &quot;jerseyColor = &quot; + morocco.jerseyColor + &quot;, quarterFinals = &quot; + morocco.quarterFinals + &quot;, semiFinals = &quot; + morocco.semiFinals); System.out.println(&quot;Portugal: &quot; + &quot;jerseyColor = &quot; + portugal.jerseyColor + &quot;, quarterFinals = &quot; + portugal.quarterFinals + &quot;, semiFinals = &quot; + portugal.semiFinals); } } public class Netherlands extends QuarterFinalTeam{ public Netherlands(){ super(); super.jerseyColor = &quot;Orange&quot;; } public void quarterFinalResult(){ super.semiFinals = false; } } public class Argentina extends QuarterFinalTeam{ public Argentina(){ super(); super.jerseyColor = &quot;Blue &amp; White&quot;; } public void quarterFinalResult(){ super.semiFinals = true; } } public class Croatia extends QuarterFinalTeam{ public Croatia(){ super(); super.jerseyColor = &quot;Red &amp; White&quot;; } public void quarterFinalResult(){ super.semiFinals = true; } } public class Brazil extends QuarterFinalTeam{ public Brazil(){ super(); super.jerseyColor = &quot;Yellow&quot;; } public void quarterFinalResult(){ super.semiFinals = false; } } public class England extends QuarterFinalTeam{ public England(){ super(); super.jerseyColor = &quot;White &amp; Blue&quot;; } public void quarterFinalResult(){ super.semiFinals = false; } } public class France extends QuarterFinalTeam{ public France(){ super(); super.jerseyColor = &quot;Blue White &amp; Red&quot;; } public void quarterFinalResult(){ super.semiFinals = true; } } public class Morocco extends QuarterFinalTeam{ public Morocco(){ super(); super.jerseyColor = &quot;Red &amp; Green&quot;; } public void quarterFinalResult(){ super.semiFinals = true; } } public class Portugal extends QuarterFinalTeam{ public Portugal(){ super(); super.jerseyColor = &quot;Red &amp; Green&quot;; } public void quarterFinalResult(){ super.semiFinals = false; } } QuarterFinalTeam.main(null); . Netherlands: jerseyColor = Orange, quarterFinals = true, semiFinals = false Argentina: jerseyColor = Blue &amp; White, quarterFinals = true, semiFinals = true Croatia: jerseyColor = Red &amp; White, quarterFinals = true, semiFinals = true Brazil: jerseyColor = Yellow, quarterFinals = true, semiFinals = false England: jerseyColor = White &amp; Blue, quarterFinals = true, semiFinals = false France: jerseyColor = Blue White &amp; Red, quarterFinals = true, semiFinals = true Morocco: jerseyColor = Red &amp; Green, quarterFinals = true, semiFinals = true Portugal: jerseyColor = Red &amp; Green, quarterFinals = true, semiFinals = false . Homework Part II . import java.util.Date; import java.text.SimpleDateFormat; import java.time.LocalDate; import java.time.Period; import java.time.ZoneId; public class Person { private String name; private String birthday; public Person (String name, String birthday){ this.name = name; this.birthday = birthday; } public String getName(){ return name; } public int getAge(){ if (this.birthday != null) { // LocalDate birthDay = this.birthday.toInstant().atZone(ZoneId.systemDefault()).toLocalDate(); // return Period.between(birthDay, LocalDate.now()).getYears(); // too lazy to use a name thing } return -1; } } public class Student extends Person { private int grade; private double gpa; public Student (String name, String birthday, int grade, double gpa) { super(name, birthday); this.grade = grade; this.gpa = gpa; } public int getGrade(){ return grade; } @Override public String toString(){ return &quot;wow crazy string, im too lazy to write a proper to string&quot;; } } public class Teacher extends Person { private String subject; public Teacher (String name, String birthday, String subject){ super(name, birthday); this.subject = subject; } @Override public String toString(){ return &quot;woah&quot;; } } public class Main{ public static void main(String[] args){ Student nathan = new Student(&quot;Nathan&quot;, &quot;Sometime in April? I think?&quot;, 11, 4.0); System.out.println(nathan.toString()); Teacher mrMort = new Teacher(&quot;John Mortensen&quot;, &quot;Old.&quot;, &quot;Computer Science&quot;); System.out.println(mrMort.toString()); } } Main.main(null); . wow crazy string, im too lazy to write a proper to string woah .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/unit%209/2022/12/12/inheritance.html",
            "relUrl": "/college%20board/unit%209/2022/12/12/inheritance.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "FRQ 4",
            "content": "public class LightBoard{ private boolean[][] lights; public LightBoard(int numRows, int numCols){ this.lights = new boolean[numRows][numCols]; for(int r = 0; r &lt; numRows; r++){ for(int c = 0; c &lt; numCols; c++){ double random = Math.random(); if (random &lt;= 0.4){ lights[r][c] = true; } } } } public boolean evaluateLight(int r, int c){ boolean light = lights[r][c]; int numLightsOn = 0; for (int col = 0; col &lt; c; col++){ if(lights[r][col]){ numLightsOn ++; } } if(light &amp;&amp; numLightsOn%2 == 0){ return false; } else if(!light &amp;&amp; numLightsOn%3 == 0){ return true; } else{ return light; } } public static void main(String[] args){ LightBoard lightBoard = new LightBoard(5, 5); System.out.println(lightBoard.evaluateLight(0, 4)); } } LightBoard.main(null); . false .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/2022/12/12/frq4.html",
            "relUrl": "/college%20board/2022/12/12/frq4.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "College Board Units HW",
            "content": "HW Scores . Unit Score Comments . Unit 1 Primitives | 1/1 | Took lots of notes and did extra problems | . Unit 2 Using Objects | 0.9/1 | :thumbs up: | . Unit 3 Booleans, If/Else | 0.9/1 | no comment | . Unit 4 Iteration | 1/1 | no comment | . Unit 5 Classes | N/A | (own lesson so no grade) | . total | 3.8/4 | | . Unit 1 Primitives . // 2006 1a public boolean conflictsWith(Appointment other){ return getTime().overlapsWith(other.getTime()); } // 2006 1b public void clearConflicts(Appointment appt){ for (int i = 0; i &lt; aptList.size(); i++){ if (appt.conflictsWith((Appointment)apptList.get(i))){ aptList.remove(i); } } } // 2006 1c public boolean addAppt(Appointment appt, boolean emergency){ if (emergency){ clearConflicts(appt); } else{ for (int i = 0; i &lt; apptList.size(); i++){ if (appt.conflictsWith((Appointment)apptList.get(i))){ return false; } } } return apptList.add(appt); } // 2006 2a public double purchasePrice(){ return (1 + taxRate) * getListPrice(); } // 2006 3a public int compareCustomer(Customer other){ int comparedNames = getName().compareTo(other.getName()); if (comparedNames != 0){ return comparedNames; } else{ return getID() - other.getID(); } } . Unit 2 Using Objects . public class Goblin { private String name; private int HP; private int DMG; private double hitChance; private double criticalHitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public double getCriticalHitChance(){ return criticalHitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } public void setCriticalHitChance(double newCriticalHitChance) { this.criticalHitChance = newCriticalHitChance; } } . Unit 3 Booleans, If/Else HW . // 2009 3b public int getChargeStartTime(int chargeTime){ int startTime = 0; for (int i = 1; i &lt; 24; i++){ if (this.getChargingCost(i, chargeTime) &lt; this.getChargingCost(startTime, chargeTime)){ startTime = i; } } return startTime; } // 2017 1b public boolean isStrictlyIncreasing(){ for (int i = 0; i &lt; digitList.size()-1; i++){ if (digitList.get(i).intValue() &gt;= digitList.get(i+1).intValue()){ return false; } } return true; } // 2019 3b public boolean evaluateLight(int row, int col) { int onInCol = 0; for (int r = 0; r &lt; lights.length; r++) { if (lights[r][col]) { onInCol++; } } if (lights[row][col] &amp;&amp; onInCol % 2 == 0) { return false; } else if (!lights[row][col] &amp;&amp; onInCol % 3 == 0) { return true; } else { return lights[row][col]; } } . Unit 4 Iteration HW . public class Guessing { static int b = randomNumber(); static boolean gameRunning = true; public static int randomNumber() { double a = (1 + Math.random() * 100); return ((int) Math.floor(a)); } public static void newNumber(){ b = randomNumber(); } public static String guessing(String guess) { int c = Integer.valueOf(guess); if (c != b) { if (c &gt; b) { return (c + &quot; was not the number,&quot; + &quot; nlower n&quot;); } if (c &lt; b) { return ( c + &quot; was not the number,&quot; + &quot; nhigher n&quot;); } } if (c == b) { gameRunning = false; return &quot;You guessed it! The number was &quot; + b; } return &quot;error&quot;; } } public class Main{ public static void main(String[] args){ Scanner scanner = new Scanner(System.in); while(Guessing.gameRunning){ System.out.println(&quot;Type Guess Here: &quot;); String input = scanner.nextLine(); System.out.println(Guessing.guessing(input)); } } } Main.main(null); .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/study%20guide/2022/12/01/collegeboard-hw-and-scores.html",
            "relUrl": "/college%20board/study%20guide/2022/12/01/collegeboard-hw-and-scores.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Array Lists Notes & HW",
            "content": "Intro Notes . ArrayLists have a reference type The difference bewteeen Arrays and ArrayLists are that ArrayLists have a mutable size while Arrays do not. Can add, find size clear, remove at an index tet an index or checki if the list is empty for loop . Ehanced for loop &quot;for each&quot; iterates through each item in the ArrayList to directly get the token of the ArrayList . It&#39;s a way of organizing anything, particularly Java objects. ArrayLists can only store wrapper classes and java objects which differs from say lists or arrays. . Min Max . CAn iterate through and set a variable equal to comparison variable and continue until finished . Searching . a for loop looking for the index of a certain which can be done with a combination of if/else statements and other conditionals Order matters in a search, for instance if we have 5 ducks, it will iterate sequentially, sorts them in specified order, usually descending or ascending order through sort() . Homework . import java.util.ArrayList; import java.util.Collections; // Initializing an ArrayList filled with strings ArrayList&lt;String&gt; strings = new ArrayList&lt;&gt;(); strings.add(&quot;5&quot;); strings.add(&quot;5.0&quot;); strings.add(&quot;5AB3&quot;); strings.add(&quot;Eighty Six&quot;); strings.add(&quot;86&quot;); strings.add(&quot;Your mom&quot;); strings.add(&quot;Cool&quot;); // function to iterate and print out items public void print(ArrayList&lt;String&gt; strings){ for (String str : strings){ System.out.println(str); } } // 1st bullet (Sort an ArrayList in descending order and swap the first and last elements) System.out.println(&quot;&quot;); Collections.sort(strings, Collections.reverseOrder()); System.out.println(&quot;Reverse Order: &quot;); print(strings); System.out.println(&quot;Swap 1st &amp; Last Element: &quot;); String temp = strings.get(0); strings.remove(0); strings.add(0,strings.get(strings.size()-1)); strings.remove(strings.size()-1); strings.add(strings.size(), temp); print(strings); . Reverse Order: Your mom Eighty Six Cool 86 5AB3 5.0 5 Swap 1st &amp; Last Element: 5 Eighty Six Cool 86 5AB3 5.0 Your mom . // Initializing an ArrayList filled with strings ArrayList&lt;String&gt; strings = new ArrayList&lt;&gt;(); strings.add(&quot;5&quot;); strings.add(&quot;5.0&quot;); strings.add(&quot;5AB3&quot;); strings.add(&quot;Eighty Six&quot;); strings.add(&quot;86&quot;); strings.add(&quot;Your mom&quot;); strings.add(&quot;Cool&quot;); // 2nd bullet point (Find and display the hashCode of an Arraylist before and after being sorted) // hashCode before being sorted System.out.println(&quot;Unsorted hashCode: &quot; + strings.hashCode()); // sorted hashCode Collections.sort(strings); System.out.println(&quot;Sorted hashCode: &quot; + strings.hashCode()); . Unsorted hashCode: -1406022601 Sorted hashCode: 1650288503 .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/unit%207/2022/12/01/array-lists.html",
            "relUrl": "/college%20board/unit%207/2022/12/01/array-lists.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Fixing Database Error",
            "content": "Error . Relationships . OneToMany relationship and ManyToOne relationship stores POJOs in separate tables which are tied by one table that stores the relationship between using their respective ids. (In this case I used StepLog instead of Day because I thought it might&#39;ve been a more appropriate name) . . Database Locking . The issue is that SQL&#39;s implementation of autogenerated ids comes from hibernate_sequence which is a global table so when a request to pull a value from the table is processed, SQL locks the entire database. So, when a step log is created, JPA requests to generate an id for the newly created steplog which causes the entire database to become locked and in turn prevent the following request to update the person_step_log table from being updated. This results in the transaction failing which rolls back all changes. . . Fix . ID generation using IDENTITY . One fix was to use a separate id generation method independent of the hibernate_sequence table used to automatically generate ids. To do this, you can change the id generation method for StepLog to IDENTITY. . . AutoIncreament . This enables you to use SQL&#39;s AutoIncreament feature as your id generation method. . Successful Database Write . Thus, no request is needed/made which locks the database and therefore allows the relationship to be written into the person_step_log table. . .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/sql/2022/11/28/fixing-db.html",
            "relUrl": "/pbl/sql/2022/11/28/fixing-db.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Study Guide",
            "content": ".",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/collegeboard/study%20guide/2022/11/18/study-guide.html",
            "relUrl": "/pbl/collegeboard/study%20guide/2022/11/18/study-guide.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "FRQ 2",
            "content": "FRQ 2 .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/collegeboard/week%2013/2022/11/16/frq2.html",
            "relUrl": "/pbl/collegeboard/week%2013/2022/11/16/frq2.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "FRQ 1",
            "content": "FRQ 1 .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/collegeboard/week%2013/2022/11/14/frq1.html",
            "relUrl": "/pbl/collegeboard/week%2013/2022/11/14/frq1.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Trimester 1 Reflection",
            "content": "Overall Reflection/Takeaways . Overall, there was a lot to takeaway from this trimester. Apart from covering mostly each of college board&#39;s 10 units for CSA and other general Java/OOP related topics, PBL covered a wide range of skills and tools that I was able to experience. The main issue for me was time management and separating college board and pbl into manageable parts. Often times I was all over the place w/ CS work. Nevertheless, there was a lot to learn that will both help with my CS knowledge and my future career. . Project Based Learning . PBL was a really good experience especially in understanding what is necessary for full stack. Especially for web development, there was a lot to understand in developing websites and how to use and integrate databases and APIs into my websites. Beyond just web development, I think this trimester&#39;s PBL rly helped extend to other aspects of code development in terms of working with teams and employing similar concepts to other applications. . Fastpages . Learning Fastpages helped develop my ability to blog my learning and developments. Fastpages itself was generally very easy to use to develop requiring the creation of notebooks or html/md files. Generally, it seems to be a very useful tool that I can maybe even use in the future outside of CSA. . AWS . Learning AWS enough to use it was a nightmare at first. It still is since many of the files and settings for the aws server wasn&#39;t created by me or a teammate. However, it was enough to know how docker creates an image of the code base from a github repo and then runs it on AWS&#39;s local machine before finally being managed by nginx as a web url. I also gained a better understanding of how to use linux commands and terminal in general. . Agile . One of the things we learned was the agile programming philosophy. Overall it helped establish how to delegate tasks to other teammates and develop my ability to communicate and accomplish tasks with my teammates. . HTML/JS . Although not a major focus, we learned some HTML and JS which was a decent exposure for me since I had little experience with web development. Having to deal with it however definitely gave me the opportunity to these two vital aspects of web development. . College Board Learning . This covered the 10 units for college board and although we didn&#39;t cover all the units, there were a decent amount of CS topics to takeaway. . Methods and Control . Methods and control structures are important tools in building effective code. Not only do they manage the flow of code, they also enable efficient structures for code that can be reproduced for future instances of code. . Primitives . Primitives are the most basic data types of Java and most other programming languages. Although they store small data, they are effective and can be casted to different data types. They are most easily processed by processors and are essential to most programs in a variety of ways. . // 1A public boolean conflictsWith(Appointment other){ return getTime().overlapsWith(other.getTime()); } // 1B public void clearConflicts(Appointment appt){ for (int i = 0; i &lt; aptList.size(); i++){ if (appt.conflictsWith((Appointment)apptList.get(i))){ aptList.remove(i); } } } // 1C public boolean addAppt(Appointment appt, boolean emergency){ if (emergency){ clearConflicts(appt); } else{ for (int i = 0; i &lt; apptList.size(); i++){ if (appt.conflictsWith((Appointment)apptList.get(i))){ return false; } } } return apptList.add(appt); } // 2A public double purchasePrice(){ return (1 + taxRate) * getListPrice(); } // 3A public int compareCustomer(Customer other){ int comparedNames = getName().compareTo(other.getName()); if (comparedNames != 0){ return comparedNames; } else{ return getID() - other.getID(); } } . Using Objects . Objects are more complex data types and reflect the Object Oriented Programming paradigm which models the real world&#39;s use of objects except with code. It uses classes which are &#39;blue prints&#39; for the code and then instantiates that class as an &#39;object&#39;. At its core, it consists of attributes (data/variables) and methods. . public class Goblin { private String name; private int HP; private int DMG; private double hitChance; private double criticalHitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public double getCriticalHitChance(){ return criticalHitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } public void setCriticalHitChance(double newCriticalHitChance) { this.criticalHitChance = newCriticalHitChance; } } . import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { if (Math.random() &lt; attackerGoblin.getCriticalHitChance()){ attackeeGoblin.takeDMG(2*attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; lands a critical hit!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + 2*attackerGoblin.getDMG() + &quot; damage&quot;); } else{ attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.50); goblin1.setCriticalHitChance(0.05); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); goblin1.setCriticalHitChance(0.25); fight(goblin1, goblin2); } } Duel.main(null); . Boolean and If/Else Statements . Booleans are important data types which manage simple true or false. This helps manage simple conditions which are used for conditional statements like if/else or loops. If/else statements are vital to code and managing conditions in our code to execute either or sequences of code. . // 2009 3B public int getChargeStartTime(int chargeTime){ int startTime = 0; for (int i = 1; i &lt; 24; i++){ if (this.getChargingCost(i, chargeTime) &lt; this.getChargingCost(startTime, chargeTime)){ startTime = i; } } return startTime; } // 2017 1B public boolean isStrictlyIncreasing(){ for (int i = 0; i &lt; digitList.size()-1; i++){ if (digitList.get(i).intValue() &gt;= digitList.get(i+1).intValue()){ return false; } } return true; } // 2019 3B public boolean evaluateLight(int row, int col) { int onInCol = 0; for (int r = 0; r &lt; lights.length; r++) { if (lights[r][col]) { onInCol++; } } if (lights[row][col] &amp;&amp; onInCol % 2 == 0) { return false; } else if (!lights[row][col] &amp;&amp; onInCol % 3 == 0) { return true; } else { return lights[row][col]; } } . Iteration . Iteration is important for looping sections of code and manages the complexity of such code. There are 3 main types of loops being for while and recursion. This is an important way to iterate through code multiple times. . public class Guessing { static int b = randomNumber(); static boolean gameRunning = true; public static int randomNumber() { double a = (1 + Math.random() * 100); return ((int) Math.floor(a)); } public static void newNumber(){ b = randomNumber(); } public static String guessing(String guess) { int c = Integer.valueOf(guess); if (c != b) { if (c &gt; b) { return (c + &quot; was not the number,&quot; + &quot; nlower n&quot;); } if (c &lt; b) { return ( c + &quot; was not the number,&quot; + &quot; nhigher n&quot;); } } if (c == b) { gameRunning = false; return &quot;You guessed it! The number was &quot; + b; } return &quot;error&quot;; } } public class Main{ public static void main(String[] args){ Scanner scanner = new Scanner(System.in); while(Guessing.gameRunning){ System.out.println(&quot;Type Guess Here: &quot;); String input = scanner.nextLine(); System.out.println(Guessing.guessing(input)); } } } Main.main(null); . Writing Classes . Writing Classes is important since the definition of classes defines the properties of objects and the functions of the class itself. This in turn can be used to build complex templates of code. Among the most important aspects of classes are getters, setters, and constructors which are essential to classes. . No homework since it was our presentation. . Array . Arrays are a useful way to group data. It acts as a container of data (primitives, objects, etc.) and can easily be mutated. . // Write array methods for the Array Methods class below out of the options given above. public class ArrayMethods { private int[] values = {1, 2, 3, 4, 5, 6, 7, 8}; public void printElements(){ for(int i = 0; i &lt; values.length; i++){ System.out.println(values[i]); } } public void swapElements(){ int lastElement = values[values.length-1]; values[values.length-1] = values[0]; values[0] = lastElement; } public void replaceAllZero(){ for(int i = 0; i &lt; values.length; i++){ values[i] = 0; } } public static void main(String[] args){ System.out.println(&quot;First and Last Element Swap: &quot;); ArrayMethods swapElements = new ArrayMethods(); swapElements.swapElements(); swapElements.printElements(); System.out.println(&quot;Replacing All Elements w/ Zero: &quot;); ArrayMethods replaceAllZero = new ArrayMethods(); swapElements.replaceAllZero(); swapElements.printElements(); } } ArrayMethods.main(null); .",
            "url": "https://dontran15.github.io/CSAFastPages/tri%201/week%2012/2022/11/07/tri1-reflection.html",
            "relUrl": "/tri%201/week%2012/2022/11/07/tri1-reflection.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "College Board 2014 Practice MCQ Reflection",
            "content": "Final Score &amp; General Reflection . My final score was 36/40 which I&#39;d say I&#39;m pretty happy with given that an mc score in that range is in range for a 5 on the AP exam. However, I think the main thing I&#39;ll need to work on is timing given that I gave myself a large amount of time to finish the mcq in comparison to the time that college board gives me. In future practices, I think I&#39;ll just need to focus on timing and getting myself to answer and comprehend questions faster. . Mistakes and Corrections . Question 18 . This was more of a silly mistake which I got E. We see that in order to actually access the actual integer value itself for the index. Thus a random number with the size as an argument will fail to execute due to it having no args. Comparatively for the right answer B, the answer works as it casts the following value multiplication into an integer after multiplying. It also happens to floor the values upon casting ensuring that they do not include 1 in their answer which would indicate a valid random index. . Question 34 . For question 34, it implements code about the construction of a circle given a point and a radius. E is wrong since I only defines the center as (0,0) using the no argument constructor and III won&#39;t work since the private modifier will prevent the variable of center from being directly mutated. II is correct since it uses the full argument constructor which sets the arguments as the point and thus the center of the circle. Therefore B would be the correct answers. . Question 39 . B can&#39;t be correct since this is the first input into the recursive function but since the function calls again within the return statement, there is another recursive function. Thus, in order to get the correct answer, D (which is 16), you have to go through a complex rabbit hole of recursive functions until eventually the double recursive function call calls the first condition twice and thus ends with 8*2 = 16. . Question 40 . The main thing about this question was understanding the recursive equation. Since the function will run first before it outputs the print statement of the last iteration of the recursive function. Since it will only print the index from 0-5, only the first 4 letters of the string will be in the substring. Thus, the right answer is C. . Mistakes Reflection . Overall, while I did do good on most of the topics, the topic I struggled the ost with was recursion and special functions/methods that java provides such as Math.random. If I work on these topics in conjunction with time management, I think I&#39;ll be very well positioned for the AP Exam. .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%2012/2022/11/07/mcq-reflection.html",
            "relUrl": "/college%20board/week%2012/2022/11/07/mcq-reflection.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Arrays",
            "content": "Arrays . Data Type (reference data type) refers to an object Primitives vs Reference: lower vs UPPER . arrays and ArrayLists . Array Syntax . int[] array = new int[10]; int[] array = (10, 2, 3, 4, 5); . Traverse Array . You can use any sort of loop, main method is through for loops which is easiest way to access array indices. . College Board . Min max and sum of arrays Array.length() to find how long arrays are and access at specific index array[] . HW . Options for hacks (Pick two): . Swap the first and last element in the array | Replace all even elements with 0 | . // Write array methods for the Array Methods class below out of the options given above. public class ArrayMethods { private int[] values = {1, 2, 3, 4, 5, 6, 7, 8}; public void printElements(){ for(int i = 0; i &lt; values.length; i++){ System.out.println(values[i]); } } public void swapElements(){ int lastElement = values[values.length-1]; values[values.length-1] = values[0]; values[0] = lastElement; } public void replaceAllZero(){ for(int i = 0; i &lt; values.length; i++){ values[i] = 0; } } public static void main(String[] args){ System.out.println(&quot;First and Last Element Swap: &quot;); ArrayMethods swapElements = new ArrayMethods(); swapElements.swapElements(); swapElements.printElements(); System.out.println(&quot;Replacing All Elements w/ Zero: &quot;); ArrayMethods replaceAllZero = new ArrayMethods(); swapElements.replaceAllZero(); swapElements.printElements(); } } ArrayMethods.main(null); . First and Last Element Swap: 8 2 3 4 5 6 7 1 Replacing All Elements w/ Zero: 0 0 0 0 0 0 0 0 .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%2010/2022/10/25/array.html",
            "relUrl": "/college%20board/week%2010/2022/10/25/array.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Iteration Homework",
            "content": "Part 1 . public class Guessing { static int b = randomNumber(); static boolean gameRunning = true; public static int randomNumber() { double a = (1 + Math.random() * 100); return ((int) Math.floor(a)); } public static void newNumber(){ b = randomNumber(); } public static String guessing(String guess) { int c = Integer.valueOf(guess); if (c != b) { if (c &gt; b) { return (c + &quot; was not the number,&quot; + &quot; nlower n&quot;); } if (c &lt; b) { return ( c + &quot; was not the number,&quot; + &quot; nhigher n&quot;); } } if (c == b) { gameRunning = false; return &quot;You guessed it! The number was &quot; + b; } return &quot;error&quot;; } } public class Main{ public static void main(String[] args){ Scanner scanner = new Scanner(System.in); while(Guessing.gameRunning){ System.out.println(&quot;Type Guess Here: &quot;); String input = scanner.nextLine(); System.out.println(Guessing.guessing(input)); } } } Main.main(null); . Type Guess Here: 50 was not the number, higher Type Guess Here: 75 was not the number, higher Type Guess Here: 90 was not the number, higher Type Guess Here: 92 was not the number, higher Type Guess Here: You guessed it! The number was 94 . Part 2 .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%209/2022/10/23/iteration-hw.html",
            "relUrl": "/college%20board/week%209/2022/10/23/iteration-hw.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Boolean and If Statement Homework",
            "content": "2009 3b . public int getChargeStartTime(int chargeTime){ int startTime = 0; for (int i = 1; i &lt; 24; i++){ if (this.getChargingCost(i, chargeTime) &lt; this.getChargingCost(startTime, chargeTime)){ startTime = i; } } return startTime; } . 2017 1b . public boolean isStrictlyIncreasing(){ for (int i = 0; i &lt; digitList.size()-1; i++){ if (digitList.get(i).intValue() &gt;= digitList.get(i+1).intValue()){ return false; } } return true; } . 2019 3b . public boolean evaluateLight(int row, int col) { int onInCol = 0; for (int r = 0; r &lt; lights.length; r++) { if (lights[r][col]) { onInCol++; } } if (lights[row][col] &amp;&amp; onInCol % 2 == 0) { return false; } else if (!lights[row][col] &amp;&amp; onInCol % 3 == 0) { return true; } else { return lights[row][col]; } } .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%209/2022/10/23/boolean-and-if-statements-hw.html",
            "relUrl": "/college%20board/week%209/2022/10/23/boolean-and-if-statements-hw.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "If/Else Statements",
            "content": "3 Types . Loops help simplify repetitive code, almost all of them use conditions that need to be changed within the code for the loop to stop. . While Loops . While a specified condition is met, the loop will keep running until the loops condition is no longer true. . For Loop . For each thing in a sequence of code for each part as long as a condition is met, if the condition is met as false, the condition will no longer be true and thus stop. . Recursion . Similar to For and While loops but you run and run the function inside itself over and over again. They have conditions using if/else and keeps running until the if statement no longer is true and thus finally ends with the else statement in which the function is no longer true. . Nested Iteration . Not a method but it&#39;s a technique to simplify code more. You put a loop within a loop and it runs two conditions where once one is no longer run, it runs again through the upper loop . //while loop import java.util.Scanner; public class Checker { public static void main(String[] args) { int number; // Create a Scanner object for keyboard input. Scanner keyboard = new Scanner(System.in); // Get a number from the user. System.out.print(&quot;Enter a number in the range of 1 through 100: &quot;); number = keyboard.nextInt(); while (number &gt; 100 || number &lt; 0) { System.out.print(&quot;Invalid input. Enter a number in the range &quot; + &quot;of 1 through 100: &quot;); number = keyboard.nextInt(); } } } Checker.main(null); . Enter a number in the range of 1 through 100: Invalid input. Enter a number in the range of 1 through 100: Invalid input. Enter a number in the range of 1 through 100: Invalid input. Enter a number in the range of 1 through 100: . public class LoopConversion { public static void main(String[] args) { //convert to for loop for (int count = 0; count &lt; 5; count++) { System.out.println(&quot;count is &quot; + count); } } } LoopConversion.main(null); . count is 0 count is 1 count is 2 count is 3 count is 4 . public class Clock { public static void main(String[] args) { for(int hours = 1; hours &lt;= 12; hours++) { for (int minutes = 0; minutes &lt;= 59; minutes++) { for (int seconds = 0; seconds &lt;= 59; seconds++) { System.out.printf(&quot;%02d:%02d:%02d n&quot;, hours, minutes, seconds); } } } } } . for (int i = 0; i &lt; 5; i++){ System.out.println(i); } . 0 1 2 3 4 . int i = 0; while (i &lt; 5){ System.out.println(i); i++; } . 0 1 2 3 4 . public void recursion(num1, num2) { if(num1 &lt; num2){ System.out.println(num1); num1++; recursion(num1, num2); } else{ System.out.println(num2); } } recursion(0, 5); . | public void recursion(num1, num2) &lt;identifier&gt; expected | public void recursion(num1, num2) &lt;identifier&gt; expected . Iteration Homework . https://tigran7.github.io/fastpages/2022/10/18/Recursion.html .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%209/2022/10/19/iteration.html",
            "relUrl": "/college%20board/week%209/2022/10/19/iteration.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Unit 5 Code Examples",
            "content": "import java.util.ArrayList; public class CarClass{ //Constant public final String vehicleType = &quot;Car&quot;; //Instance Variables private String model; private int milesRun; private float velocity; // Static Variables public static ArrayList&lt;CarClass&gt; carList = new ArrayList&lt;&gt;(); //Constructor public CarClass(String model, int milesRun, float velocity){ this.model = model; this.milesRun = milesRun; this.velocity = velocity; } //Methods public void printModel(){ System.out.println(getModel()); } public void printMilesRun(){ System.out.println(getMilesRun()); } public void printVelocity(){ System.out.println(getVelocity()); } //Getters public String getModel(){ return model; } public int getMilesRun(){ return milesRun; } public float getVelocity(){ return velocity; } //Setters public void setModel(String newModel){ model = newModel; } public void setMilesRun(int newMilesRun){ milesRun = newMilesRun; } public void setVelocity(float newVelocity){ velocity = newVelocity; } //Static Methods public static void manufactureCar(String model, int milesRun, float velocity){ CarClass newCar = new CarClass(model, milesRun, velocity); carList.add(newCar); } public static void printCarDetails(){ for (int carIndex = 0; carIndex &lt; carList.size(); carIndex++){ System.out.println(&quot;&quot;); carList.get(carIndex).printModel(); } System.out.println(&quot;&quot;); } //main method public static void main(String[] args){ manufactureCar(&quot;Tesla Model X&quot;, 10, 100); manufactureCar(&quot;Prius&quot;, 200, 70); manufactureCar(&quot;Toyota Minivan&quot;, 500, 65); CarClass.printCarDetails(); } } CarClass.main(null); . Tesla Model X Prius Toyota Minivan .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%209/2022/10/18/java-test.html",
            "relUrl": "/college%20board/week%209/2022/10/18/java-test.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "If/Else Statements",
            "content": "Unit 3 . Booleans . Logic, implementation into code, true or false logic Can be evaluated as true and false Compares data with same data types to see if they are true or not For instance, numbers are commonly used as part of this in code . If/Else Statements . Useful statements that help with control flows as methods, represents conditional programming . If Statements . If statements take a boolean parameter and if it is true, the if statement code executes otherwise nothing happens . If/Else Statements . If/Else works similar to if statements except if the if statement is false and thus not run, the else statement code runs . If/Else/If . If/Else statement that has a nested if statement as another condition. They can be nested infinitely though we use switch case statements to deal with them easier . Switch Case Statement . Executes if else logic much more quickly than if/else/if/else statements . Logic Gates . And gate Or Gate Greater than (or Equal) Gates Less than (or Equal) Gates Equal Operator Not Operator Etc. . Logic gates help process logic through comparisons. In turn, we . De Morgan&#39;s Law . Method of reversing operators and transforming a boolean statement in accordance with the not operator (reverses them) . Truth Table . Method of visualizing true and false statements in all possible combinations that returns either true or false . System.out.println(7*3+6/2-5); . 19 .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%209/2022/10/18/boolean-and-if-statements.html",
            "relUrl": "/college%20board/week%209/2022/10/18/boolean-and-if-statements.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Objects Homework",
            "content": "public class Goblin { private String name; private int HP; private int DMG; private double hitChance; private double criticalHitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public double getCriticalHitChance(){ return criticalHitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } public void setCriticalHitChance(double newCriticalHitChance) { this.criticalHitChance = newCriticalHitChance; } } . import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { if (Math.random() &lt; attackerGoblin.getCriticalHitChance()){ attackeeGoblin.takeDMG(2*attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; lands a critical hit!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + 2*attackerGoblin.getDMG() + &quot; damage&quot;); } else{ attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.50); goblin1.setCriticalHitChance(0.05); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); goblin1.setCriticalHitChance(0.25); fight(goblin1, goblin2); } } Duel.main(null); . jeffrey attacks Gunther the great! jeffrey misses... Gunther the great HP: 4 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 11 jeffrey attacks Gunther the great! jeffrey lands a critical hit! Gunther the great takes 4 damage Gunther the great HP: 0 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 10 Gunther the great has perished .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%208/2022/10/16/objects-hw.html",
            "relUrl": "/college%20board/week%208/2022/10/16/objects-hw.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Objects",
            "content": "Object Oriented Programming . OOP is a typ of coding paradigm that uses objects classes and methods as the main components to the paradigm. Classes act as templates while objects act as instances of the templates. Methods represent the functions each object/class can execute. . Objects can contain data members, methods, constructors, interfaces, nested classes. Variables act as data members/attributes of an object just as an orange represents vitamin C or calorie count. . Declaring methods has 6 parts to it. First is the Access Modifier which is public, protected, private, or default and these defines the level of access code can have to certain methods. Return types are the return types of the data. The next is method name which specifies the name of the method and follows traditional camel case naming conventions. Next is parameter list which is the list of parameters that must be passed through when calling a method and are used as values that the method uses. The body of method is the actual logic of the method and what is executed when it is called. Exceptions are the specific exceptions that a method may need to throw if any unexpected errors happen. This allows errors to compile in Java code. . Reuse, optimization, organization, object reference required to call an object&#39;s method. Must call method with arguments. . Homework: Implement Variables into the Code . See here to find homework .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%208/2022/10/13/objects.html",
            "relUrl": "/college%20board/week%208/2022/10/13/objects.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Primitives",
            "content": "Why Java? . Garbage Collecting Multi Threading . Primitives vs Non-Primitives . Naming Conventions . They all use lower case . Casting . Method to convert primitives into other primitives . Operators . addition | . | subtraction | . | multiplication | . | / division | % modulo | ++ increment | += add then assign to variable | -= subtract then assign to variable | more | . They have orders of operations for each operator . Scanners . import java.util.Scanner Create Scanner object set what the scanner will read with data type . Homework 2006 Question 1, 2a, and 3a . Question 1 . An appointment scheduling system is represented by the following three classes: TimeInterval, Appointment, and DailySchedule. In this question, you will implement one method in the Appointment class and two methods in the DailySchedule class. | A TimeInterval object represents a period of time. The TimeInterval class provides a method to determine if another time interval overlaps with the time interval represented by the current TimeInterval object. An Appointment object contains a time interval for the appointment and a method that determines if there is a time conflict between the current appointment and another appointment. The declarations of the TimeInterval and Appointment classes are shown below. . public class TimeInterval { // returns true if interval overlaps with this TimeInterval; // otherwise, returns false public boolean overlapsWith(TimeInterval interval) { / implementation not shown / } // There may be fields, constructors, and methods that are not shown. } public class Appointment { // returns the time interval of this Appointment public TimeInterval getTime() { / implementation not shown / } // returns true if the time interval of this Appointment // overlaps with the time interval of other; // otherwise, returns false public boolean conflictsWith(Appointment other) { / to be implemented in part (a) / } // There may be fields, constructors, and methods that are not shown. } . (a) Write the Appointment method conflictsWith. If the time interval of the current appointment overlaps with the time interval of the appointment other, method conflictsWith should return true, otherwise, it should return false. Complete method conflictsWith below. // returns true if the time interval of this Appointment // overlaps with the time interval of other; // otherwise, returns false public boolean conflictsWith(Appointment other) . (b) A DailySchedule object contains a list of nonoverlapping Appointment objects. The DailySchedule class contains methods to clear all appointments that conflict with a given appointment and to add an appointment to the schedule. . public class DailySchedule { // contains Appointment objects, no two Appointments overlap private ArrayList apptList; public DailySchedule() { apptList = new ArrayList(); } // removes all appointments that overlap the given Appointment // postcondition: all appointments that have a time conflict with // appt have been removed from this DailySchedule public void clearConflicts(Appointment appt) { / to be implemented in part (b) / } // if emergency is true, clears any overlapping appointments and adds // appt to this DailySchedule; otherwise, if there are no conflicting // appointments, adds appt to this DailySchedule; // returns true if the appointment was added; // otherwise, returns false public boolean addAppt(Appointment appt, boolean emergency) { / to be implemented in part (c) / } // There may be fields, constructors, and methods that are not shown. } . Write the DailySchedule method clearConflicts. Method clearConflicts removes all appointments that conflict with the given appointment. . In writing method clearConflicts, you may assume that conflictsWith works as specified, regardless of what you wrote in part (a). Complete method clearConflicts below. . // removes all appointments that overlap the given Appointment // postcondition: all appointments that have a time conflict with // appt have been removed from this DailySchedule public void clearConflicts(Appointment appt) . (c) Write the DailySchedule method addAppt. The parameters to method addAppt are an appointment and a boolean value that indicates whether the appointment to be added is an emergency. If the appointment is an emergency, the schedule is cleared of all appointments that have a time conflict with the given appointment and the appointment is added to the schedule. If the appointment is not an emergency, the schedule is checked for any conflicting appointments. If there are no conflicting appointments, the given appointment is added to the schedule. Method addAppt returns true if the appointment was added to the schedule; otherwise, it returns false. In writing method addAppt, you may assume that conflictsWith and clearConflicts work as specified, regardless of what you wrote in parts (a) and (b). Complete method addAppt below. . // if emergency is true, clears any overlapping appointments and adds // appt to this DailySchedule; otherwise, if there are no conflicting // appointments, adds appt to this DailySchedule; // returns true if the appointment was added; // otherwise, returns false public boolean addAppt(Appointment appt, boolean emergency) . Question 1a . public boolean conflictsWith(Appointment other){ return getTime().overlapsWith(other.getTime()); } . Question 1b . public void clearConflicts(Appointment appt){ for (int i = 0; i &lt; aptList.size(); i++){ if (appt.conflictsWith((Appointment)apptList.get(i))){ aptList.remove(i); } } } . Question 1c . public boolean addAppt(Appointment appt, boolean emergency){ if (emergency){ clearConflicts(appt); } else{ for (int i = 0; i &lt; apptList.size(); i++){ if (appt.conflictsWith((Appointment)apptList.get(i))){ return false; } } } return apptList.add(appt); } . Question 2a . (a) Write the TaxableItem method purchasePrice. The purchase price of a TaxableItem is its list price plus the tax on the item. The tax is computed by multiplying the list price by the tax rate. For example, if the tax rate is 0.10 (representing 10%), the purchase price of an item with a list price of $6.50 would be $7.15. . Complete method purchasePrice below. // returns the price of the item including the tax public double purchasePrice() . public double purchasePrice(){ return (1 + taxRate) * getListPrice(); } . Question 3a . Consider the following incomplete class that stores information about a customer, which includes a name and unique ID (a positive integer). To facilitate sorting, customers are ordered alphabetically by name. If two or more customers have the same name, they are further ordered by ID number. A particular customer is &quot;greater than&quot; another customer if that particular customer appears later in the ordering than the other customer. public class Customer { // constructs a Customer with given name and ID number public Customer(String name, int idNum) { / implementation not shown / } // returns the customer&#39;s name public String getName() { / implementation not shown / } // returns the customer&#39;s id public int getID() { / implementation not shown / } // returns 0 when this customer is equal to other; // a positive integer when this customer is greater than other; // a negative integer when this customer is less than other public int compareCustomer(Customer other) { / to be implemented in part (a) / } // There may be fields, constructors, and methods that are not shown. } (a) Write the Customer method compareCustomer, which compares this customer to a given customer, other. Customers are ordered alphabetically by name, using the compareTo method of the String class. If the names of the two customers are the same, then the customers are ordered by ID number. Method compareCustomer should return a positive integer if this customer is greater than other, a negative integer if this customer is less than other, and 0 if they are the same. For example, suppose we have the following Customer objects. Customer c1 = new Customer(&quot;Smith&quot;, 1001); Customer c2 = new Customer(&quot;Anderson&quot;, 1002); Customer c3 = new Customer(&quot;Smith&quot;, 1003); The following table shows the result of several calls to compareCustomer. Method Call Result c1.compareCustomer(c1) 0 c1.compareCustomer(c2) a positive integer c1.compareCustomer(c3) a negative integer | Complete method compareCustomer below // returns 0 when this customer is equal to other; // a positive integer when this customer is greater than other; // a negative integer when this customer is less than other public int compareCustomer(Customer other) . public int compareCustomer(Customer other){ int comparedNames = getName().compareTo(other.getName()); if (comparedNames != 0){ return comparedNames; } else{ return getID() - other.getID(); } } .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%208/2022/10/12/primitives-notes.html",
            "relUrl": "/college%20board/week%208/2022/10/12/primitives-notes.html",
            "date": " • Oct 12, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "ArrayLists",
            "content": "ArrayLists . ArrayLists are containers (like arrays, lists, etc), which store data within them. Unlike traditional arrays, ArrayList sizes are not set and can be modified. In Java, they act as objects with their own special syntax. Instantiating an ArrayList is almost essentially the same with any other object where the user needs to call a constructor. In addition, Java&#39;s strong type makes lists, unlike in weak type languages like Python, all the same data type. Overall, ArrayLists are very useful, especially in the context of data bases, because they are expandable containers of data that we can access in a variety of different manners. . Below is an implementation of ArrayLists with a rough application to our Science Olympiad website. . import java.util.*; public class Member{ //instantiates attributes static int idCounter = 0; int id; int grade; String name; String email; String phoneNumber; String password; int yearsInSciOly; String team; String[] events; //Constructor for each attribute public Member(int grade, String name, String email, String phoneNumber, String password, int yearsInSciOly, String team, String[] events){ this.id = idCounter; idCounter++; this.grade = grade; this.name = name; this.email = email; this.phoneNumber = phoneNumber; this.password = password; this.yearsInSciOly = yearsInSciOly; this.team = team; this.events = events; } //creates general ArrayList using Member objects public static ArrayList&lt;Member&gt; createMemberList(){ Member member1 = new Member(11, &quot;Your Mom&quot;, &quot;mom.your@gmail.com&quot;, &quot;696-696-9696&quot;, &quot;12345&quot;, 5, &quot;deez&quot;, new String[]{&quot;Fermi&quot;, &quot;Astrology&quot;, &quot;your mom&quot;}); Member member2 = new Member(12, &quot;Joe&quot;, &quot;joe.your@gmail.com&quot;, &quot;958-696-9696&quot;, &quot;123456&quot;, 5, &quot;deez&quot;, new String[]{&quot;Fermi&quot;, &quot;joe star&quot;, &quot;your mom&quot;}); Member member3 = new Member(9, &quot;Jack&quot;, &quot;jack.your@gmail.com&quot;, &quot;542-696-9696&quot;, &quot;23456&quot;, 5, &quot;deez&quot;, new String[]{&quot;Fermi&quot;, &quot;Niki&quot;, &quot;How to Cope&quot;}); Member member4 = new Member(10, &quot;Jill&quot;, &quot;jill.your@gmail.com&quot;, &quot;234-696-9696&quot;, &quot;123456&quot;, 5, &quot;deez&quot;,new String[]{&quot;Fermi&quot;, &quot;Chem Lab&quot;, &quot;Krish Patil&quot;}); ArrayList&lt;Member&gt; memberList = new ArrayList&lt;&gt;(); //add() method adding members; useful for adding new members every time new member object instantiated memberList.add(member1); memberList.add(member2); memberList.add(member3); memberList.add(member4); return memberList; } //print method that prints the name attribute of each object, prints method being used public static void printMembers(ArrayList&lt;Member&gt; memberList, String arrayListMethod){ System.out.println(&quot;-&quot;); System.out.println(&quot;Method: &quot; + arrayListMethod); //size() method gets integer length of memberList; useful for keeping track of number of members for (int i = 0; i &lt; memberList.size(); i++){ //get() method returns the object specified by index; useful for getting data of individual members //.name retrieves the name attribute from the Member object System.out.println(memberList.get(i).name); } if (memberList.isEmpty()){ //isEmpty() method is useful if we need to check for sure that data is clear or if we want certain conditions System.out.println(&quot;no one here :(&quot;); } System.out.println(&quot;-&quot;); } //Simple log in system that returns true or false (yes it is terribly unsecure) public boolean login(String input){ if (input.equals(password)){ return true; }else{ return false; } } } . Let&#39;s See ArrayLists in Action . ArrayLists can have any type of data in them ranging from primitives (booleans, int, double) to wrapper classes and any other type of object. Below is a member list of Science Olympiad and here I use a variety of methods that can alter or retrieve the data within the ArrayList. The code includes comments explaining the particular use case and why it&#39;s useful. . public class Main{ public static void main(String[] args){ //creates memberList and prints members; some uses of methods within print method ArrayList&lt;Member&gt; memberList = Member.createMemberList(); Member.printMembers(memberList, &quot;instantiating memberList array; get(); size(); isEmpty(); attribute specification&quot;); //add(element) method; Useful for adding new members to databases and additional relevant info memberList.add(new Member(11, &quot;Morb&quot;, &quot;tehee.your@gmail.com&quot;, &quot;754-696-9696&quot;, &quot;34542&quot;, 6, &quot;deez&quot;, new String[]{&quot;Green Generation&quot;, &quot;Anime&quot;, &quot;How to Hit Man&quot;})); Member.printMembers(memberList, &quot;add()&quot;); //clear() method; Useful for clearing members every new season from current competition databases memberList.clear(); Member.printMembers(memberList, &quot;clear()&quot;); memberList = Member.createMemberList(); //remove(int index); Useful for removing members at a specific index in case someone drops out memberList.remove(1); Member.printMembers(memberList, &quot;remove(int i)&quot;); //remove(element); not sure how it could be practically used in reference to objects but it could be useful to remove items from our database according to a particular value of data //set(int i, element); useful for overwriting data in potential cases of a member or merging data of accounts? memberList.set(1, new Member(11, &quot;Gaik&quot;, &quot;Gaiko@gmail.com&quot;, &quot;900-900-9000&quot;, &quot;34562&quot;, 10, &quot;deez&quot;, new String[]{&quot;Slick&quot;, &quot;Smart&quot;, &quot;Speaker&quot;})); Member.printMembers(memberList, &quot;remove(int i)&quot;); //indexOf(element); Might be useful if can be easily accessed and indexed by element w/out having to recreate each time, might be useful for finding certain users //memberList.get(i).indexOf(member); (wrong lol) //lastIndexOf(element); Same as indexOF //memberList.get(i).lastIndexOf(member); (wrong lol) //equals(); same reason it would be hard to use as s indexOf but would be useful for checking if member accounts are the same or if any particular data is similar //memberList.get(i).equals(member); //hashCode(element); Perhaps useful for figuring out certain information in reference to where the objects are being stored in memory or when we need to reference an object //memberList.get(i).hashCode(member); //contains(element); Same as indexOf except in this case checking if certain users are there or not //memberList.contains(memberList.get(i)); //containsAll(Collection collection); Useful for checking if a group of certain users, similar impracticality as indexOf //memberList.containsAll(memberList.get(i)); //sort(Comparator comp) Useful for sorting/organizing certain groups, in particular, likely for local client interactions when admins need to sort data //memberList.sort(); } } Main.main(null); . - Method: instantiating memberList array; get(); size(); isEmpty(); attribute specification Your Mom Joe Jack Jill - - Method: add() Your Mom Joe Jack Jill Morb - - Method: clear() no one here :( - - Method: remove(int i) Your Mom Jack Jill - - Method: remove(int i) Your Mom Gaik Jill - .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/pbl/week%207/2022/10/05/arraylists.html",
            "relUrl": "/college%20board/pbl/week%207/2022/10/05/arraylists.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "RapidAPI AI Stock Info",
            "content": "My RapidAPI . In my example, I used Yahoo finance to return related information of public companies given their ticker symbol. The user puts in their input a ticker symbol and upon submitting the form, it gives the user an output of a summary of the company. . Link to API Implementation . Benefits of Using an API? . APIs benefits us because it enables us as programmers to have easy access to a variety of pre made/built processes uploaded to the web. This comes in the form of almost function like calls that return useful information or do useful processing through the web without us needing to actually use it. It also enables the communication between different services. It also is useful for bypassing the need for us to collect our own data and pour resources into collecting such data. JSON&#39;s are one of the de facto standards of data transmission across APIs because of its simplistic representation of objects. . With an API, you save so much time. Since they&#39;re just basically a massive data pool, you can easily take out data. Unfortunately, these have limitations that we cannot get around without paying a bit, but we will not be doing that in this case. . Benefit(s) of Backend Implementation? . For the backend, much of the internal processing that would&#39;ve been needed to compute or process data can easily be accessed through APIs thereby saving time, money, effort, and other resources into an otherwise expensive processing. This helps the developers to focus primarily on their own unique services rather than minute redundant services that have already been made. It also helps different services interface with each other due to shared/common APIs that enable easy transfers of data. .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/week%206/2022/09/30/RapidAPI.html",
            "relUrl": "/pbl/week%206/2022/09/30/RapidAPI.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Spring Boot Update",
            "content": "Updates . As of now, we&#39;ve managed to get a working calculator with working button inputs using Spring Boot, JavaScript, and some basic HTML/CSS. So far, you can either use button inputs or type into the calculator. The calculator supports basic operators, order of operations (pemdas), and a few basic functions. . Calculator . Controller . package com.nighthawk.spring_portfolio.controllers; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestParam; import com.nighthawk.spring_portfolio.models.calculator.*; @Controller // HTTP requests are handled as a controller, using the @Controller annotation public class CalcController { // CONTROLLER handles GET request for /calculator, maps it to calculator() // method @GetMapping(&quot;/calculator&quot;) public String calculator(@RequestParam(name = &quot;input&quot;, required = false) String input, Model model) { // If no output parameter has been inputted String output; if (input != null) { CalculatorRPN calcRPN = new CalculatorRPN(); calcRPN.parse(input); calcRPN.shuntingYardAlg(); output = String.valueOf(calcRPN.rpnEvaluate()); } else { output = &quot;&quot;; } // model to map output into html model.addAttribute(&quot;output&quot;, output); // load HTML VIEW (calculator.html) return &quot;calculator&quot;; } } . Model . package com.nighthawk.spring_portfolio.models.calculator; import java.util.Stack; import java.util.ArrayList; public class CalculatorRPN { ArrayList&lt;String&gt; tokens = new ArrayList&lt;&gt;(); ArrayList&lt;String&gt; rpnOutput = new ArrayList&lt;&gt;(); String[] functions = { &quot;sin&quot;, &quot;cos&quot;, &quot;tan&quot;, &quot;ln&quot; }; // checks for operator public boolean isOperator(char c) { switch (c) { case &#39;+&#39;: return true; case &#39;-&#39;: return true; case &#39;*&#39;: return true; case &#39;/&#39;: return true; case &#39;^&#39;: return true; default: return false; // else of switch } } public boolean isOperator(String s) { return s.length() == 1 &amp;&amp; isOperator(s.charAt(0)); } public boolean isParenthesis(char c) { switch (c) { case &#39;(&#39;: return true; case &#39;)&#39;: return true; default: return false; } } public boolean isFunction(char c) { for (String func : functions) { if (c == func.charAt(0)) { return true; } if (c == &#39;o&#39;) { return true; } } return false; } public boolean isFunction(String s) { return s.length() == 1 &amp;&amp; isFunction(s.charAt(0)); } public boolean isNumber(String s) { return !isOperator(s) &amp;&amp; !isParenthesis(s.charAt(0)) &amp;&amp; !isFunction(s); } public int getPrecedence(char c) { switch (c) { case &#39;+&#39;: return 2; case &#39;-&#39;: return 2; case &#39;*&#39;: return 3; case &#39;/&#39;: return 3; case &#39;^&#39;: return 4; default: return -1; } } public int getPrecedence(String s) { if (s.length() == 1) { return (getPrecedence(s.charAt(0))); } else { return -1; } } public String getAssociativity(char c) { switch (c) { case &#39;+&#39;: return &quot;left&quot;; case &#39;-&#39;: return &quot;left&quot;; case &#39;*&#39;: return &quot;left&quot;; case &#39;/&#39;: return &quot;left&quot;; case &#39;^&#39;: return &quot;right&quot;; default: return &quot;&quot;; } } public String getAssociativity(String s) { if (s.length() == 1) { return getAssociativity(s.charAt(0)); } else { return &quot;&quot;; } } public double calculate(char operator, double x1, double x2) { switch (operator) { case &#39;+&#39;: return x1 + x2; case &#39;-&#39;: return x1 - x2; case &#39;*&#39;: return x1 * x2; case &#39;/&#39;: return x1 / x2; case &#39;^&#39;: return Math.pow(x1, x2); default: throw new RuntimeException(&quot;Unsupported operator: &quot; + operator); } } public double calculate(String operator, double x1, double x2) { if (operator.length() == 1) { return calculate(operator.charAt(0), x1, x2); } else { throw new RuntimeException(&quot;Unsupported operator or function: &quot; + operator); } } public double funcCalculate(char function, double x) { switch (function) { case &#39;s&#39;: return Math.sin(x); case &#39;c&#39;: return Math.cos(x); case &#39;t&#39;: return Math.tan(x); case &#39;l&#39;: return Math.log1p(x); case &#39;o&#39;: return Math.log10(x); default: throw new RuntimeException(&quot;Unsupported function: &quot; + function); } } public double funcCalculate(String function, double x) { if (function.length() == 1) { return funcCalculate(function.charAt(0), x); } else { throw new RuntimeException(&quot;Unsupported operator or function: &quot; + function); } } // parse input string as array of tokens public ArrayList&lt;String&gt; parse(String input) { String s = &quot;&quot;; for (String func : functions) { input = input.replaceAll(func, Character.toString(func.charAt(0))); } input = input.replaceAll(&quot;log&quot;, &quot;o&quot;); for (int i = 0; i &lt; input.length(); i++) { char c = input.charAt(i); if (isNumber(String.valueOf(c))) { s += c; } else { s += &quot; t&quot; + c + &quot; t&quot;; } } String[] splittedTokens = s.split(&quot; t&quot;, 0); ArrayList&lt;String&gt; tempTokens = new ArrayList&lt;&gt;(); for (String token : splittedTokens) { String trimmedToken = token.trim(); if (trimmedToken != &quot;&quot;) { tempTokens.add(trimmedToken); } } if (tempTokens.get(0).equals(&quot;-&quot;)) { // if breaks, try adding tokens -1, * instead tokens.add(&quot;0&quot;); } for (int i = 0; i &lt; tempTokens.size(); i++) { tokens.add(tempTokens.get(i)); if (i + 1 &gt;= tempTokens.size()) { break; } if (tempTokens.get(i).equals(&quot;)&quot;) &amp;&amp; tempTokens.get(i + 1).equals(&quot;(&quot;)) { tokens.add(&quot;*&quot;); } if (i &gt; 0 &amp;&amp; tempTokens.get(i - 1).equals(&quot;(&quot;) &amp;&amp; tempTokens.get(i).equals(&quot;-&quot;)) { tokens.remove(tokens.size() - 1); tokens.add(&quot;-1&quot;); tokens.add(&quot;*&quot;); } if (isNumber(tempTokens.get(i)) &amp;&amp; tempTokens.get(i + 1).equals(&quot;(&quot;)) { tokens.add(&quot;*&quot;); } if (tempTokens.get(i).equals(&quot;)&quot;) &amp;&amp; isNumber(tempTokens.get(i + 1))) { tokens.add(&quot;*&quot;); } if (i &gt; 0 &amp;&amp; tempTokens.get(i - 1).equals(&quot;^&quot;) &amp;&amp; tempTokens.get(i).equals(&quot;-&quot;)) { tokens.remove(i); tokens.add(&quot;^&quot;); tokens.add(&quot;-1&quot;); } } return tokens; } // shunting yard algorithm to convert array to rpn public ArrayList&lt;String&gt; shuntingYardAlg() { Stack&lt;String&gt; operatorStack = new Stack&lt;&gt;(); for (String token : tokens) { if (isNumber(token)) { rpnOutput.add(token); } else if (isFunction(token)) { operatorStack.push(token); } else if (isOperator(token)) { while (!operatorStack.isEmpty()) { String o1 = token; String o2 = operatorStack.peek(); int o1P = getPrecedence(o1); int o2P = getPrecedence(o2); if ((isOperator(o2) &amp;&amp; (o2P &gt; o1P || (o1P == o2P &amp;&amp; getAssociativity(o1) == &quot;left&quot;)))) { String s = operatorStack.pop(); rpnOutput.add(s); } else { break; } } operatorStack.push(token); } else if (token.equals(&quot;(&quot;)) { operatorStack.push(token); } else if (token.equals(&quot;)&quot;)) { while (!operatorStack.isEmpty() &amp;&amp; !operatorStack.peek().equals(&quot;(&quot;)) { String s = operatorStack.pop(); rpnOutput.add(s); } operatorStack.pop(); if (isFunction(operatorStack.peek())) { String s = operatorStack.pop(); rpnOutput.add(s); } } } while (!operatorStack.isEmpty()) { String s = operatorStack.pop(); rpnOutput.add(s); } return rpnOutput; } // evaluate rpn using stack public double rpnEvaluate() { Stack&lt;String&gt; resultStack = new Stack&lt;&gt;(); for (String e : rpnOutput) { if (isNumber(e)) { resultStack.push(e); } else if (isOperator(e)) { double x2 = Double.valueOf(resultStack.pop()); double x1 = Double.valueOf(resultStack.pop()); double r = calculate(e, x1, x2); resultStack.push(String.valueOf(r)); } else if (isFunction(e)) { double x = Double.valueOf(resultStack.pop()); double r = funcCalculate(e, x); resultStack.push(String.valueOf(r)); } } return Double.valueOf(resultStack.pop()); } } .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/week%205/2022/09/25/html-javascript-fastpages-and-springboot-update.html",
            "relUrl": "/pbl/week%205/2022/09/25/html-javascript-fastpages-and-springboot-update.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Javascript and HTML Hacks",
            "content": "Table for Competitors . Basing my code off the JS notebook code, I made a table based providing information that needs to be kept track of for each competitor. It keeps track of their name, grade, events, and role in Science Olympiad. More information can be added for other data as well. . //logging function function logIt(output) { console.log(output); } // define a function to hold data for a Person function Member(name, grade, events) { this.name = name; this.grade = grade; this.events = events; this.role = &quot;&quot;; } // define a setter for role in Person data Member.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Member.prototype.toJSON = function() { const obj = {name: this.name, grade: this.grade, events: this.events, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var vicePresident = new Member(&quot;Rohang Gaikwad&quot;, &quot;11th&quot;, [&quot;Dynamic planet&quot;, &quot;Astronomy&quot;, &quot;Rocks and Minerals&quot;]); // object type is easy to work with in JavaScript logItType(vicePresident); // before role logItType(vicePresident.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher vicePresident.setRole(&quot;Vice President&quot;); // set the role logItType(vicePresident); logItType(vicePresident.toJSON()); . object ; Member { name: &#39;Rohang Gaikwad&#39;, grade: &#39;11th&#39;, events: [ &#39;Dynamic planet&#39;, &#39;Astronomy&#39;, &#39;Rocks and Minerals&#39; ], role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Rohang Gaikwad&#34;,&#34;grade&#34;:&#34;11th&#34;,&#34;events&#34;:[&#34;Dynamic planet&#34;,&#34;Astronomy&#34;,&#34;Rocks and Minerals&#34;],&#34;role&#34;:&#34;&#34;} object ; Member { name: &#39;Rohang Gaikwad&#39;, grade: &#39;11th&#39;, events: [ &#39;Dynamic planet&#39;, &#39;Astronomy&#39;, &#39;Rocks and Minerals&#39; ], role: &#39;Vice President&#39; } string ; {&#34;name&#34;:&#34;Rohang Gaikwad&#34;,&#34;grade&#34;:&#34;11th&#34;,&#34;events&#34;:[&#34;Dynamic planet&#34;,&#34;Astronomy&#34;,&#34;Rocks and Minerals&#34;],&#34;role&#34;:&#34;Vice President&#34;} . // define a student Array of Person(s) var competitors = [ new Member(&quot;John&quot;, &quot;9th&quot;, [&quot;Fermi questions&quot;, &quot;Trajectory&quot;]), new Member(&quot;Jack&quot;, &quot;10th&quot;, [&quot;Anatomy&quot;, &quot;Cell Biology&quot;]), new Member(&quot;Jill&quot;, &quot;12th&quot;, [&quot;Astronomy&quot;, &quot;Write It Do It&quot;]), new Member(&quot;Bob&quot;, &quot;10th&quot;, [&quot;Green Generation&quot;, &quot;Environmental Chemistry&quot;]), new Member(&quot;Becca&quot;, &quot;11th&quot;, [&quot;Flight&quot;, &quot;Scrambler&quot;]) ]; // define a classroom and build Classroom objects and json function SciOly(vicePresident, competitors){ // 1 teacher, many student // start Classroom with Teacher vicePresident.setRole(&quot;Vice President&quot;); this.vicePresident = vicePresident; this.scioly = [vicePresident]; // add each Student to Classroom this.competitors = competitors; this.competitors.forEach(competitors =&gt; { competitors.setRole(&quot;Competitor&quot;); this.scioly.push(competitors); }); // build json/string format of Classroom this.json = []; this.scioly.forEach(member =&gt; this.json.push(member.toJSON())); } // make a CompSci classroom from formerly defined teacher and students dnSciOly = new SciOly(vicePresident, competitors); // output of Objects and JSON in CompSci classroom logItType(dnSciOly.scioly); // constructed classroom object logItType(dnSciOly.scioly[0].name); // abstract 1st objects name logItType(dnSciOly.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(dnSciOly.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Member { name: &#39;Rohang Gaikwad&#39;, grade: &#39;11th&#39;, events: [ &#39;Dynamic planet&#39;, &#39;Astronomy&#39;, &#39;Rocks and Minerals&#39; ], role: &#39;Vice President&#39; }, Member { name: &#39;John&#39;, grade: &#39;9th&#39;, events: [ &#39;Fermi questions&#39;, &#39;Trajectory&#39; ], role: &#39;Competitor&#39; }, Member { name: &#39;Jack&#39;, grade: &#39;10th&#39;, events: [ &#39;Anatomy&#39;, &#39;Cell Biology&#39; ], role: &#39;Competitor&#39; }, Member { name: &#39;Jill&#39;, grade: &#39;12th&#39;, events: [ &#39;Astronomy&#39;, &#39;Write It Do It&#39; ], role: &#39;Competitor&#39; }, Member { name: &#39;Bob&#39;, grade: &#39;10th&#39;, events: [ &#39;Green Generation&#39;, &#39;Environmental Chemistry&#39; ], role: &#39;Competitor&#39; }, Member { name: &#39;Becca&#39;, grade: &#39;11th&#39;, events: [ &#39;Flight&#39;, &#39;Scrambler&#39; ], role: &#39;Competitor&#39; } ] string ; Rohang Gaikwad string ; {&#34;name&#34;:&#34;Rohang Gaikwad&#34;,&#34;grade&#34;:&#34;11th&#34;,&#34;events&#34;:[&#34;Dynamic planet&#34;,&#34;Astronomy&#34;,&#34;Rocks and Minerals&#34;],&#34;role&#34;:&#34;Vice President&#34;} object ; { name: &#39;Rohang Gaikwad&#39;, grade: &#39;11th&#39;, events: [ &#39;Dynamic planet&#39;, &#39;Astronomy&#39;, &#39;Rocks and Minerals&#39; ], role: &#39;Vice President&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom SciOly.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Events&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in dnSciOly.scioly) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + dnSciOly.scioly[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + dnSciOly.scioly[row].grade + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + dnSciOly.scioly[row].events.join(&quot;, &quot;) + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + dnSciOly.scioly[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table id = &#39;result&#39;&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(dnSciOly._toHtml()); . NameGradeEventsRole . Rohang Gaikwad | 11th | Dynamic planet, Astronomy, Rocks and Minerals | Vice President | John | 9th | Fermi questions, Trajectory | Competitor | Jack | 10th | Anatomy, Cell Biology | Competitor | Jill | 12th | Astronomy, Write It Do It | Competitor | Bob | 10th | Green Generation, Environmental Chemistry | Competitor | Becca | 11th | Flight, Scrambler | Competitor | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/javascript/week%205/2022/09/23/html-javascript.html",
            "relUrl": "/pbl/javascript/week%205/2022/09/23/html-javascript.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Fibonacci Extends and Data Modeling",
            "content": "Fibonacci Sequence . Object Oriented Programming (Inheritance and Polymorphism) . Two of the most important pillars of OOP are Inheritance and Polymorphism. . Inheritance allows for the passing of constructors and data variables from one class to another creating a hierarchical structure. This is especially useful for code to be reused for certain classes like methods while also allowing for the sub classes to implement their own methods either overwriting them or creating entirely new ones. This can be implemented through extends key word which indicates inheritance and can either be done through an abstract class (a class with abstract methods that have undefined logic that must be defined in child classes) or normal classes. . Polymorphism allows for a single action to be performed in multiple ways meaning that the name space for functions is easier to manage as functions that do a single action will do the same thing as another function but can be implemented in a different way. Typically this comes in the form of overwriting a super class&#39;s methods with a class with the same signature but a different implementation, or establishing the logic of an abstract method from an abstract class. . Class Running Fibonacci in Multiple Ways . Here, we&#39;ll explore the different ways of implementing the Fibonacci sequence while using inheritance and polymorphism to our advantage to avoid clutter and create cleaner more effective code. Here, I&#39;ll start with Mr. Mort&#39;s code before working my way down and creating an abstract class and its respective sub classes. . Abstract Class . Abstract key word when creating class. Cannot make an instance of this class and can only extend using a subclass . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* * Zero parameter constructor uses Telescoping technique to allow setting of the * required value nth * * @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* * Construct the nth fibonacci number * * @param: nth number, the value is constrained to 92 because of overflow in a * long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); // initialize fibonacci and time mvc this.init(); } /* * This Method should be &quot;abstract&quot; * Leave method as protected, as it is only authorized to extender of the class * Make new class that extends and defines init() * Inside references within this class would change from this to super * Repeat process using for, while, recursion */ protected abstract void init(); /* * Number is added to fibonacci sequence, current state of &quot;list&quot; is added to * hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* * Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* * Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* * Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i = 0; i &lt; this.size; i++) { System.out.println(&quot;fibonacci Sequence &quot; + (i + 1) + &quot; = &quot; + this.getNthSeq(i)); } } } . Fibonacci Using Stream Extended Class . Does Mr. Mort&#39;s code for streams in a subclass of fibo. It&#39;s only purpose is processing the data before putting it into the setData method which it inherited. . //Original Code Fibo (Stream) import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; public class FiboStream extends Fibo { public FiboStream() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboStream(int nth) { super(nth); } @Override protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[] { 0, 1 }, f -&gt; new long[] { f[1], f[0] + f[1] }) .limit(this.size) .forEach(f -&gt; this.setData(f[0])); } /* * Tester class method. If this becomes abstract you will not be able to test it * directly ... * Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboStream fib = new FiboStream(); fib.print(); } } FiboStream.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibo Using For Loop . public class FiboFor extends Fibo { public FiboFor() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboFor(int nth) { super(nth); } @Override protected void init() { this.name = &quot;For&quot;; long f[] = new long[] { 0, 1 }; for (int i = 0; i &lt; size; i++) { long n = f[0]; this.setData(f[0]); f[0] = f[1]; f[1] = n + f[1]; } } static public void main(String[] args) { FiboFor fib = new FiboFor(); fib.print(); } } FiboFor.main(null); . Init method = For fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibo Using While Loop . import java.util.ArrayList; import java.util.HashMap; public class FiboWhile extends Fibo { public FiboWhile() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboWhile(int nth) { super(nth); } @Override protected void init() { this.name = &quot;While&quot;; long f[] = new long[] { 0, 1 }; int i = 0; while (i &lt; size) { long n = f[0]; this.setData(f[0]); f[0] = f[1]; f[1] = n + f[1]; i++; } } /* * Tester class method. If this becomes abstract you will not be able to test it * directly ... * Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboWhile fib = new FiboWhile(); fib.print(); } } FiboWhile.main(null); . Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibo Using Recursion . import java.util.ArrayList; import java.util.HashMap; public class FiboRecursion extends Fibo { public FiboRecursion() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboRecursion(int nth) { super(nth); } @Override protected void init() { this.name = &quot;Recursion&quot;; for (int i = 0; i &lt; size; i++) { setData(fiboRecursion(i)); } } private long fiboRecursion(long n) { if (n &lt;= 1) { return n; } return (fiboRecursion(n - 1) + fiboRecursion(n - 2)); } /* * Tester class method. If this becomes abstract you will not be able to test it * directly ... * Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboRecursion fib = new FiboRecursion(); fib.print(); } } FiboRecursion.main(null); . Init method = Recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%205/java/2022/09/22/fibo-extends-data-modeling.html",
            "relUrl": "/college%20board/week%205/java/2022/09/22/fibo-extends-data-modeling.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Week 4 Ticket",
            "content": "Score: 2.7+/3.0 . Requirements . FRQ #1 Control Structures - 2019 | 2D Array Iteration MiniLab | . Extra . Agile Reflection | Front End Updates - Fastpages &amp; Springboot | Functions in Calculator | .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%204/2022/09/19/week4-ticket.html",
            "relUrl": "/markdown/fastpages/week%204/2022/09/19/week4-ticket.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Iteration Mini Lab - The Aquarium",
            "content": "Iteration Using 2D Arrays vs Iteration Using Objects . Iteration is especially useful when going through long lists of items. Two instances of this could be iterating through a 2D Array which in this case is an array of an array of strings which allows me to create rows and columns for each of my ASCII art pieces, or a 1D array of Objects who&#39;s properties include a 1D array of strings that make up my ASCII art piece. . Let&#39;s see both of them in action: . Iteration Using 2D Arrays . Unlike the example in Mr. Mort&#39;s blog, I&#39;ll be using an aquarium and slightly edited version of the monkeys jumping on the bed rhyme and be putting them horizontally as opposed to vertically. . public class Aquarium{ //Instantiate a 2D Array (made of columns and rows) like a grid String [][] aquarium; //Constructor (&quot;Builds&quot; (Constructs) aquarium in this example) public Aquarium(){ aquarium = new String[][]{ { &quot; / &quot;, &quot; _/./ &quot;, &quot; ,-&#39; `-:..-&#39;/ &quot;, &quot;: o ) _ ( &quot;, &quot; `-....,--; `-. &quot;, &quot; `&#39; &quot;, &quot; &quot;, &quot; &quot; }, { &quot; /`·.¸ &quot;, &quot; /¸...¸`:· &quot;, &quot; ¸.·´ ¸ `·.¸.·´) &quot;, &quot;: © ):´; ¸ { &quot;, &quot; `·.¸ `· ¸.·´ `·¸)&quot;, &quot; ` ´´ ¸.·´ &quot;, &quot; &quot;, &quot; &quot; }, { &quot; | o &quot;, &quot; | o &quot;, &quot;| / . o &quot;, &quot;| | ( &quot;, &quot;|/ / &quot;, &quot; | / &quot;, &quot; |/ &quot;, &quot; &quot; }, { &quot; ___ &quot;, &quot; _ / __)_ ° &quot;, &quot; _ .&#39;_&#39;-&#39; /-&#39;-. o ° &quot;, &quot; &#39;-._.&#39;-&#39; / _ -(O)_: O &quot;, &quot; (__ /_ &#39;._) _ o &quot;, &quot; /.&#39; (_.&#39;-&#39;&#39;./&#39; &quot;, &quot; &#39; &quot;, &quot; &quot; }, { &quot; ____ &quot;, &quot; / &quot;, &quot; /-./ &quot;, &quot;/ o /| &quot;, &quot;&gt; | &quot;, &quot; &lt;) / | &quot;, &quot; -&#39; &quot;, &quot; ____/ &quot; } }; } public void print(){ System.out.println(); System.out.println(&quot;The Sea Aquarium&quot;); int aquariumCount = aquarium.length; for (int i = aquariumCount; i &gt; 0; i--){ System.out.println(i + &quot; Little fishies swimming in the sea...&quot;); for (int col = 0; col &lt; aquarium[0].length; col++){ for (int row = 0; row &lt; i; row++){ System.out.print(aquarium[row][col] + &quot; t&quot;); } System.out.println(); } System.out.println(&quot;A shark gobbled up one in a spree&quot;); System.out.println(&quot;The employee called the manager and the manager said, &quot;); System.out.println(&quot;&#39;No more sharks swimming in the sea!&#39;&quot;); System.out.println(&quot; n-- n&quot;); aquariumCount -= 1; } System.out.println(&quot;No more fishies living in the sea :( n&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new Aquarium().print(); } } Aquarium.main(null); . The Sea Aquarium 5 Little fishies swimming in the sea... / /`·.¸ | o ___ ____ _/./ /¸...¸`:· | o _ / __)_ ° / ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o _ .&#39;_&#39;-&#39; /-&#39;-. o ° /-./ : o ) _ ( : © ):´; ¸ { | | ( &#39;-._.&#39;-&#39; / _ -(O)_: O / o /| `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / (__ /_ &#39;._) _ o &gt; | `&#39; ` ´´ ¸.·´ | / /.&#39; (_.&#39;-&#39;&#39;./&#39; &lt;) / | |/ &#39; -&#39; ____/ A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 4 Little fishies swimming in the sea... / /`·.¸ | o ___ _/./ /¸...¸`:· | o _ / __)_ ° ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o _ .&#39;_&#39;-&#39; /-&#39;-. o ° : o ) _ ( : © ):´; ¸ { | | ( &#39;-._.&#39;-&#39; / _ -(O)_: O `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / (__ /_ &#39;._) _ o `&#39; ` ´´ ¸.·´ | / /.&#39; (_.&#39;-&#39;&#39;./&#39; |/ &#39; A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 3 Little fishies swimming in the sea... / /`·.¸ | o _/./ /¸...¸`:· | o ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o : o ) _ ( : © ):´; ¸ { | | ( `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / `&#39; ` ´´ ¸.·´ | / |/ A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 2 Little fishies swimming in the sea... / /`·.¸ _/./ /¸...¸`:· ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) : o ) _ ( : © ):´; ¸ { `-....,--; `-. `·.¸ `· ¸.·´ `·¸) `&#39; ` ´´ ¸.·´ A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 1 Little fishies swimming in the sea... / _/./ ,-&#39; `-:..-&#39;/ : o ) _ ( `-....,--; `-. `&#39; A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- No more fishies living in the sea :( -- THE END . Iteration Using Objects . Now let&#39;s see this example but in the form of objects! Because the static key word, I can create a class for just the fish alone which creates fish objects and also perform methods. In this sense, the class has universal methods which can be called to do something to the objects it (the class) created. It&#39;s pretty crazy cool. . By using OOP, the fishes are far easier to replicate and I can even give them other properties such as names, age, type etc. So, unlike iteration using purely 2D arrays, each fish I make can have unique properties. Both of them however are relatively easy to expand the list that the print function iterates through. However, OOP makes it far easier to manipulate the data of the fishes and the list that is iterated through. . import java.util.ArrayList; public class AquariumFish{ //Instantiates a static array list of fish objects (belongs to class) static ArrayList&lt;AquariumFish&gt; fishesList = new ArrayList&lt;AquariumFish&gt;(); // Stores individual fishes (the strings that make up the fish) for each object String[] fish; // Name of each fish String name; //Constructor which takes the string array of fish and the name of each fish as arguments public AquariumFish(String[] fish, String name) { this.fish = fish; //body this.name = name; //name fishesList.add(this); } public static void print(){ System.out.println(); System.out.println(&quot;The Sea Aquarium&quot;); int aquariumCount = fishesList.size(); for (int i = aquariumCount; i &gt; 0; i--){ System.out.println(i + &quot; Little fishies swimming in the sea...&quot;); for (int col = 0; col &lt; fishesList.get(0).fish.length; col++){ for (int row = 0; row &lt; i; row++){ System.out.print(fishesList.get(row).fish[col] + &quot; t&quot;); } System.out.println(); } System.out.println(&quot;A shark gobbled up &quot; + fishesList.get(i-1).name + &quot; in a spree&quot;); System.out.println(&quot;The employee called the manager and the manager said, &quot;); System.out.println(&quot;&#39;No more sharks swimming in the sea!&#39;&quot;); System.out.println(&quot; n-- n&quot;); aquariumCount -= 1; } System.out.println(&quot;No more fishies living in the sea :( n&quot;); System.out.print(&quot;Poor &quot;); for (int i = AquariumFish.fishesList.size(); i &gt; 0; i--){ System.out.print(AquariumFish.fishesList.get(i-1).name + &quot; &quot;); } System.out.println(&quot;did not survive.&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { AquariumFish fish0 = new AquariumFish(new String[]{ &quot; / &quot;, // Argument for Fish Body &quot; _/./ &quot;, &quot; ,-&#39; `-:..-&#39;/ &quot;, &quot;: o ) _ ( &quot;, &quot; `-....,--; `-. &quot;, &quot; `&#39; &quot;, &quot; &quot;, &quot; &quot; }, &quot;Ing&quot;); // Argumentfor Fish Name AquariumFish fish1 = new AquariumFish(new String[]{ &quot; /`·.¸ &quot;, &quot; /¸...¸`:· &quot;, &quot; ¸.·´ ¸ `·.¸.·´) &quot;, &quot;: © ):´; ¸ { &quot;, &quot; `·.¸ `· ¸.·´ `·¸)&quot;, &quot; ` ´´ ¸.·´ &quot;, &quot; &quot;, &quot; &quot; }, &quot;Groov&quot;); AquariumFish fish2 = new AquariumFish(new String[]{ &quot; | o &quot;, &quot; | o &quot;, &quot;| / . o &quot;, &quot;| | ( &quot;, &quot;|/ / &quot;, &quot; | / &quot;, &quot; |/ &quot;, &quot; &quot; }, &quot;In&quot;); AquariumFish fish3 = new AquariumFish(new String[]{ &quot; ___ &quot;, &quot; _ / __)_ ° &quot;, &quot; _ .&#39;_&#39;-&#39; /-&#39;-. o ° &quot;, &quot; &#39;-._.&#39;-&#39; / _ -(O)_: O &quot;, &quot; (__ /_ &#39;._) _ o &quot;, &quot; /.&#39; (_.&#39;-&#39;&#39;./&#39; &quot;, &quot; &#39; &quot;, &quot; &quot; }, &quot;Jam&quot;); AquariumFish fish4 = new AquariumFish(new String[]{ &quot; ____ &quot;, &quot; / &quot;, &quot; /-./ &quot;, &quot;/ o /| &quot;, &quot;&gt; | &quot;, &quot; &lt;) / | &quot;, &quot; -&#39; &quot;, &quot; ____/ &quot; }, &quot;Ben&quot;); AquariumFish.print(); } } AquariumFish.main(null); . The Sea Aquarium 5 Little fishies swimming in the sea... / /`·.¸ | o ___ ____ _/./ /¸...¸`:· | o _ / __)_ ° / ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o _ .&#39;_&#39;-&#39; /-&#39;-. o ° /-./ : o ) _ ( : © ):´; ¸ { | | ( &#39;-._.&#39;-&#39; / _ -(O)_: O / o /| `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / (__ /_ &#39;._) _ o &gt; | `&#39; ` ´´ ¸.·´ | / /.&#39; (_.&#39;-&#39;&#39;./&#39; &lt;) / | |/ &#39; -&#39; ____/ A shark gobbled up Ben in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 4 Little fishies swimming in the sea... / /`·.¸ | o ___ _/./ /¸...¸`:· | o _ / __)_ ° ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o _ .&#39;_&#39;-&#39; /-&#39;-. o ° : o ) _ ( : © ):´; ¸ { | | ( &#39;-._.&#39;-&#39; / _ -(O)_: O `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / (__ /_ &#39;._) _ o `&#39; ` ´´ ¸.·´ | / /.&#39; (_.&#39;-&#39;&#39;./&#39; |/ &#39; A shark gobbled up Jam in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 3 Little fishies swimming in the sea... / /`·.¸ | o _/./ /¸...¸`:· | o ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o : o ) _ ( : © ):´; ¸ { | | ( `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / `&#39; ` ´´ ¸.·´ | / |/ A shark gobbled up In in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 2 Little fishies swimming in the sea... / /`·.¸ _/./ /¸...¸`:· ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) : o ) _ ( : © ):´; ¸ { `-....,--; `-. `·.¸ `· ¸.·´ `·¸) `&#39; ` ´´ ¸.·´ A shark gobbled up Groov in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 1 Little fishies swimming in the sea... / _/./ ,-&#39; `-:..-&#39;/ : o ) _ ( `-....,--; `-. `&#39; A shark gobbled up Ing in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- No more fishies living in the sea :( Poor Ben Jam In Groov Ing did not survive. -- THE END .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/college%20board/oop/week%204/2022/09/15/iteration-mini-lab.html",
            "relUrl": "/pbl/college%20board/oop/week%204/2022/09/15/iteration-mini-lab.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Agile Reflection",
            "content": "Agile Summary . 12 Points of Agile . Agile is a type of software development philosophy widely used and considered one of the most effective philosophies for development. There are 12 Principles which define software: . Satisfy customers need ASAP(early) w/ continuous delivery of software to customers [customers #1] | Changing requirements, even late into development | Deliver software frequently | All parties of a project must be involved throughout | Build around motivated individuals and create environment &amp; support for them to get the job done | Team face-to-face conversations is the most effective and efficient form of communication | Working software =&gt; progress | Sustainable development, constant pace of all parties [indefinitely] | Attention to design and &quot;technical excellence&quot; | Simplicity is key | An effective self-organized team is the produces the best architectures, requirements, and designs | Regular reflection on effectiveness and ways to fine tune and improve | Sprints . The typical software cycle (Sprint) [and by no means a strict one] consists of Meeting, Planning, Designing, Developing, Testing, Deploying, Evaluating, Launching, and then repeating. . Class Project Notes . During our project, some key things need to be considered: . Daily Scrums to understand state of the project and necessary adjustments/plans Assingments for integration and deployment | . | Roles: Scrum Master: Ensures Agile, tacks issues and maintains scrum boards, find ways to improve and tune workflow | DevOps: Role is to combine and ensure the implementation of philosophies, tools, and practices to increase high velocity delivery of application and service; version control, integration, managing dependencies, POM file management, AWS deployment | Frontend Developers: The physical front of the service/application the user sees and interacts with | Backend Developers: Builds mechanisms for data processing and perform actions (data storage, security, other non-visible server functions) | . | Use class time (3-4 hours a week) | During Sprints (2 weeks of 5-6 hours) total per person (20-24 hours) total of work | Sprints should be focused efforts to produce a working program for the client Daily Meetings, Scrum Boards, Planning, Agile, etc. | . | . 7 Important Transferable Skills . Creativity (Problem Solving, Conceptualization, Foresight, Connections, Synthesizing Ideas &amp; Data) | Critical Thinking (Problem Solving, Ability to Question/Ponder, Problems Combatted Before Even Found) | Communication (Verbal, Writing, Listening, Technological Comms, Communicating w/ All Teammates/Group and Audience) | Collaboration - Leadership (Responsibility Delegation, Time Management, Decision Making, Conflict, Group, Multi Tasking, Teaching/Mentoring) | Collaboration - Teamwork (Accepting Responsibility, Making/Implementing Decisions, Time Management, Meeting for Short &amp; Long Goals, Organizations, Deadlines) | Research (Analyzing Info, Brainstorming, Delineating Needs/Reqs, Gathering &amp; Extracting Data, Forecasting Problems, Setting Goals, Solving Problems) | Technical (Easy to Work w/, Quick to Learn, Appreciative to Learn, Failing and Always Willing to Try New Things, New Doors Esp in Cases of Oversight) | . Reflection . Given the practical use Agile has in software development, the philosophy I personally think can apply to any where whether it be in another field of work or even my own life. For any successful person, I suspect that, especially for the 7 important transferable skills, they practice Agile in some way or form throughout their lives. I think getting a grasp for this kind of experience will go a long way to improving myself as a programmer and person. .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/human/week%204/2022/09/15/agile-reflection.html",
            "relUrl": "/pbl/human/week%204/2022/09/15/agile-reflection.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "FRQ Method and Control Structures!!",
            "content": "2019 FRQ Question 1 . This FRQ type is labeled as a Method and Control Structure which covers (as implied) methods (functions) and control structures (if else, loops, etc.). This question deals with the creation of a calendar in code. It&#39;s interesting, at least to me, because it deals with a pretty standard yet extremely useful everyday tool, a calendar and after completing it, I found calendars to be surprisingly straight forward in terms of backend calculations (more on that in my reflection). . Instructions are labeled below while an explanation of my approach and code is down below. Peer grades are below after both parts to the question. At the very end is a reflection for the FRQ. See the TOC to jump to each section. . Question 1 . Instructions (It hurts my eyes and brain to read :&#39;) . The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. public class APCalendar { / Returns true if year is a leap year and false otherwise. / private static boolean isLeapYear(int year) { / implementation not shown */ } / Returns the number of leap years between year1 and year2, inclusive. | Precondition:0 &lt;= year1 &lt;= year2&gt; / public static int numberOfLeapYears(int year1, int year2) { / to be implemented in part (a) */ } /** Returns the value representing the day of the week for the first day of year, | where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. / private static int firstDayOfYear(int year) { / implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. | Returns 1 for January 1 (month = 1, day = 1) of any year. | Precondition:The date represented by month, day, year is a valid date.&gt; / private static int dayOfYear(int month, int day, int year) { / implementation not shown */ } /** Returns the value representing the day of the week for the given date | (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., | and 6 denotes Saturday. | Precondition:The date represented by month, day, year is a valid date.&gt; / public static int dayOfWeek(int month, int day, int year) { / to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } | . Part A . (a) Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. • isLeapYear(year) returns true if year is a leap year and false otherwise. Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. /** Returns the number of leap years between year1 and year2, inclusive. . Precondition:0 &lt;= year1 &lt;= year2&gt; */ public static int numberOfLeapYears(int year1, int year2) | . Approach to Part A . Note to Self: Preconditions means that the following condition is assumed to be met when inputs are implemented. Therefore, it is redundant and unnecessary to specify an if statement to check the Preconditions . They provide the function isLeapYear which significantly eases how much I need to do b/c finding if it is a leap year or not would hurt my brain to code and check. Therefore, the only concern would be the function which they ask for which outputs the number of leap years on a range of years from year1 to year2. . First we create our method signature (a static method as asked) and set its return type as an integer (since it&#39;ll return the # of years that are actually leap years) w/ the arguments year 1 and year 2 (the range of years). Since we are returning the # of years that are leap years, we can instantiate a int variable, leapYearCounter, to 0. . Now that we&#39;re done with creating the base of the method, we can start w/ the meat of the method. Since we can check if each year is a leap year with isLeapYear(), we simply need to iterate through each year in the range (inclusive) and pass them through isLeapYear(). If the isLeapYear() returns true, we add 1 to our leapYearCounter. The result should be a the number of leap years being recorded in leapYearCounter and thus we can return that value as the output. . public static int numberOfLeapYears(int year1, int year2){ int leapYearCounter = 0; for(int year = year1; year &lt;= year2; year++){ if(isLeapYear(year)){ leapYearCounter++; } } return leapYearCounter; } . Part B . (b) Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. . For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. In order to calculate this value, two helper methods are provided for you. . • firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. . • dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. . Class information for this question . public class APCalendar private static boolean isLeapYear(int year) public static int numberOfLeapYears(int year1, int year2) private static int firstDayOfYear(int year) private static int dayOfYear(int month, int day, int year) public static int dayOfWeek(int month, int day, int year) . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . /** Returns the value representing the day of the week for the given date . (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., | and 6 denotes Saturday. | Precondition:The date represented by month, day, year is a valid date.&gt; */ public static int dayOfWeek(int month, int day, int year) | . Approach to Part B . Despite how ridiculously long Part B&#39;s instructions are, the solution that they ask for is simple with one line of code. The necessary information are the two functions they provide, firstDayOfYear(year) and dayOfYear(month, day, year), which finds the day of the week that a given year starts on in the form of an integer and the number of days that have passed since the beginning of a year given the month, day, and year, respectively. . Since we know that, we can instantiate a static method (as prompted for) that has a return type of int in order to represent the day of the week in integer form. We also pass in the arguments month, day, and year as necessary for the method dayOfYear. . Now, all that needs to be done is returning the day of the month. We can think of every complete week (7 days) of a given year as being negligible for this b/c it&#39;s a full week from Sunday to Saturday which we don&#39;t care about. Also, since we are notating days of the week in days from a range of 0-6, we can use modulo of 7 to determine the date of the year. In addition, the day of the week that the year starts on needs to be accounted. Therefore if we find the total number of days that have passed since the beginning of the year (dayOfYear(month, day, year) - 1) and add on the first day of the year, we&#39;ll have the total days from the last sunday before or on the first day of the year to the current day. Then, we can take modulo 7 to ignore each full 7 day week and produce an output which represents the day of the week. . public static int dayOfWeek(int month, int day, int year){ return (dayOfYear(month, day, year) - 1 + firstDayOfYear(year))%7 } . Peer Grade . Reflection . Overall, this FRQ was not too difficult. It followed a pretty straight forward problem which I needed to solve the solution of. The easiest part was probably identifying which functions, variables, and return type I needed to use within the context of the problem. The hardest part was probably figuring out more minute logic within the control structures such as the bounds of the loop in the context of the problem or the proper expression to correctly produce the right day of the week. . Overall, practicing FRQs, as I likely will be throughout the year, on a completely new question format to me. The weirdest part will be writing out the code physically rather than having an IDE. I don&#39;t realize it totally but IDE&#39;s are so vital. They help me with so many random syntax errors I might make and create a clean way of formatting (smth I suck at ngl). They also give me insight into how College Board formats these types of questions which will be useful for the AP exam. . The best part I think I can take away from it, apart from being practice for an AP exam, is that it gives me the chance to apply problem solving skills and (arguable) creative skills in creating algorithms using Java syntax in the context of plausible problems. . For Methods and Control Structures in particular, the only thing I&#39;d need to pay attention to and perhaps work on is the logic in the context of the problem which I&#39;m likely prone to making mistakes in. Otherwise, I think I&#39;m pretty well set up to complete the FRQs because of my familiarity with the concept of Methods and Control Structures. .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%204/2022/09/14/frq1-method-and-control-structures.html",
            "relUrl": "/college%20board/week%204/2022/09/14/frq1-method-and-control-structures.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Week 3 Ticket",
            "content": "Score: 2.7+ . Requirements . If Else and Booleans | Deployed Springboot Project on AWS Blog on AWS | . | Focus/Habits | . Extras . Updated Calculator (Order of Operations) | .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%203/2022/09/11/week3-ticket.html",
            "relUrl": "/markdown/fastpages/week%203/2022/09/11/week3-ticket.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "If Else Statements and Boolean Logic",
            "content": "Booleans . Beans? Leans? Loo Beans? Boo Leans? It&#39;s a Boolean! Booleans are one of the primitive data types that Java supports and are an integral data type to all of computer science. In fact, it&#39;s the idea of booleans that actually makes up an integral part of computers which we know as 0s and 1s (on or off) which in computer speak is called binary. . Established by 19th century mathematician George Bool, booleans are at its core data for logic simply put in two types: true or false. With this you can create a complex structure of computing code and all other manners of code. . Let&#39;s see how they are when we assign them as variables! . boolean a = true; boolean b = false; System.out.println(&quot;variable a: &quot; + a + &quot; nvariable b: &quot; + b); . variable a: true variable b: false . Boolean Operators . Booleans, interestingly enough, have operators to them just as math does. The most common operators you&#39;ll hear about are the comparison operators: and (&amp;&amp;), or (||), &gt;, &lt;, &gt;=, &lt;=, ==. Another common operator is not (!). . The and operator compares two boolean statements and if both are true, then it will return true, otherwise all other combinations of the boolean statements return false. . The or operator also compares two boolean statements and if one of them is true, it returns true while if both of them is false, it will return false. . The not operator is applied to a boolean statement and switches true to false and false to true. . Let&#39;s see them in action! . // examples of some of the operators boolean a = true &amp;&amp; true; boolean b = false &amp;&amp; true; boolean c = 20 &gt;= 19; boolean d = 42 &lt; 23; boolean e = !b; System.out.println(&quot;variable a: &quot; + a + &quot; nvariable b: &quot; + b + &quot; nvariable c: &quot; + c + &quot; nvariable d: &quot; + d + &quot; nvariable e: &quot; + e); . variable a: true variable b: false variable c: true variable d: false variable e: true . If and Else Statements . If statements are, at their core, statements that check the conditions of true or false. If a condition is true, it will perform an action/line of code, if it is false, it will skip over the action/code block under the if statement. . An Else statements is an action/code block that performs if the condition for the if statement is not true. . An Else If statement is a combination of If and Else statements where if a condition is not true, it will move into the else statement which has another if statement. At its core. it is a nested If Else statement. . Let&#39;s see them in action. . int a = 11; int b = 6; int c = 9; if (a &gt; b){ //since a is greater than c, the else statement is ignored if (a &lt; c){ System.out.println(&quot;c is the largest number&quot;); } else{ //since a is greater than c, the else statement&#39;s code block is called because the if statement is false System.out.println(&quot;a is the largest number&quot;); } } else{ if (b &lt; c){ System.out.println(&quot;c is the largest number&quot;); } else{ System.out.println(&quot;b is the largest number&quot;); } } . a is the largest number . Switch Case Statements . Switch Case Statements help simplify/manage the complexity of if else statements which can in many circumstance become overly long especially when comparing by a case by case basis. . It works by stating a variety of Case statements which all have conditions. The code blocks under each case are then run if the condition to one of the cases is met. Just like if else statements, Switch Case statements will go down each case to see if a conditon is met. If it is met, the case&#39;s block of code will run and ignore the rest of the Switch Case statements. . In the examples below, the first will be a chain of If Else statements while the second example will use switch case to demonstrate how Switch Case statements simplify multiple If Else statements. . int n = 7; if (n == 4){ System.out.println(&quot;4 is considered unlucky in Japan because of its pronounciation&#39;s (shi) similarity to the word for death.&quot;); } else if (n == 7){ System.out.println(&quot;7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths.&quot;); } else if (n == 8){ System.out.println(&quot;8 is considered a lucky number in China and Japan because of its relation to the word for prosperity in their cultures.&quot;); } else if (n == 9){ System.out.println(&quot;9 is considered unlucky in both China and Japan because both associate it with the word for sorrow, grief, and suffering.&quot;); } else if (n == 13){ System.out.println(&quot;13 is considered unlucky in Western society due to its association with the Christian Bible where the 13th to sit at the Last Supper was Judas who is known as the betrayer of Jesus Christ.&quot;); } . 7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths. . int n = 7; String output; switch (n){ //variable passed in case 4: //condition checked if equals output = &quot;4 is considered unlucky in Japan because of its pronounciation&#39;s (shi) similarity to the word for death.&quot;; break; case 7: output = &quot;7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths.&quot;; break; case 8: output = &quot;8 is considered a lucky number in China and Japan because of its relation to the word for prosperity in their cultures.&quot;; break; case 9: output = &quot;9 is considered unlucky in both China and Japan because both associate it with the word for sorrow, grief, and suffering.&quot;; break; case 13: output = &quot;13 is considered unlucky in Western society due to its association with the Christian Bible where the 13th to sit at the Last Supper was Judas who is known as the betrayer of Jesus Christ.&quot;; break; } System.out.println(output); . 7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths. . De Morgan&#39;s Law . De Morgan&#39;s Law states that in a boolean statement, the not operator ! will reverse all the operators in that statement. For instance, true becomes false, false becomes true, and becomes or, or becomes and, &gt; becomes &lt;=, &lt;= becomes &gt;, etc. A tangible example of this is &#39;I will not drink water and eat a table&#39; which means the same thing as &#39;I will either not drink water or eat a table.&#39; . Here&#39;s some examples! . boolean a = true; boolean b = true; . if (!(A &amp;&amp; B)){ System.out.println(&quot;A and B both are false&quot;); } else{ System.out.println(&quot;A and B are true&quot;); } . A and B are true . if (!A || !B){ System.out.println(&quot;A and B both are false&quot;); } else{ System.out.println(&quot;A and B are true&quot;); } . A and B are true . As shown above, both statements are equal given De Morgan&#39;s Law. It&#39;s important because of how they can break inversions as a complement of a complex boolean expression. .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/week%203/2022/09/09/if-and-else-statement.html",
            "relUrl": "/pbl/week%203/2022/09/09/if-and-else-statement.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Focus and Habits",
            "content": "Blog! . Hey, welcome to my focus and habits week 3 blog. There’s a lot of cool insights, goals, and other things here to see. . Yale Video . Laurie Santos’s speach on her new course in Yale Psychology and the Good Life talks about a lot of the mental struggles and stress that students both in college and even in high school, middle schools, and elementary schools face as a result of the pressures of placed upon them by themselves, their parents, their teachers, and even society’s norms and expectations. . Here at Del Norte, almost all of the teacher I know complain in one form or another that student culture is very pushy towards taking APs and high level academic classes. Lot’s of times, just as Santos surveyed, I find that I, and many of my other peers, struggle to actually effectively learn other arguably more important skills and overly burden ourselves. This comes in the form of practical struggles which we’ll face in our adulthood such as independence, communication, and mental coping. In turn, we also over look many of the arguably more happier and fulfilling aspects of our lives. . In my opinion, much of this stress in high school is the result of expectations of going to college. Look at Europe for instance, although it’s cliche to compare American and European institutions, it is undeniable that most European students are relatively far more laxed in getting into university and studying in university. The rigor and academic load is still relatively the same but most of the students find themselves far less pressured than their American counterparts. . To achieve and recognize some of this hapiness, learning and applying the methods to make one happy is essential. Letting go of some excessive or unnecessary expectations can often go a long way towards seeing the fulfilling aspects of our lives. . Among some really important practices she lists are: adequate sleep, time to appreciate and acknowledge gratitude (both self and outside), meditation, exercise, breaks. All of these are practices that can go a long way towards creating a healthier and ultimately more fulfilling life. . There’s definitely a lot more especially her insights regarding her course material and how to live fulfilling lives but I think that can be something I blog another time and watch in my own time to let sink in. . Code Code Code Goals . Applying the mindset that Santos’s speach sort of brings to light, I think as I code, I definitely want to keep in mind that I shouldn’t be coding for the sake of a grade or getting skills to go into a related CS major (as I likely am) but rather I should be coding to develop my interest within the field and seeing its applications as a powerful tool in my life and society. . For one, in CSA, the most important Code Code Code goal I have is being able to use CSA as a way not only to learn AP CSA material for the AP Exam, but also the best practices of coding, how to become a profficient programmer, and developing my creativity as one. This means creating self projects for me and briefly sharing an overview of either what I’m learning or what I’m doing. . Interests/Goals and Plans . In addition to recognizing the learning I gained through the Yale video, I think it would also be helpful to create a list of my interests, goals, and plans to create a clear sense of the things I’d like to accomplish in life. I have a lot of interests and truthfully a lot more than I’m able to commit or get through. But here’s a comprehensive list! . Piano: I’m an avid pianist and love playing songs I listen to Play songs by ear | Practice CM 10 songs | Find more songs | Practice rhythms and scales | . | Traveling: Travel to more countries Paris | Munich | Singapore | Japan | Taiwan | Vietnam | London | Madrid | Barcelona | More! | . | Eat and try more new foods | Travel independently (preferably pay for own trip w/ income) | Travel w/ friends abroad! | Study abroad in university! | . | Cooking: Learn to cook traditional Vietnamese Dishes Pho | Bun Bo Hue | etc. | . | Sandwhiches! (Banh Mi) | Salads | Bentos Learn assortments | Rolls? | . | Bake Cheese cake | Caneles | Chocolate Lava Cake | Flan Cake | Beignet | Chocolate | . | . | Guitar: Learn to play finger style | Learn to play chord progressions | . | Deep Learning AI: Learn Deep Learning Algorithms | Deep Learning Libraries | Applicaitons and Use | . | Quantum Computing: How they work | Grasp understanding of theory | Learn to program them (theoretically) | . | Web Development: Create personal website for myself (fastpages limited) | Learn to create complex HTML/CSS elements | Learn Javascript | . | SciOly: Set up website for SciOly that’s easy to manage? | Learn Fermi Questions Methods | On Hand Knowledge | . | Get Fermi Question Materials | Study for other events | . | Languages: Japanese Grammar | Reading/Listening | . | French | German | . | More: This is by no means a comprehensive list but it does list a lot of the things I’d like to do | .",
            "url": "https://dontran15.github.io/CSAFastPages/human%20prep/week%203/2022/09/09/focus-and-habits.html",
            "relUrl": "/human%20prep/week%203/2022/09/09/focus-and-habits.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "AWS Deployment",
            "content": "",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/week%203/2022/09/09/aws-deployment.html",
            "relUrl": "/pbl/week%203/2022/09/09/aws-deployment.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Week 2 Ticket",
            "content": "Week 2 Assignment and Hacks: Innovation - Using Objects . Score 2.7+/3.0 . Completed code.org | Demonstration of use of objects and classes | Team Project using Spring Boot | Blog Link | Spring Boot Java Project Repo | . Hacks . Code.org . . Using Objects . Using Objects &amp; Code.Org Learning Shows using objects | Shows extends and inheritance | . | . Other . SpringBoot Project Notebook &amp; Basic Calculators Implements GUI Desktop Application | Implements GUI Web Browser Application | Simple Calculators | . | SpringBoot Project Plan and Team | Personal Plan for Fastpages | .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%202/2022/09/05/week2-ticket.html",
            "relUrl": "/markdown/fastpages/week%202/2022/09/05/week2-ticket.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Spring Boot Progress 1",
            "content": "Our Progress . Woooo so far we’ve created only a basic calculator but we’re hoping to expand upon that when we can. So far we have two versions of a basic calculator, each with its own limitations. . Desktop Application Calculator (Krish and Nicky) . . Krish and Nicky worked together to set up a Desktop GUI that implemented a calculator using JFrame and Springboot. At its core, it simply takes two numbers which the user inputs and a function that the user specifies to perform a mathematical operation and output the value. . Some limitations include: a lack of practical usability as a UI, limits to only two numbers being computed at a time, only one operator/function being able to be used at a time. . Some pros include: a clean GUI that is accurate and does not need to interface with Spring’s web application programs, can perform relatively complex mathematical operations due to its ease of accessibility to Java’s math library. . Some improvements: preferably a better GUI that gives the user a better range of options, maybe more operations, performing multiple operations at a time . Web Browser Application (Don and Nathan) . . Don and Nathan worked together to set up a Web Browser Application that works as a very basic calculator that takes a string as an input. It then performs the operations it sees in the string on each of the values. It uses Spring Boot and MVC to interface the html output with the actual logic. . Using MVC, we have the html template that serves as the basis of the page for the calculator with the buttons, the text input, and the output. Next, we have the logic which is in Calculator.java and that essentially takes in a userInput string and parses it and applies the operations. Finally, we have the controller which is in the file CalcController and that passes the userinput from the html form the user submits into the Calculator.java logic which returns a string output. That is put into the model that Spring Boot provides which then returns the form to the browser and displays the output. . Some limitations include: a disregard for order of operations, very specific syntax has to be used most of the time or else it wont output at all or will output what the user outputted, its limited only to the four basic operations, the GUI only has a string user input and an = sign button that functions. . Some pros include: it can perform multiple operations at a time, has a functioning GUI that is clean, runs on a web browser, is easy to visualize . Some improvements include: Creating functioning buttons in its GUI, accounting for order of operations (likely to try to use tree data structure in order to implement this), more operators and functions . Future Work . To make a well made calculator and preferably to expand it as a tool to help with math problems, we’re likely to move towards the web development side of Spring Boot. It’s tools provide a relatively straightforward method to putting our java programs onto a web browser through its boiler plate code and hopefully that should enable us to focus mainly on the functionality of our web. . Through this, we learned how to use JFRame and also understand how Spring Boot uses MVC to build a webpage using mostly HTML and Java files. .",
            "url": "https://dontran15.github.io/CSAFastPages/spring%20boot/2022/09/05/springboot-report-0.html",
            "relUrl": "/spring%20boot/2022/09/05/springboot-report-0.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Spring Boot Project Plan",
            "content": "Our Goal . Our hope is to learn how to use Spring Boot as both a Desktop Application and Web Application tool. We also hope that the project we make will somewhat serve to be productive to us. . As a result, we’ve decided that if we go on with this project we’d make a web application related to studying and practicing for different school subjects. For now, we’ve decided math might be best because of how algorithmic it typically is. The first project we’ll plan on doing is creating a calculator with an interface to get used to using spring. Then we’ll hope to improve our calculator and also work on more comprehensive problem solving and how to help us study for math. . We may upload our previous code related to math and hopefully find ways to interface them with SpringBoot. . Although this is not a comprehensive plan of what we will or could do, we hope this post will serve as a baseline as to what we can do and may be able to use Spring Boot for. The most important thing is creating a project that we can all work on together as teammates while learning the intricacies of backend and to a small degree front end development. . Team Makeup . Of course it’d be great if everyone could learn all the parts but delegating some roles would definitely help ease our work load and mark out clear responsibilities. We’re hoping to divide the work as so: . Don: Spring Boot and MVC | Krish: Calculator Functionality (parsing, functions, etc.) | Nicky: Calculator Functionality (parsing, functions, etc.) | Nathan: HTML/CSS, Calculator Functionality (compatibility with Spring Boot) | .",
            "url": "https://dontran15.github.io/CSAFastPages/spring%20boot/2022/09/05/springboot-plan.html",
            "relUrl": "/spring%20boot/2022/09/05/springboot-plan.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Plan for Personal Fastpages",
            "content": "Future Plan For Fastpages! . I&#39;ll update and give a comprehensive plan relatively soon. .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/week%202/2022/09/05/fastpages-plans.html",
            "relUrl": "/pbl/week%202/2022/09/05/fastpages-plans.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Teddy Bear Factory - Code.org Learning",
            "content": "Object Oriented Programming . Object Oriented Programming (abrreviated as OOP) is a coding paradigm (style in which code is organized) which organizes code into classes and objects. . Java is one of the most popular and well known OOP based languages and is the language I&#39;ll use for my demonstration of my OOP learning. . Factory . I like to think of OOP as factories (commonly it&#39;s likened to blueprints but I like my analogy better &gt;:) . Imagine you are an entrepreneur, fresh out of college (or maybe you dropped out) and you&#39;re ready to show the world your brilliant ideas and products. . Creating a Class (Factory) . Let&#39;s say you buy a factory. Here&#39;s your new factory: . //Creates a class public class Factory{ } . Variables and Constructor (Factory Data) . Pretty empty huh. Let&#39;s try making a frame work to plan out your factory and statistics we&#39;ll need to keep track of as we obtain equipment and come up with what it&#39;s going to produce. . To do this, we&#39;ll initialize variables, create a constructor, and make an empty function meant to be the instructions for what the factory needs to produce. . import java.util.ArrayList; //Import ArrayList class public class Factory{ //Initialize Variables: Variables for our generic Factory String owner; static double factoryProfit; //static variable -&gt; belongs to class (our factories); the profit of our factories //Constructer (more details later) public Factory(String owner){ //When this constructer is called, we will have to fill out some info which will be assigned to our new factory&#39;s (object&#39;s) data this.owner = owner; } public void production(int days){ //Function (return type: void); produces our product } } . Classes Part 2 (Products &amp; Product Data) . Now, we can&#39;t just start your factory if it doesn&#39;t make anything. Let&#39;s say you decide on starting out with toy production. . Let&#39;s create a toy class (our blueprint) to build toys! . //Create Toy class public class Toy{ ArrayList&lt;String&gt; materials = new ArrayList(); double cost; double price; //Toy Constructor public Toy(ArrayList&lt;String&gt; materials, double cost, double price){ this.materials = materials; this.cost = cost; this.price = price; } public void function(){ //Function of the toy } } . Inheritance (Teddy Bears) . Good work! We&#39;re almost there. As a suggestion, Teddy Bears are quite popular! Let&#39;s consider making that your first product. . Below, let&#39;s create a child class that inherits its properties from our toy class! We call super to access the superclass&#39;s constructor. . //TeddyBear is a child class of the parent class Toy (inherits all of the variables and methods of Toy) public class TeddyBear extends Toy { //Unique variable for TeddyBear String color; //TeddyBear constructor public TeddyBear(ArrayList&lt;String&gt; materials, double cost, double price, String color){ super(materials, cost, price); //super() references all the parent classes&#39; constructors this.color = color; } public void function(){ System.out.println(&quot;Woah a teddy bear! It&#39;s &quot; + color + &quot; and gives great hugs!&quot;); } public static TeddyBear createBrownTeddyBear(){ //Static method that instantiates (creates) a TeddyBear object w/ TeddyBear return type //Specifies the materials, price, and cost of a a &#39;Brown&#39; TeddyBear ArrayList&lt;String&gt; materials = new ArrayList&lt;String&gt;(); materials.add(&quot;Cotton&quot;); materials.add(&quot;Mohair&quot;); materials.add(&quot;Ribbon&quot;); materials.add(&quot;Plastic Eyes&quot;); double cost = 5.00; double price = 10.00; //Instantiates an object of itself (almost like a factory) and returns the object TeddyBear teddyBear = new TeddyBear(materials, cost, price, &quot;Brown&quot;); return teddyBear; } } . Instantiation (Creating a Factory!) . Now that we have our product, a framework for our factory, and hopefully a little funding, we can start producing our teddy bears (might be in pretty big debt though &gt;:) . Here&#39;s our teddy bear factory and an instantiation of this factory. Then we will call the production function to start producing teddy bears and make some profit &gt;:) Let&#39;s say our factory makes 5 bears a day. We&#39;ll also make a method to calculate the profit of all the functions we have and instantiate an ArrayList to keep track of how many TeddyBears we have. . public class TeddyBearFactory extends Factory{ //Creates child class for TeddyBearFactory and constructor w/ super() method static ArrayList&lt;TeddyBear&gt; teddyBears = new ArrayList&lt;TeddyBear&gt;(); //List collection of all the TeddyBear objects, static so universal list belonging to class public TeddyBearFactory(String owner){ super(owner); } public void production(int days){ //Production of teddyBears over a certain number of days for(int i = 0; i &lt; days*5; i++){ //For loop that repeatedly calls createBrownTeddyBear() and adds to static list TeddyBear teddyBear = TeddyBear.createBrownTeddyBear(); teddyBears.add(teddyBear); } } public static void calculateProfit(){//Function to calculate universal profit among any given amount of teddy bear factories for (int i = 0; i &lt; teddyBears.size(); i++){ //For loop factoryProfit += (teddyBears.get(i).price - teddyBears.get(i).cost); //Accesses static arraylist belonging to TeddyBearFactory and each object&#39;s properties } } } . Main Method (Production) . Now that we have the building blocks to open our first toy factory, let&#39;s create (instantiate) one and get it running! . public class Main{ public static void main(String[] args){ TeddyBearFactory teddyBearFactory0 = new TeddyBearFactory(&quot;You&quot;); //Instantiates our very first TeddyBearFactory teddyBearFactory0.production(3); //Calls production() method of our new factory with the argument of 3 days passed in TeddyBearFactory.calculateProfit(); //Calculates profit of our new factory after 3 days of production System.out.println(&quot;Here&#39;s how many Brown Teddy Bears we&#39;ve produced: &quot; + TeddyBearFactory.teddyBears.size()); System.out.println(&quot;Here&#39;s our profit over three days: &quot; + TeddyBearFactory.factoryProfit); } } Main.main(null); . Here&#39;s how many Brown Teddy Bears we&#39;ve produced: 15 Here&#39;s our profit over three days: 75.0 . More Production . Let&#39;s open some new factories for some more sweet profit &gt;:) We&#39;ll count our total profit from the previous three days and the next 3 days. . public class Main{ public static void main(String[] args){ TeddyBearFactory teddyBearFactory0 = new TeddyBearFactory(&quot;You&quot;); //instantiates our very first TeddyBearFactory TeddyBearFactory teddyBearFactory1 = new TeddyBearFactory(&quot;You&quot;); //instantiates our a second TeddyBearFactory TeddyBearFactory teddyBearFactory2 = new TeddyBearFactory(&quot;You&quot;); //instantiates a third TeddyBearFactory teddyBearFactory0.production(3); //Calls production() method of our new factory with the argument of 3 days passed in teddyBearFactory1.production(3); //Calls production() method of our new factory with the argument of 3 days passed in teddyBearFactory2.production(3); //Calls production() method of our new factory with the argument of 3 days passed in TeddyBearFactory.calculateProfit(); //Calculates profit of our new factory after 3 days of production System.out.println(&quot;Here&#39;s how many Brown Teddy Bears we&#39;ve produced with all our factories: &quot; + TeddyBearFactory.teddyBears.size()); System.out.println(&quot;Here&#39;s our profit: &quot; + TeddyBearFactory.factoryProfit); } } Main.main(null); . Here&#39;s how many Brown Teddy Bears we&#39;ve produced with all our factories: 60 Here&#39;s our profit: 375.0 . Takeaways . Object Oriented Programming is quite powerful. It allows programmer to create archetypes through the concept of classes which they can then expand upon through inheritance. Additionally, it&#39;s abstraction of programming into objects allow code to be organized and modeled after the real world. . In my example, I used a factory to represent that classes act as a factory (slightly redundant). Every non-static method or variable is a blueprint within them that serve as instructions to produce a certain good (object) with its own functions and properties. Every static method or variable is a function or property of the factory itself which the factory can call upon. . Constructors are the initial instructions that are run in order to instantiate objects. This is the bulk of the factory&#39;s (class&#39;s) blueprint to create goods (objects). Sometimes this factory can also cause an object to run methods in when it&#39;s instantiating the object. For instance, an iPhone goes through quality control before it is packaged and sent as a final product. . Classes can also instantiate themselves so long as the constructor is called. In a factory example, a factory (class) producing electricity (object) can also use the electricity to power a toaster in the factory (method using electricity). This is one of the many examples of how unlike procedural programming which usually follows a set path of code, OOP enables programmers to utilize code from anywhere even outside the main() function. This leads into the topic of abstraction which I&#39;ll talk about sometime in the future. . All in all, OOP is pretty cool! .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/java/week%202/2022/09/03/oop-and-using-objects.html",
            "relUrl": "/college%20board/java/week%202/2022/09/03/oop-and-using-objects.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Week 1 Ticket",
            "content": "Week 1 Assignment and Hacks: Innovation - Primitives . Canvas Requirements . Code.org . Lessons 1-5 Completed for OOP Unit | . Productive Blogging . Primitives Java Notebook . Demonstrates primitives use | . Bash Notebook . Demonstrates bash use and checks for installations and versions | Verifies kernels | Notes on bash and its uses (to be added) | . Fastpages notes to go along with Tech Talks and Fastpages notes to go along with College Board learning . Created PBL and College Board Pages to organize learning PBL sorted by week to see progress and organize tools and material | College Board sorted by unit and content covered | . | . Others . Salary Calculator using primitives | Definite Integral Calculator for Polynomials | Use of Tags/Categories | .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%201/2022/08/29/week1-ticket.html",
            "relUrl": "/markdown/fastpages/week%201/2022/08/29/week1-ticket.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Vectors vs. Scalars",
            "content": "Vectors vs. Scalars . Vectors Quantities . Vectors quantities are, in the context of physics, quantifiable values that have a magnitude (quantifiable value) and direction that indicates its movment. . Examples include: . velocity | displacement | weight | acceleration | force | pressure | momentum | gravity | drag | etc. | . Scalar Quantities . Scalar quantities are, in the context of physics, quantifiable values that have only a magnitude without regard to direction but indicates movement. . Examples include: . Distance | Speed | Energy | Mass | Density | Power | Length, Area, Volume | Time | Temperature | Work | etc. | . Summary/Concluding Thoughts . Vectors and Scalars are incredibly important values that I need to remember and distinguish between when dealing with physics. .",
            "url": "https://dontran15.github.io/CSAFastPages/physics/2022/08/28/vectorscalar.html",
            "relUrl": "/physics/2022/08/28/vectorscalar.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "An Integral Calculator for Polynomials",
            "content": "An Integral Calculator for Polynomials . About This Calculator . It&#39;s pretty straight forward in methodology. It takes in arguements for the upper bound, lower bound, and polynomial function from the user and then makes an estimate (which is pretty accurate) the value of the definite interval of that polynomial function using the upper and lower bounds. . The Algorithm . Simply explained, the polynomial function entered is in a string format and therefore needs to be parsed to be able convert the string into mathematical semantics. The algorithm then creates two ArrayLists that records the power and coefficient of each term respectively. The lists are then passed through a function which has a loop which calculates the output of the polynomial function for a given term of x. Being able to calculate the value of the polynomial function now, the algorithm uses the trapezoid method of estimation for definite integrals for a 1,000,000 intervals in a loop. The answer is then outputted. . Limitations . The user input unfortunately has to be very strict in formatting where each term must specify +/- ax^n where +/- denotes a positive or negative term, a denotes the coefficient, and n denotes the power of the term. It can also only calculate polynomials. Can I code it to include more functions and less strict formatting? Theoretically, yes. In actuality, I&#39;m lazy and parsing is way too much work to code code code so we&#39;re stuck with strict polynomial inputs only. Ok have fun. Or use SymboLab 💀 . import java.util.ArrayList; public class Polynomial { ArrayList&lt;Integer&gt; powersList = new ArrayList&lt;&gt;(); ArrayList&lt;Integer&gt; coefficientsList = new ArrayList&lt;&gt;(); public static Polynomial parse (String input) throws Exception { Polynomial polynomial = new Polynomial(); for (int i = 0; i &lt; input.length();){ int xIndex = input.indexOf(&quot;x&quot;, i); if (xIndex == -1){ throw new Exception(&quot;Invalid input, x variable expected&quot;); } String coeffString = input.substring(i, xIndex); int coefficient = Integer.valueOf(coeffString); polynomial.coefficientsList.add(coefficient); i = xIndex + 2; int nextCoeffSign = 1; int pIndexPos = input.indexOf(&quot;+&quot;, i); int pIndexNeg = input.indexOf(&quot;-&quot;, i); int pIndex = pIndexPos; if (pIndexNeg != -1 &amp;&amp; (pIndexNeg &lt; pIndexPos || pIndex == -1)) { pIndex = pIndexNeg; nextCoeffSign = -1; } if (pIndex == -1){ pIndex = input.length(); } String powString = input.substring(i, pIndex); int power = Integer.valueOf(powString); polynomial.powersList.add(power); if (nextCoeffSign == -1){ i = pIndex; } else { i = pIndex + 1; } } return polynomial; } public double polynomialOutput(double x){ double output = 0; for (int i = 0; i &lt; powersList.size(); i++){ output += coefficientsList.get(i) * Math.pow(x, powersList.get(i)); } return output; } public double polynomialIntegralCalc(double lowerBound, double upperBound){ int iterations = 1000000; double interval = (upperBound - lowerBound)/iterations; double output = 0; for (int i = 0; i &lt; iterations; i++) { double x1 = lowerBound + interval*i; double x2 = x1 + interval; double lowerOutput = polynomialOutput(x1); double upperOutput = polynomialOutput(x2); double trapezoidArea = (upperOutput+lowerOutput)*interval/2; output += trapezoidArea; } return output; } } . import java.util.Scanner; public class PolynomialIntegralCalculator { public static void happyCase() throws Exception { Scanner userInput = new Scanner(System.in); System.out.println(&quot;Type your polynomial: must be single variable (x) polynomial with no spaces and all terms with powers specified {Ex: -5x^4+10x^1-2x^0}&quot;); String input = userInput.nextLine(); System.out.println(&quot;Polynomial Function: &quot; + input); System.out.println(&quot;Type the lower bound of the integral&quot;); double lowerBound = Double.valueOf(userInput.nextLine().trim()); System.out.println(&quot;Lower Bound: &quot; + String.valueOf(lowerBound)); System.out.println(&quot;Type the upper bound of the integral&quot;); double upperBound = Double.valueOf(userInput.nextLine().trim()); System.out.println(&quot;Higher Bound: &quot; + String.valueOf(upperBound)); userInput.close(); Polynomial polynomial = Polynomial.parse(input.trim()); System.out.println(polynomial.polynomialIntegralCalc(lowerBound, upperBound)); } public static void main(String[] args) throws Exception{ PolynomialIntegralCalculator.happyCase(); } } PolynomialIntegralCalculator.main(null); . Type your polynomial: must be single variable (x) polynomial with no spaces and all terms with powers specified {Ex: -5x^4+10x^1-2x^0} Polynomial Function: -5x^4+10x^1 Type the lower bound of the integral Lower Bound: 0.0 Type the upper bound of the integral Higher Bound: 2.0 -12.000000000053387 .",
            "url": "https://dontran15.github.io/CSAFastPages/java/object-oriented/primitives/college%20board/week%201/2022/08/26/polynomial-integral-calculator.html",
            "relUrl": "/java/object-oriented/primitives/college%20board/week%201/2022/08/26/polynomial-integral-calculator.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Bash",
            "content": "Bash Checks . This notebook is to check if bash is running well on my system and all the other necessary tools I&#39;ll need for this course are also running smoothly. . Kernels . To check if my kernels are installed, I can run the command &quot;jupyter kernelspec list&quot; . echo &quot;Using jupyter kernelspec list to see if all the necessary kernals are installed.&quot; jupyter kernelspec list . Using jupyter kernelspec list to see if all the necessary kernals are installed. Available kernels: bash /Users/don/Library/Jupyter/kernels/bash java /Users/don/Library/Jupyter/kernels/java javascript /Users/don/Library/Jupyter/kernels/javascript python3 /Users/don/opt/anaconda3/share/jupyter/kernels/python3 . Checking Conda . Let&#39;s confirm if conda is running with conda list. . conda list . # packages in environment at /Users/don/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . Programming Languages and Anaconda Version Check . Now, let&#39;s check the versions of Python, Java (Java itself and the JDK), Javascript, Bash, Anaconda, Jupyter . echo &quot;Python and Python 2 Versions:&quot; python --version python2 --version #Checks Java and JDK versions echo &quot;Java and JDK Versions:&quot; java --version javac --version #Checks JS version echo &quot;JS Version:&quot; npm --version #Checks for conda version echo &quot;Anaconda Version:&quot; conda --version #Checks for jupyter version echo &quot;Jupyter Version:&quot; jupyter --version . Python and Python 2 Versions: Python 3.9.12 Python 2.7.18 Java and JDK Versions: java 18.0.1.1 2022-04-22 Java(TM) SE Runtime Environment (build 18.0.1.1+2-6) Java HotSpot(TM) 64-Bit Server VM (build 18.0.1.1+2-6, mixed mode, sharing) javac 18.0.1.1 JS Version: 6.4.1 Anaconda Version: conda 4.13.0 Jupyter Version: Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 . Installations . Automization of developer installations via bash! Provided anaconda is already installed via Linux or online. . echo(&quot;Update and upgrade brew given one&#39;s device already has Brew: &quot;) brew list brew update brew upgrade echo(&quot;Complete!&quot;) echo(&quot;Installing git through brew: &quot;) brew install git echo(&quot;Complete!&quot;) echo(&quot;Python installation via brew: &quot;) brew install python echo(&quot;Complete!&quot;) echo(&quot;Java installation via brew: &quot;) brew install java echo(&quot;Complete!&quot;) echo(&quot;Jupyter installation via conda: &quot;) conda install jupyter echo(&quot;Complete!&quot;) echo(&quot;Bash Kernel installation via Python: &quot;) pip install bash_kernel python -m bash_kernel.install echo(&quot;Complete!&quot;) echo(&quot;NodeJS and javascript installation via conda&quot;) conda install nodejs npm -version npm install -g ijavascript ijsinstall echo(&quot;Complete!&quot;) echo(&quot;Installing ijava kernal via python: &quot;) wget https://github.com/SpencerPark/IJava/releases/download/v1.3.0/ijava-1.3.0.zip unzip ijava-1.3.0.zip python install.py --user echo(&quot;Complete!&quot;) . Bash Notes .",
            "url": "https://dontran15.github.io/CSAFastPages/java/bash/week%201/2022/08/24/bash.html",
            "relUrl": "/java/bash/week%201/2022/08/24/bash.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Primitives",
            "content": "Primitives Data Type Notes . Java is a data type language and all data is defined with explicit use. This can be in the form of primitive data types or non primitive data types (objects/wrapper classes). . Primitives . Primitives are fundemental data types in Java that solely hold certain data types and lack any methods. Among the most basic primitives there are: . Booleans (true or false values) boolean | . | Characters (individual characters) char | . | Integers (integer numbers and its representations) int | byte | long | short | . | Floating-Points (decimals) float | double | . | . The most commonly used ones in java are boolean, char, int, and double. . Non-Primitives . Because Java likes everything to be a class, all data types, including forms of the primitives, are iterated as classes. The difference between primitives and non-primitives however is that non-primitves are able to perform method calls. Among some examples of Non-Primitives are: . String | ArrayList | any other object that may take the form of data | . Applications . Below is a demonstration of the use of some primitives and a string in Java. (examples include int, double, boolean, and String) . public class Primitives { public static void main (String[] args) { int integer = 55; // This is an integer, this is a primitive data type which holds integer values double doub = 10.92; // This is a double, this is a primitive data type which holds decimal values boolean bool = true; // This is a boolean, this is a primitive data type which holds the two values true or false String string = &quot;This is a string&quot;; // This is a String, this is a wrapper class data type which an array of characters System.out.println(&quot;This is an integer: &quot; + integer); System.out.println(&quot;This is an double: &quot; + doub); System.out.println(&quot;This is an bool: &quot; + bool); System.out.println(&quot;This is an string: &quot; + string); } } Primitives.main(null); . This is an integer: 55 This is an double: 10.92 This is an bool: true This is an string: This is a string . Salary Raise Calculator . About This Calculator . This is a calculator that demonstrates implementations of boolean, int, double, and String within the code. . Do you ever struggle to calculate your salary raise or are just too lazy to plug those large numbers into a calculator? Then, welcome to a salary raise calculator where your only job is to input your old salary and the amount your salary has been raised by. . Not only does it calculate it for you it calcualate your new salary but also the manages the percent raise of your salary before informing you whether you&#39;ve been scammed in your raise and that your employer is not appreciating you enough. I would encourage you to go on strike but unfortunately I&#39;m a code code coder and not a strike strike striker so I don&#39;t have any advice for that. Good luck! . How It Works . A scanner is created to read the inputs of users and prompts users to enter double type inputs for the users salary and raise which is then used to calculate the new salary by adding the two values together. The percent increase is calculated by dividing the calculated new salary by the old salary and multiplied by 100 before being subtracted by 100. The in code comments go more in detail with what each line of code does. . Use of Primitives . Integers . Outputs percent increase as a raise | . Doubles . Salaries are taken in as double values which does double division and casted as an integer output when calculating the percent | . Boolean . Uses booleans to check if the output of the percent increase is good or not returning true for a percent value that is good | . String . Outputs string message which includes all the values computed or collected above into a message that outputs new salary (double), precent increase (int), and quality of raise (boolean) | . Contributions . This code was made in java in conjuction with fellow coder Nathan using pair programming. . import java.util.Scanner; public class SalaryRaiseCalculator{ public static void main(String[] args) { Scanner salaryInput = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Enter a salary: &quot;); // salary input message prompt double salary = salaryInput.nextDouble(); // Read user input double oldSalary = salary; // Records oldsalary for percent calculation later System.out.println(&quot;Enter your pay raise: &quot;); // raise input message prompt double raise = salaryInput.nextDouble(); // Read user input salary += raise; // The inputted number of &quot;raise&quot; is added onto the original inputted &quot;salary&quot; int percent = (int) (100*(salary / oldSalary)-100); // Calculates percent raise salaryInput.close(); //Closes Scanner object salaryInput; stops reading text inputs boolean payraisequality; String message; if(percent &gt; 5){ payraisequality = true; } else{ payraisequality = false; } if (payraisequality == true){ message = &quot;You got a good pay raise!&quot;; } else{ message = &quot;You got a bad pay raise!&quot;; } System.out.println(&quot;Your final salary is: &quot; + salary + &quot;, which is around a &quot; + percent + &quot;% raise from your original salary. &quot; + message); // Output user input } } SalaryRaiseCalculator.main(null); . Enter a salary: Enter your pay raise: Your final salary is: 1020000.0, which is around a 2% raise from your original salary. You got a bad pay raise! .",
            "url": "https://dontran15.github.io/CSAFastPages/java/primitives/week%201/college%20board/pbl/2022/08/23/primitives.html",
            "relUrl": "/java/primitives/week%201/college%20board/pbl/2022/08/23/primitives.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Week 0 Ticket",
            "content": "Hacks Part 1 . Link to Personal Fastpages / Github pages running on github.io | Link to a new post in Fastpages project | Link to first Python Jupter notebook printing “Hello” | Link to first Java Jupter notebook printing “Hello” | Screenshot image of Fastpages project using VSCode IDE . | Link to GitHub Insights | . Hacks Part 2 . . Link to commit of minor change of Java Project | Seed: Link to commit change to fix Birds page dropdown | Seed: Link to commit change to fix Java 17 compiling | .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%200/2022/08/22/week0-ticket.html",
            "relUrl": "/markdown/fastpages/week%200/2022/08/22/week0-ticket.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Graphical Analysis Physics Lab1",
            "content": "Don Tran . 09.04.2022 . AP Physics C: Mechanics . Purpose . For this lab, we are going to need to measure the thickness, radius, and mass of each of the 5 disks. To collect the data, we’ll need to collect 5 disks of different radius of the same thickness and material, a ruler/meter stick, and a scale. . For the thickness, because each of the disks are the same thickness, we only need to measure one. We can use the biggest one (because it is the easiest to fold) and fold it 6 times. Then, we can measure the thickness of the disk and divide it by the number of layers (64 layers for 6 folds). . For the radius, we use the ruler/meter stick and measure from the center of each disk to the edge. . For the mass, we weigh each disk on a scale and record their weights in grams. . The precision of the meter stick/ruler was in millimeters. Given the meter stick/ruler, the data is measured all measurements are measured in centimeters with markers representing each tenth of a centimeter which is a millimeter. Therefore the precision of the measurements are in millimeters. . # . Data . Aluminum Disks Radius and Mass . Disk . Radius (mm) . Mass (g) . . r2 (mm2) . . Disk 1 (Largest) | 72.2 mm | .72 g | | 5212.84 | . Disk 2 (2nd Largest) | 52.2 mm | .38 g | | 2724.84 | . Disk 3 (3rd Largest) | 43.5 mm | .25 g | | 1892.25 | . Disk 4 (4th Largest) | 31.8 mm | .13 g | | 1011.24 | . Disk 5 (5th Largest) | 23.2 mm | .07 g | | 538.24 | . Graph . Graph 1: Radius vs Mass Quadratic Graph . . Graph 1 is non-linear because it’s a quadratic graph which shows a clear curve of the data. The equation for the graph is: . (y = 0.000141609 x^{2} - 0.000156579 x - 0.00530521) . Graph 2: Radius2 vs Mass Linearized Graph . . Graph 2 is a linear graph with the equation for its line of best fit being: . y = 0.000140016 ( frac{g}{cm^{2}}) * x - 0.00866072 (g) . Analysis . 1) What is the independent variable in your y = mx +b formula? . The independent variable of my line of best fit function is x which represents the value of (r^{2}) of the disks. . 2) What does the slope represent in your y = mx +b formula? Show dimensionally that indeed that is what your slope represents and that the formula is valid dimensionally. . The slope in the formula represents ( pi times rho times text{ h}), or pi (which has no dimensions) x density (in g/mm^3) x h (in cm) which is dimensionally measured as (g/cm^{2}). Dimensionally we know the slope is in (g/mm^{2}) and that this equation is dimensionally valid because: . y = mx + b is measured in the units where y is the mass and x is measured in (mm^{2}). . Therefore, in y = mx + b using its dimensions, g = slope * (cm^{2}) + g and therefore, slope = (g/cm) and the equation is dimensionally valid. . 3) Should the “b” in your y = mx + b formula be zero? Explain your answer. . No, b in the line of best fit formula should theoretically be zero because if the radius of the disk is 0 mm, the mass by intuition would also have to be 0 grams because the area that the disk covers is nonexistent. Therefore, it is implausible that b should be a negative value because the weight of the disks can’t be negative or any other value besides zero when there is no radius. . 4) Measure/estimate the “thickness” of your cylinders. Use that value to find the experimental density of your cylinders. Find a percent difference between your found density and the actual density. The actual material is aluminum. . Cylinder thickness (h): 1/64 mm = 0.015625 mm . ( rho = frac{m}{V}), ( rho = frac{m}{ pi r^{2}h}), ( rho times pi times h = m/r^{2}) . ( pi times rho times h = slope = 0.000140 frac{g}{mm^{2}} ) . ( rho = 0.000140 frac{g}{mm^{2}} times frac{1}{1/64 mm times pi} = 0.002852 frac{g}{mm^{3}} times frac{1000 mm^{3}}{1 cm^{3}} = 2.852 frac{g}{cm^{3}} ) . Actual aluminum density: (2.7 frac{g}{cm^{3}}) . ( % Error = 100 % cdot frac{(Experimental - Theoretical)}{ text{Theoretical}}) . ( % Error = 100 % cdot frac{2.852 frac{g}{cm^{3}} - 2.7 frac{g}{cm^{3}}}{2.7 frac{g}{cm^{3}}} = 5.63 %) . 5) errors. Make sure you explain why your number is bigger or smaller than (if positive or negative difference.) . In the experiment, some possible errors might have been due to outside effects such as thermal expansion causing a larger radius compared to the mass, thereby raising the slope value and making the density larger than it actually is. Another possible cause for error might have been imprecise measuring devices when measuring the thickness which was still partly too large to accurately measure, especially given its thinness. One other factor may have been that the disks weren’t perfect circles causing our radius measurements to be overestimated thereby raising the slope value and in turn the density.. . Multiple Choice Questions . 1. You perform the same experiment, but this time you plot a linear relationship between mass and the circumference of the disks rather than the radius. What is the slope of the linear plot? . A. 4π2 r2 . B. 2πr2 . C. (h rho/2 pi) . D. 1/4π . E. (h rho/4 pi) . (c = 2 pi r) . c is proportional to r and r2 is proportional to m, therefore c2 is proportional to m. To linearize: . (c^{2} = (2 pi r)^{2} = 4 pi^{2}r^{2} ) . ( rho = m/v ), (m = rho v) . (m = rho times 2 pi r^{2}), ( rho = frac{m}{ pi r^{2}h} cdot frac{4 pi}{4 pi}) , ( rho = frac{m cdot 4 pi}{4 pi^{2}r^{2}h}), ( rho = frac{m}{c^{2}} cdot frac{4 pi}{h}), ( rho = frac{4 pi*slope}{h}), (slope = frac{ rho h}{4 pi}) . Therefore the slope of the linear plot is h( rho)/4π. Answer E. . 2. SKIP . 3. Consider an experiment in which a student measures the mass and diameter of 10 different-sized spheres, all made of the same material of uniform density ρ. For this student to create a linear graph relating the mass of the sphere to its radius r, the student would need to plot mass m versus which quantity: . A. r . B. r2 . C. r3 . D. r4 . E. r1/2 . (m = varrho v), (v = frac{4}{3} pi r^{3}), (m = varrho cdot frac{4}{3} pi r^{3}), ( varrho cdot frac{4}{3} pi = frac{m}{r^{3}}) . Therefore the student would plot mass m versus r3 to linearize the data. Answer: C. . Synthesis Questions . 1. In this experiment, if we had used disks with a greater thickness, would the slope of your best fit line have been different? Would your experimental value for density be the same? Explain. . Yes, the slope of my best fit line would not have been different because the greater thickness of all the disks would have caused the mass of the disks to be greater. Therefore, since mass was the y-axis, the ratio between the mass and r2 would have also been greater causing the slope of the line of best fit to increase. . The experimental density would also have been different because the thickness of the disks would have been much easier to measure without requiring us to fold it since folding it still left air pockets that were unaccounted for likely overestimating the height. Therefore, in the relationship between ( pi times rho times h = slope) to be more accurate. . 2. How would your graph of m versus r2 be different if you had used disks of the same . thickness, but made out of steel? Draw a second line on your m versus r2 plot that . represents disks made of steel. . The graph of m vs r2 would have a much higher slope if the disks of the same thickness were made of steel instead. This is because steel has a higher density than aluminum thereby increasing the mass of the disks and causing the ratio between the mass and radius to be higher. . Graph of Experimental Aluminum Disk Graph vs Theoretical Steel Disk Graph . . Black represents the line of best fit for the aluminum plates’ m and r2. Red represents the theoretical line of best fit for the relationship between m and r2. . ** ** . 3. Another group of students has acquired data for the exact same experiment; however, their disks are made of an unknown material that they are trying to determine. The group’s m versus r2 data produced a line of best fit with slope equal to 122 kg/m2. Each disk they measured had the same 0.5 cm thickness. Calculate the density of the unknown material and use the table below to help determine what material their disks are made of. . Material Density (g/cm3) . Magnesium | 1.7 | . Aluminum | 2.7 | . Copper | 8.3 to 9.0 | . Gold | 19.3 | . Iron | 7.8 | . Lead | 11.3 | . Platinum | 21.4 | . Uranium | 18.7 | . Osmium | 22.5 | . ( rho h pi = slope = 122 kg/m^{2}, 0.5 cm cdot frac{1 m}{100 cm} = 0.005 m, rho pi*0.005 m = 122 kg/m^{2}) . ( rho = frac{122 kg/m^{2}}{0.005 m cdot pi} = 7800 kg/m^{3} cdot frac{1 m^{3}}{(100 cm)^{3}} cdot frac{1000 g{}^{}}{1 kg} = 7.8 g/cm^{3}) . The calculated density according to the student’s data comes out to be equal to that of the density of iron and therefore the unknown material that the disks are made from must be iron. .",
            "url": "https://dontran15.github.io/CSAFastPages/2022/08/22/graphical-analysis-physics-lab1.html",
            "relUrl": "/2022/08/22/graphical-analysis-physics-lab1.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Stein Rhetorical Precis",
            "content": "Don Tran . Mrs. DaFoe . AP English Language . 21 August 2022 . Rhetorical Précis Joel Stein . In his Op-Ed, “We’re teaching kids to follow their dreams. Maybe teach them to be helpful instead,” Joel Stein, author of “In Defense of Elitism: Why I’m Better Than You and You’re Better Than Someone Who Didn’t Buy This Book,” asserts that rather than being taught the importance of toiling to help others, American society teaches children to reach for dreams of personal achievement, thereby creating a dangerous mindset. To help his audience conceptualize American society’s emphasis on individual achievement, Stein notes examples of students’ speeches during his son’s class, living wax museum. In one instance he observes, Stein remarks, “Ruth Ginsburg did not toil to be one of the first female Supreme Court justices; she fought to expand the rights of all women.” Stein uses the student’s speech regarding Ginsburg as an example of the failure of students to recognize Ginsburg’s motives for working hard to become a Supreme Court Justice. He notes that her goal was not to become a Supreme Court Justice, as he implies the student pointed out, instead, he emphasizes the idea that she labored herself to fight for women’s rights. As a result, Stein’s example provides evidence for his audience that students fail to recognize the motives of the hard work that famous figures endured to help others and instead focus on the personal achievements that those figures attained. By highlighting this, he helps lead his readers to conclude that children, like the students he observed, are focused on dreaming to attain personal achievements just as the important figures they chose did, rather than harboring genuine desires to contribute to creating a better world. By establishing that students are focused on attaining individualistic dreams, Stein suggests that raising children to believe in this way is ultimately dangerous for society through an allusion. At the end of his op-ed, he notes that children who seek individualistic accomplishments will create a future generation that “will be asking not what can they do for their country, but rather what the country can do for them.” In this line, he makes a clear allusion to President John F. Kennedy’s inaugural address, where he called upon Americans not to seek what their country could do for them but rather seek what they could do for their country to promote his New Frontier policies which depended on the cooperation and effort of the American people. By alluding to Kennedy, an integral figure of American history, and the society he attempted to promote, Stein highlights to his audience that if children continue to be raised without a genuine desire to help people, society will ultimately follow a dangerous direction away from a society that works to build itself together. By alluding to a reversal of the ideas Kennedy remarks in his address, Stein infers that American society will also oppositely fail to succeed. All together, Stein creates a constructive tone as he attempts to warn parents, teachers and adults that kids must learn to seek to help one another or else American society will be filled with the conflict of individualism. .",
            "url": "https://dontran15.github.io/CSAFastPages/2022/08/21/stein-rhetorical-precis.html",
            "relUrl": "/2022/08/21/stein-rhetorical-precis.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "My First Post!",
            "content": "First Fastpages Post 😎🥱 . Hi I’m Don. Welcome to my first fastpages post, the start to my year long experience to cope cope cope while I code code code. . . What to Expect . This post is to see if I didn’t botch my fast pages and set them up right. It’s also here to test how much markdown I vaguely remember. . Some Fun Facts . I have a dog | I ate bun bo hue | Things I like: Drinking Boba | Bread | Sleeping | . | Things I hate: Insects | Spiders | Anything that looks like it could or can kill me | . | . Quote . “Thumbs up.” 👍 . Markdown Styling Examples . Markings Syntax Description Example . Strike Through | Puts a Strike through words | Hello | . Italics | Slants characters in italic style | Hello | . Bold | Thickens characters in bold style | Hello | . End of My First Blog . Note: Wishing myself good luck for this year. . Tip: Remember to code code code and cope cope cope. . Important: This is the end of my fist blog post on fast pages. .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%200/pbl/2022/08/20/first-post.html",
            "relUrl": "/markdown/fastpages/week%200/pbl/2022/08/20/first-post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "First Python Jupyter Notebook",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://dontran15.github.io/CSAFastPages/jupyter/python/fastpages/week%200/pbl/2022/08/19/python-nb.html",
            "relUrl": "/jupyter/python/fastpages/week%200/pbl/2022/08/19/python-nb.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "First Java Jupyter Notebook",
            "content": "System.out.println(&quot;Hello&quot;); . Hello .",
            "url": "https://dontran15.github.io/CSAFastPages/jupyter/java/fastpages/week%200/pbl/2022/08/19/java-nb.html",
            "relUrl": "/jupyter/java/fastpages/week%200/pbl/2022/08/19/java-nb.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Arguments Around Us",
            "content": "Don Tran . Mrs. Dafoe . AP English Language : Period 3 . 19 August 2022 . In his column, “Column: The Atlantic says ‘the California Dream is dying,” Michael Hiltzik argues through an informal and sarcastic tone that pieces such as Connor Friedersdorf’s piece, “The California Dream is Dying,” is another instance of a flawed notion of the “dying California dream” overlooks its obvious inherent flaws and objective successes. Hiltzik starts with a clear informal tone, immediately using a variety of colloquial language such as “Magazine writers’ chestnuts,” “buzz,” and “glittering.” Through this colloquial language, he sets up his abrasive and sarcastic tone, which establishes his open disagreement with Friedersdorf’s piece and the “ ‘California is dying’ trope.” The most prominent example is his acerbic remark regarding business owners cited for violations which Friedersdorf cites as reasons against California’s regulation: “My guess” A poll of such business owners would turn up unanimous agreement that regulation is bad.” Through the informal and abrasive tone Hiltzik uses, he creates a feeling of ridicule towards the article, setting up his breakdown of Friedersdorf’s arguments as silly and tedious. While he does make scathing remarks about the piece and the “trope” in general, he attempts to appeal to his audience’s logos through quotes and statistics that he uses to break apart Friedersdorf’s arguments. In response to the special pleading that Fridersdorf’s analysis of an almond farmer who “grouses” about his water struggles, Hiltzik notes that Friedersdorf disregards that almond farms require large quantities of continuous water necessary to facilitate them. He furthermore cites an article regarding the likely reversal of California’s population decline in addition to achievements such as its high median household income, low new COVID case rates, strong economic growth, and model pollution and water conservation regulations. By appealing to his audience through organized logic, Hiltzik reinforces the idea that California’s situation has always been filled with tenuous and inevitable struggles, which the state has met with its own successes. For the most part, Hiltzik provides a fair assessment of the flaws within Friedersdorf’s piece and reveals that California is not all doom and gloom and has never been perfect. However, his argument provided an overall favorable view of California as a state, especially its performance as a US state, and tended to portray Californian economic and environmental practices as successes. Consequently, Hiltzik also tended to overlook issues California faces not just as an American state but as a broader systemic problem unique to the state. California may have a high median household income, especially in comparison to Texas or Florida. Yet, it also ranks as having the US’s 3rd highest cost of living and 2nd highest median home prices. Therefore it’s important to note California as a state still has a lot of work to do to reach towards a brighter future. Although the opportunity the state presented during the Gold Rush has subsided, now, the cultural and economic value that Hollywood and Silicon Valley provide are uniquely Californian and therefore be leveraged to all levels of society if California wishes to continue being a leading US state. Friedersdorf’s piece, in contrast to Hiltzik’s critical tone of the piece infers, is not all too against the “Californian dream” compared to the other much more hostile attitudes of “California Dream” critics. Friedersdorf, as a Californian, believes that the attitude that California is great as it is in the face of troubles and flaws fundamentally hurts California as it creates preservationists. In that regard, I believe that Hiltzik’s belief in California’s perseverance comes off as temporarily hopeful, especially in the face of future problems. So, if California is to survive the 21st century, I, like Friedersdorf, believe it will be up to Californians to focus on creating a future that all its current and future residents can enjoy. .",
            "url": "https://dontran15.github.io/CSAFastPages/2022/08/19/arguments-around-us.html",
            "relUrl": "/2022/08/19/arguments-around-us.html",
            "date": " • Aug 19, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Who Am I?? 🥸",
          "content": "Hey! Welcome to my fastpages! I’m Don Tran and I’m a junior at Del Norte High School. I like playing piano and drinking boba. I like learning and probably am planning to go into some CS field. Anyways very cool 😈😈1. . so awesome! 😎😎 &#8617; . |",
          "url": "https://dontran15.github.io/CSAFastPages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dontran15.github.io/CSAFastPages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}