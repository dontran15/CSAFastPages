{
  
    
        "post0": {
            "title": "Objects Homework",
            "content": "public class Goblin { private String name; private int HP; private int DMG; private double hitChance; private double criticalHitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public double getCriticalHitChance(){ return criticalHitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } public void setCriticalHitChance(double newCriticalHitChance) { this.criticalHitChance = newCriticalHitChance; } } . import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { if (Math.random() &lt; attackerGoblin.getCriticalHitChance()){ attackeeGoblin.takeDMG(2*attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; lands a critical hit!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + 2*attackerGoblin.getDMG() + &quot; damage&quot;); } else{ attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.50); goblin1.setCriticalHitChance(0.05); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); goblin1.setCriticalHitChance(0.25); fight(goblin1, goblin2); } } Duel.main(null); . jeffrey attacks Gunther the great! jeffrey misses... Gunther the great HP: 4 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 11 jeffrey attacks Gunther the great! jeffrey lands a critical hit! Gunther the great takes 4 damage Gunther the great HP: 0 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 10 Gunther the great has perished .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%208/2022/10/16/objects-hw.html",
            "relUrl": "/college%20board/week%208/2022/10/16/objects-hw.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Objects",
            "content": "Object Oriented Programming . OOP is a typ of coding paradigm that uses objects classes and methods as the main components to the paradigm. Classes act as templates while objects act as instances of the templates. Methods represent the functions each object/class can execute. . Objects can contain data members, methods, constructors, interfaces, nested classes. Variables act as data members/attributes of an object just as an orange represents vitamin C or calorie count. . Declaring methods has 6 parts to it. First is the Access Modifier which is public, protected, private, or default and these defines the level of access code can have to certain methods. Return types are the return types of the data. The next is method name which specifies the name of the method and follows traditional camel case naming conventions. Next is parameter list which is the list of parameters that must be passed through when calling a method and are used as values that the method uses. The body of method is the actual logic of the method and what is executed when it is called. Exceptions are the specific exceptions that a method may need to throw if any unexpected errors happen. This allows errors to compile in Java code. . Reuse, optimization, organization, object reference required to call an object&#39;s method. Must call method with arguments. . Homework: Implement Variables into the Code . See here to find homework .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%208/2022/10/13/objects.html",
            "relUrl": "/college%20board/week%208/2022/10/13/objects.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Primitives",
            "content": "Why Java? . Garbage Collecting Multi Threading . Primitives vs Non-Primitives . Naming Conventions . They all use lower case . Casting . Method to convert primitives into other primitives . Operators . addition | . | subtraction | . | multiplication | . | / division | % modulo | ++ increment | += add then assign to variable | -= subtract then assign to variable | more | . They have orders of operations for each operator . Scanners . import java.util.Scanner Create Scanner object set what the scanner will read with data type . Homework 2006 Question 1, 2a, and 3a . Question 1 . An appointment scheduling system is represented by the following three classes: TimeInterval, Appointment, and DailySchedule. In this question, you will implement one method in the Appointment class and two methods in the DailySchedule class. | A TimeInterval object represents a period of time. The TimeInterval class provides a method to determine if another time interval overlaps with the time interval represented by the current TimeInterval object. An Appointment object contains a time interval for the appointment and a method that determines if there is a time conflict between the current appointment and another appointment. The declarations of the TimeInterval and Appointment classes are shown below. . public class TimeInterval { // returns true if interval overlaps with this TimeInterval; // otherwise, returns false public boolean overlapsWith(TimeInterval interval) { / implementation not shown / } // There may be fields, constructors, and methods that are not shown. } public class Appointment { // returns the time interval of this Appointment public TimeInterval getTime() { / implementation not shown / } // returns true if the time interval of this Appointment // overlaps with the time interval of other; // otherwise, returns false public boolean conflictsWith(Appointment other) { / to be implemented in part (a) / } // There may be fields, constructors, and methods that are not shown. } . (a) Write the Appointment method conflictsWith. If the time interval of the current appointment overlaps with the time interval of the appointment other, method conflictsWith should return true, otherwise, it should return false. Complete method conflictsWith below. // returns true if the time interval of this Appointment // overlaps with the time interval of other; // otherwise, returns false public boolean conflictsWith(Appointment other) . (b) A DailySchedule object contains a list of nonoverlapping Appointment objects. The DailySchedule class contains methods to clear all appointments that conflict with a given appointment and to add an appointment to the schedule. . public class DailySchedule { // contains Appointment objects, no two Appointments overlap private ArrayList apptList; public DailySchedule() { apptList = new ArrayList(); } // removes all appointments that overlap the given Appointment // postcondition: all appointments that have a time conflict with // appt have been removed from this DailySchedule public void clearConflicts(Appointment appt) { / to be implemented in part (b) / } // if emergency is true, clears any overlapping appointments and adds // appt to this DailySchedule; otherwise, if there are no conflicting // appointments, adds appt to this DailySchedule; // returns true if the appointment was added; // otherwise, returns false public boolean addAppt(Appointment appt, boolean emergency) { / to be implemented in part (c) / } // There may be fields, constructors, and methods that are not shown. } . Write the DailySchedule method clearConflicts. Method clearConflicts removes all appointments that conflict with the given appointment. . In writing method clearConflicts, you may assume that conflictsWith works as specified, regardless of what you wrote in part (a). Complete method clearConflicts below. . // removes all appointments that overlap the given Appointment // postcondition: all appointments that have a time conflict with // appt have been removed from this DailySchedule public void clearConflicts(Appointment appt) . (c) Write the DailySchedule method addAppt. The parameters to method addAppt are an appointment and a boolean value that indicates whether the appointment to be added is an emergency. If the appointment is an emergency, the schedule is cleared of all appointments that have a time conflict with the given appointment and the appointment is added to the schedule. If the appointment is not an emergency, the schedule is checked for any conflicting appointments. If there are no conflicting appointments, the given appointment is added to the schedule. Method addAppt returns true if the appointment was added to the schedule; otherwise, it returns false. In writing method addAppt, you may assume that conflictsWith and clearConflicts work as specified, regardless of what you wrote in parts (a) and (b). Complete method addAppt below. . // if emergency is true, clears any overlapping appointments and adds // appt to this DailySchedule; otherwise, if there are no conflicting // appointments, adds appt to this DailySchedule; // returns true if the appointment was added; // otherwise, returns false public boolean addAppt(Appointment appt, boolean emergency) . Question 1a . public boolean conflictsWith(Appointment other){ return getTime().overlapsWith(other.getTime()); } . Question 1b . public void clearConflicts(Appointment appt){ for (int i = 0; i &lt; aptList.size(); i++){ if (appt.conflictsWith((Appointment)apptList.get(i))){ aptList.remove(i); } } } . Question 1c . public boolean addAppt(Appointment appt, boolean emergency){ if (emergency){ clearConflicts(appt); } else{ for (int i = 0; i &lt; apptList.size(); i++){ if (appt.conflictsWith((Appointment)apptList.get(i))){ return false; } } } return apptList.add(appt); } . Question 2a . (a) Write the TaxableItem method purchasePrice. The purchase price of a TaxableItem is its list price plus the tax on the item. The tax is computed by multiplying the list price by the tax rate. For example, if the tax rate is 0.10 (representing 10%), the purchase price of an item with a list price of $6.50 would be $7.15. . Complete method purchasePrice below. // returns the price of the item including the tax public double purchasePrice() . public double purchasePrice(){ return (1 + taxRate) * getListPrice(); } . Question 3a . Consider the following incomplete class that stores information about a customer, which includes a name and unique ID (a positive integer). To facilitate sorting, customers are ordered alphabetically by name. If two or more customers have the same name, they are further ordered by ID number. A particular customer is &quot;greater than&quot; another customer if that particular customer appears later in the ordering than the other customer. public class Customer { // constructs a Customer with given name and ID number public Customer(String name, int idNum) { / implementation not shown / } // returns the customer&#39;s name public String getName() { / implementation not shown / } // returns the customer&#39;s id public int getID() { / implementation not shown / } // returns 0 when this customer is equal to other; // a positive integer when this customer is greater than other; // a negative integer when this customer is less than other public int compareCustomer(Customer other) { / to be implemented in part (a) / } // There may be fields, constructors, and methods that are not shown. } (a) Write the Customer method compareCustomer, which compares this customer to a given customer, other. Customers are ordered alphabetically by name, using the compareTo method of the String class. If the names of the two customers are the same, then the customers are ordered by ID number. Method compareCustomer should return a positive integer if this customer is greater than other, a negative integer if this customer is less than other, and 0 if they are the same. For example, suppose we have the following Customer objects. Customer c1 = new Customer(&quot;Smith&quot;, 1001); Customer c2 = new Customer(&quot;Anderson&quot;, 1002); Customer c3 = new Customer(&quot;Smith&quot;, 1003); The following table shows the result of several calls to compareCustomer. Method Call Result c1.compareCustomer(c1) 0 c1.compareCustomer(c2) a positive integer c1.compareCustomer(c3) a negative integer | Complete method compareCustomer below // returns 0 when this customer is equal to other; // a positive integer when this customer is greater than other; // a negative integer when this customer is less than other public int compareCustomer(Customer other) . public int compareCustomer(Customer other){ int comparedNames = getName().compareTo(other.getName()); if (comparedNames != 0){ return comparedNames; } else{ return getID() - other.getID(); } } .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%208/2022/10/12/primitives-notes.html",
            "relUrl": "/college%20board/week%208/2022/10/12/primitives-notes.html",
            "date": " • Oct 12, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "ArrayLists",
            "content": "ArrayLists . ArrayLists are containers (like arrays, lists, etc), which store data within them. Unlike traditional arrays, ArrayList sizes are not set and can be modified. In Java, they act as objects with their own special syntax. Instantiating an ArrayList is almost essentially the same with any other object where the user needs to call a constructor. In addition, Java&#39;s strong type makes lists, unlike in weak type languages like Python, all the same data type. Overall, ArrayLists are very useful, especially in the context of data bases, because they are expandable containers of data that we can access in a variety of different manners. . Below is an implementation of ArrayLists with a rough application to our Science Olympiad website. . import java.util.*; public class Member{ //instantiates attributes static int idCounter = 0; int id; int grade; String name; String email; String phoneNumber; String password; int yearsInSciOly; String team; String[] events; //Constructor for each attribute public Member(int grade, String name, String email, String phoneNumber, String password, int yearsInSciOly, String team, String[] events){ this.id = idCounter; idCounter++; this.grade = grade; this.name = name; this.email = email; this.phoneNumber = phoneNumber; this.password = password; this.yearsInSciOly = yearsInSciOly; this.team = team; this.events = events; } //creates general ArrayList using Member objects public static ArrayList&lt;Member&gt; createMemberList(){ Member member1 = new Member(11, &quot;Your Mom&quot;, &quot;mom.your@gmail.com&quot;, &quot;696-696-9696&quot;, &quot;12345&quot;, 5, &quot;deez&quot;, new String[]{&quot;Fermi&quot;, &quot;Astrology&quot;, &quot;your mom&quot;}); Member member2 = new Member(12, &quot;Joe&quot;, &quot;joe.your@gmail.com&quot;, &quot;958-696-9696&quot;, &quot;123456&quot;, 5, &quot;deez&quot;, new String[]{&quot;Fermi&quot;, &quot;joe star&quot;, &quot;your mom&quot;}); Member member3 = new Member(9, &quot;Jack&quot;, &quot;jack.your@gmail.com&quot;, &quot;542-696-9696&quot;, &quot;23456&quot;, 5, &quot;deez&quot;, new String[]{&quot;Fermi&quot;, &quot;Niki&quot;, &quot;How to Cope&quot;}); Member member4 = new Member(10, &quot;Jill&quot;, &quot;jill.your@gmail.com&quot;, &quot;234-696-9696&quot;, &quot;123456&quot;, 5, &quot;deez&quot;,new String[]{&quot;Fermi&quot;, &quot;Chem Lab&quot;, &quot;Krish Patil&quot;}); ArrayList&lt;Member&gt; memberList = new ArrayList&lt;&gt;(); //add() method adding members; useful for adding new members every time new member object instantiated memberList.add(member1); memberList.add(member2); memberList.add(member3); memberList.add(member4); return memberList; } //print method that prints the name attribute of each object, prints method being used public static void printMembers(ArrayList&lt;Member&gt; memberList, String arrayListMethod){ System.out.println(&quot;-&quot;); System.out.println(&quot;Method: &quot; + arrayListMethod); //size() method gets integer length of memberList; useful for keeping track of number of members for (int i = 0; i &lt; memberList.size(); i++){ //get() method returns the object specified by index; useful for getting data of individual members //.name retrieves the name attribute from the Member object System.out.println(memberList.get(i).name); } if (memberList.isEmpty()){ //isEmpty() method is useful if we need to check for sure that data is clear or if we want certain conditions System.out.println(&quot;no one here :(&quot;); } System.out.println(&quot;-&quot;); } //Simple log in system that returns true or false (yes it is terribly unsecure) public boolean login(String input){ if (input.equals(password)){ return true; }else{ return false; } } } . Let&#39;s See ArrayLists in Action . ArrayLists can have any type of data in them ranging from primitives (booleans, int, double) to wrapper classes and any other type of object. Below is a member list of Science Olympiad and here I use a variety of methods that can alter or retrieve the data within the ArrayList. The code includes comments explaining the particular use case and why it&#39;s useful. . public class Main{ public static void main(String[] args){ //creates memberList and prints members; some uses of methods within print method ArrayList&lt;Member&gt; memberList = Member.createMemberList(); Member.printMembers(memberList, &quot;instantiating memberList array; get(); size(); isEmpty(); attribute specification&quot;); //add(element) method; Useful for adding new members to databases and additional relevant info memberList.add(new Member(11, &quot;Morb&quot;, &quot;tehee.your@gmail.com&quot;, &quot;754-696-9696&quot;, &quot;34542&quot;, 6, &quot;deez&quot;, new String[]{&quot;Green Generation&quot;, &quot;Anime&quot;, &quot;How to Hit Man&quot;})); Member.printMembers(memberList, &quot;add()&quot;); //clear() method; Useful for clearing members every new season from current competition databases memberList.clear(); Member.printMembers(memberList, &quot;clear()&quot;); memberList = Member.createMemberList(); //remove(int index); Useful for removing members at a specific index in case someone drops out memberList.remove(1); Member.printMembers(memberList, &quot;remove(int i)&quot;); //remove(element); not sure how it could be practically used in reference to objects but it could be useful to remove items from our database according to a particular value of data //set(int i, element); useful for overwriting data in potential cases of a member or merging data of accounts? memberList.set(1, new Member(11, &quot;Gaik&quot;, &quot;Gaiko@gmail.com&quot;, &quot;900-900-9000&quot;, &quot;34562&quot;, 10, &quot;deez&quot;, new String[]{&quot;Slick&quot;, &quot;Smart&quot;, &quot;Speaker&quot;})); Member.printMembers(memberList, &quot;remove(int i)&quot;); //indexOf(element); Might be useful if can be easily accessed and indexed by element w/out having to recreate each time, might be useful for finding certain users //memberList.get(i).indexOf(member); (wrong lol) //lastIndexOf(element); Same as indexOF //memberList.get(i).lastIndexOf(member); (wrong lol) //equals(); same reason it would be hard to use as s indexOf but would be useful for checking if member accounts are the same or if any particular data is similar //memberList.get(i).equals(member); //hashCode(element); Perhaps useful for figuring out certain information in reference to where the objects are being stored in memory or when we need to reference an object //memberList.get(i).hashCode(member); //contains(element); Same as indexOf except in this case checking if certain users are there or not //memberList.contains(memberList.get(i)); //containsAll(Collection collection); Useful for checking if a group of certain users, similar impracticality as indexOf //memberList.containsAll(memberList.get(i)); //sort(Comparator comp) Useful for sorting/organizing certain groups, in particular, likely for local client interactions when admins need to sort data //memberList.sort(); } } Main.main(null); . - Method: instantiating memberList array; get(); size(); isEmpty(); attribute specification Your Mom Joe Jack Jill - - Method: add() Your Mom Joe Jack Jill Morb - - Method: clear() no one here :( - - Method: remove(int i) Your Mom Jack Jill - - Method: remove(int i) Your Mom Gaik Jill - .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/pbl/week%207/2022/10/05/arraylists.html",
            "relUrl": "/college%20board/pbl/week%207/2022/10/05/arraylists.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "RapidAPI AI Stock Info",
            "content": "My RapidAPI . In my example, I used Yahoo finance to return related information of public companies given their ticker symbol. The user puts in their input a ticker symbol and upon submitting the form, it gives the user an output of a summary of the company. . Link to API Implementation . Benefits of Using an API? . APIs benefits us because it enables us as programmers to have easy access to a variety of pre made/built processes uploaded to the web. This comes in the form of almost function like calls that return useful information or do useful processing through the web without us needing to actually use it. It also enables the communication between different services. It also is useful for bypassing the need for us to collect our own data and pour resources into collecting such data. JSON&#39;s are one of the de facto standards of data transmission across APIs because of its simplistic representation of objects. . With an API, you save so much time. Since they&#39;re just basically a massive data pool, you can easily take out data. Unfortunately, these have limitations that we cannot get around without paying a bit, but we will not be doing that in this case. . Benefit(s) of Backend Implementation? . For the backend, much of the internal processing that would&#39;ve been needed to compute or process data can easily be accessed through APIs thereby saving time, money, effort, and other resources into an otherwise expensive processing. This helps the developers to focus primarily on their own unique services rather than minute redundant services that have already been made. It also helps different services interface with each other due to shared/common APIs that enable easy transfers of data. .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/week%206/2022/09/30/RapidAPI.html",
            "relUrl": "/pbl/week%206/2022/09/30/RapidAPI.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Spring Boot Update",
            "content": "Updates . As of now, we&#39;ve managed to get a working calculator with working button inputs using Spring Boot, JavaScript, and some basic HTML/CSS. So far, you can either use button inputs or type into the calculator. The calculator supports basic operators, order of operations (pemdas), and a few basic functions. . Calculator . Controller . package com.nighthawk.spring_portfolio.controllers; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestParam; import com.nighthawk.spring_portfolio.models.calculator.*; @Controller // HTTP requests are handled as a controller, using the @Controller annotation public class CalcController { // CONTROLLER handles GET request for /calculator, maps it to calculator() // method @GetMapping(&quot;/calculator&quot;) public String calculator(@RequestParam(name = &quot;input&quot;, required = false) String input, Model model) { // If no output parameter has been inputted String output; if (input != null) { CalculatorRPN calcRPN = new CalculatorRPN(); calcRPN.parse(input); calcRPN.shuntingYardAlg(); output = String.valueOf(calcRPN.rpnEvaluate()); } else { output = &quot;&quot;; } // model to map output into html model.addAttribute(&quot;output&quot;, output); // load HTML VIEW (calculator.html) return &quot;calculator&quot;; } } . Model . package com.nighthawk.spring_portfolio.models.calculator; import java.util.Stack; import java.util.ArrayList; public class CalculatorRPN { ArrayList&lt;String&gt; tokens = new ArrayList&lt;&gt;(); ArrayList&lt;String&gt; rpnOutput = new ArrayList&lt;&gt;(); String[] functions = { &quot;sin&quot;, &quot;cos&quot;, &quot;tan&quot;, &quot;ln&quot; }; // checks for operator public boolean isOperator(char c) { switch (c) { case &#39;+&#39;: return true; case &#39;-&#39;: return true; case &#39;*&#39;: return true; case &#39;/&#39;: return true; case &#39;^&#39;: return true; default: return false; // else of switch } } public boolean isOperator(String s) { return s.length() == 1 &amp;&amp; isOperator(s.charAt(0)); } public boolean isParenthesis(char c) { switch (c) { case &#39;(&#39;: return true; case &#39;)&#39;: return true; default: return false; } } public boolean isFunction(char c) { for (String func : functions) { if (c == func.charAt(0)) { return true; } if (c == &#39;o&#39;) { return true; } } return false; } public boolean isFunction(String s) { return s.length() == 1 &amp;&amp; isFunction(s.charAt(0)); } public boolean isNumber(String s) { return !isOperator(s) &amp;&amp; !isParenthesis(s.charAt(0)) &amp;&amp; !isFunction(s); } public int getPrecedence(char c) { switch (c) { case &#39;+&#39;: return 2; case &#39;-&#39;: return 2; case &#39;*&#39;: return 3; case &#39;/&#39;: return 3; case &#39;^&#39;: return 4; default: return -1; } } public int getPrecedence(String s) { if (s.length() == 1) { return (getPrecedence(s.charAt(0))); } else { return -1; } } public String getAssociativity(char c) { switch (c) { case &#39;+&#39;: return &quot;left&quot;; case &#39;-&#39;: return &quot;left&quot;; case &#39;*&#39;: return &quot;left&quot;; case &#39;/&#39;: return &quot;left&quot;; case &#39;^&#39;: return &quot;right&quot;; default: return &quot;&quot;; } } public String getAssociativity(String s) { if (s.length() == 1) { return getAssociativity(s.charAt(0)); } else { return &quot;&quot;; } } public double calculate(char operator, double x1, double x2) { switch (operator) { case &#39;+&#39;: return x1 + x2; case &#39;-&#39;: return x1 - x2; case &#39;*&#39;: return x1 * x2; case &#39;/&#39;: return x1 / x2; case &#39;^&#39;: return Math.pow(x1, x2); default: throw new RuntimeException(&quot;Unsupported operator: &quot; + operator); } } public double calculate(String operator, double x1, double x2) { if (operator.length() == 1) { return calculate(operator.charAt(0), x1, x2); } else { throw new RuntimeException(&quot;Unsupported operator or function: &quot; + operator); } } public double funcCalculate(char function, double x) { switch (function) { case &#39;s&#39;: return Math.sin(x); case &#39;c&#39;: return Math.cos(x); case &#39;t&#39;: return Math.tan(x); case &#39;l&#39;: return Math.log1p(x); case &#39;o&#39;: return Math.log10(x); default: throw new RuntimeException(&quot;Unsupported function: &quot; + function); } } public double funcCalculate(String function, double x) { if (function.length() == 1) { return funcCalculate(function.charAt(0), x); } else { throw new RuntimeException(&quot;Unsupported operator or function: &quot; + function); } } // parse input string as array of tokens public ArrayList&lt;String&gt; parse(String input) { String s = &quot;&quot;; for (String func : functions) { input = input.replaceAll(func, Character.toString(func.charAt(0))); } input = input.replaceAll(&quot;log&quot;, &quot;o&quot;); for (int i = 0; i &lt; input.length(); i++) { char c = input.charAt(i); if (isNumber(String.valueOf(c))) { s += c; } else { s += &quot; t&quot; + c + &quot; t&quot;; } } String[] splittedTokens = s.split(&quot; t&quot;, 0); ArrayList&lt;String&gt; tempTokens = new ArrayList&lt;&gt;(); for (String token : splittedTokens) { String trimmedToken = token.trim(); if (trimmedToken != &quot;&quot;) { tempTokens.add(trimmedToken); } } if (tempTokens.get(0).equals(&quot;-&quot;)) { // if breaks, try adding tokens -1, * instead tokens.add(&quot;0&quot;); } for (int i = 0; i &lt; tempTokens.size(); i++) { tokens.add(tempTokens.get(i)); if (i + 1 &gt;= tempTokens.size()) { break; } if (tempTokens.get(i).equals(&quot;)&quot;) &amp;&amp; tempTokens.get(i + 1).equals(&quot;(&quot;)) { tokens.add(&quot;*&quot;); } if (i &gt; 0 &amp;&amp; tempTokens.get(i - 1).equals(&quot;(&quot;) &amp;&amp; tempTokens.get(i).equals(&quot;-&quot;)) { tokens.remove(tokens.size() - 1); tokens.add(&quot;-1&quot;); tokens.add(&quot;*&quot;); } if (isNumber(tempTokens.get(i)) &amp;&amp; tempTokens.get(i + 1).equals(&quot;(&quot;)) { tokens.add(&quot;*&quot;); } if (tempTokens.get(i).equals(&quot;)&quot;) &amp;&amp; isNumber(tempTokens.get(i + 1))) { tokens.add(&quot;*&quot;); } if (i &gt; 0 &amp;&amp; tempTokens.get(i - 1).equals(&quot;^&quot;) &amp;&amp; tempTokens.get(i).equals(&quot;-&quot;)) { tokens.remove(i); tokens.add(&quot;^&quot;); tokens.add(&quot;-1&quot;); } } return tokens; } // shunting yard algorithm to convert array to rpn public ArrayList&lt;String&gt; shuntingYardAlg() { Stack&lt;String&gt; operatorStack = new Stack&lt;&gt;(); for (String token : tokens) { if (isNumber(token)) { rpnOutput.add(token); } else if (isFunction(token)) { operatorStack.push(token); } else if (isOperator(token)) { while (!operatorStack.isEmpty()) { String o1 = token; String o2 = operatorStack.peek(); int o1P = getPrecedence(o1); int o2P = getPrecedence(o2); if ((isOperator(o2) &amp;&amp; (o2P &gt; o1P || (o1P == o2P &amp;&amp; getAssociativity(o1) == &quot;left&quot;)))) { String s = operatorStack.pop(); rpnOutput.add(s); } else { break; } } operatorStack.push(token); } else if (token.equals(&quot;(&quot;)) { operatorStack.push(token); } else if (token.equals(&quot;)&quot;)) { while (!operatorStack.isEmpty() &amp;&amp; !operatorStack.peek().equals(&quot;(&quot;)) { String s = operatorStack.pop(); rpnOutput.add(s); } operatorStack.pop(); if (isFunction(operatorStack.peek())) { String s = operatorStack.pop(); rpnOutput.add(s); } } } while (!operatorStack.isEmpty()) { String s = operatorStack.pop(); rpnOutput.add(s); } return rpnOutput; } // evaluate rpn using stack public double rpnEvaluate() { Stack&lt;String&gt; resultStack = new Stack&lt;&gt;(); for (String e : rpnOutput) { if (isNumber(e)) { resultStack.push(e); } else if (isOperator(e)) { double x2 = Double.valueOf(resultStack.pop()); double x1 = Double.valueOf(resultStack.pop()); double r = calculate(e, x1, x2); resultStack.push(String.valueOf(r)); } else if (isFunction(e)) { double x = Double.valueOf(resultStack.pop()); double r = funcCalculate(e, x); resultStack.push(String.valueOf(r)); } } return Double.valueOf(resultStack.pop()); } } .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/week%205/2022/09/25/html-javascript-fastpages-and-springboot-update.html",
            "relUrl": "/pbl/week%205/2022/09/25/html-javascript-fastpages-and-springboot-update.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "SciOly Website Design",
            "content": "General Idea . For our project, we&#39;re making a Spring Boot Based Website for Del Norte&#39;s Science Olympiad club. For the most part, the website will be heavily UI based given that we&#39;re basing it off of Canvas. However, an important aspect of the website will be the management of members, events, and teams which will involve a large amount of OOP programming to organize all our members and create a cohesive, easily navigable, and robust website. The central goal of our website is to provide a website that will enable our club to easily manage members, provide a comprehensive archive or resources, implementations of important processes (registering, event placement, team selection, competing), and provide easy communication of announcements. . Wire Frame . !(wireframe)[] .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/week%205/2022/09/24/design.html",
            "relUrl": "/pbl/week%205/2022/09/24/design.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Javascript and HTML Hacks",
            "content": "Table for Competitors . Basing my code off the JS notebook code, I made a table based providing information that needs to be kept track of for each competitor. It keeps track of their name, grade, events, and role in Science Olympiad. More information can be added for other data as well. . //logging function function logIt(output) { console.log(output); } // define a function to hold data for a Person function Member(name, grade, events) { this.name = name; this.grade = grade; this.events = events; this.role = &quot;&quot;; } // define a setter for role in Person data Member.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Member.prototype.toJSON = function() { const obj = {name: this.name, grade: this.grade, events: this.events, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var vicePresident = new Member(&quot;Rohang Gaikwad&quot;, &quot;11th&quot;, [&quot;Dynamic planet&quot;, &quot;Astronomy&quot;, &quot;Rocks and Minerals&quot;]); // object type is easy to work with in JavaScript logItType(vicePresident); // before role logItType(vicePresident.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher vicePresident.setRole(&quot;Vice President&quot;); // set the role logItType(vicePresident); logItType(vicePresident.toJSON()); . object ; Member { name: &#39;Rohang Gaikwad&#39;, grade: &#39;11th&#39;, events: [ &#39;Dynamic planet&#39;, &#39;Astronomy&#39;, &#39;Rocks and Minerals&#39; ], role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Rohang Gaikwad&#34;,&#34;grade&#34;:&#34;11th&#34;,&#34;events&#34;:[&#34;Dynamic planet&#34;,&#34;Astronomy&#34;,&#34;Rocks and Minerals&#34;],&#34;role&#34;:&#34;&#34;} object ; Member { name: &#39;Rohang Gaikwad&#39;, grade: &#39;11th&#39;, events: [ &#39;Dynamic planet&#39;, &#39;Astronomy&#39;, &#39;Rocks and Minerals&#39; ], role: &#39;Vice President&#39; } string ; {&#34;name&#34;:&#34;Rohang Gaikwad&#34;,&#34;grade&#34;:&#34;11th&#34;,&#34;events&#34;:[&#34;Dynamic planet&#34;,&#34;Astronomy&#34;,&#34;Rocks and Minerals&#34;],&#34;role&#34;:&#34;Vice President&#34;} . // define a student Array of Person(s) var competitors = [ new Member(&quot;John&quot;, &quot;9th&quot;, [&quot;Fermi questions&quot;, &quot;Trajectory&quot;]), new Member(&quot;Jack&quot;, &quot;10th&quot;, [&quot;Anatomy&quot;, &quot;Cell Biology&quot;]), new Member(&quot;Jill&quot;, &quot;12th&quot;, [&quot;Astronomy&quot;, &quot;Write It Do It&quot;]), new Member(&quot;Bob&quot;, &quot;10th&quot;, [&quot;Green Generation&quot;, &quot;Environmental Chemistry&quot;]), new Member(&quot;Becca&quot;, &quot;11th&quot;, [&quot;Flight&quot;, &quot;Scrambler&quot;]) ]; // define a classroom and build Classroom objects and json function SciOly(vicePresident, competitors){ // 1 teacher, many student // start Classroom with Teacher vicePresident.setRole(&quot;Vice President&quot;); this.vicePresident = vicePresident; this.scioly = [vicePresident]; // add each Student to Classroom this.competitors = competitors; this.competitors.forEach(competitors =&gt; { competitors.setRole(&quot;Competitor&quot;); this.scioly.push(competitors); }); // build json/string format of Classroom this.json = []; this.scioly.forEach(member =&gt; this.json.push(member.toJSON())); } // make a CompSci classroom from formerly defined teacher and students dnSciOly = new SciOly(vicePresident, competitors); // output of Objects and JSON in CompSci classroom logItType(dnSciOly.scioly); // constructed classroom object logItType(dnSciOly.scioly[0].name); // abstract 1st objects name logItType(dnSciOly.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(dnSciOly.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Member { name: &#39;Rohang Gaikwad&#39;, grade: &#39;11th&#39;, events: [ &#39;Dynamic planet&#39;, &#39;Astronomy&#39;, &#39;Rocks and Minerals&#39; ], role: &#39;Vice President&#39; }, Member { name: &#39;John&#39;, grade: &#39;9th&#39;, events: [ &#39;Fermi questions&#39;, &#39;Trajectory&#39; ], role: &#39;Competitor&#39; }, Member { name: &#39;Jack&#39;, grade: &#39;10th&#39;, events: [ &#39;Anatomy&#39;, &#39;Cell Biology&#39; ], role: &#39;Competitor&#39; }, Member { name: &#39;Jill&#39;, grade: &#39;12th&#39;, events: [ &#39;Astronomy&#39;, &#39;Write It Do It&#39; ], role: &#39;Competitor&#39; }, Member { name: &#39;Bob&#39;, grade: &#39;10th&#39;, events: [ &#39;Green Generation&#39;, &#39;Environmental Chemistry&#39; ], role: &#39;Competitor&#39; }, Member { name: &#39;Becca&#39;, grade: &#39;11th&#39;, events: [ &#39;Flight&#39;, &#39;Scrambler&#39; ], role: &#39;Competitor&#39; } ] string ; Rohang Gaikwad string ; {&#34;name&#34;:&#34;Rohang Gaikwad&#34;,&#34;grade&#34;:&#34;11th&#34;,&#34;events&#34;:[&#34;Dynamic planet&#34;,&#34;Astronomy&#34;,&#34;Rocks and Minerals&#34;],&#34;role&#34;:&#34;Vice President&#34;} object ; { name: &#39;Rohang Gaikwad&#39;, grade: &#39;11th&#39;, events: [ &#39;Dynamic planet&#39;, &#39;Astronomy&#39;, &#39;Rocks and Minerals&#39; ], role: &#39;Vice President&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom SciOly.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Events&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in dnSciOly.scioly) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + dnSciOly.scioly[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + dnSciOly.scioly[row].grade + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + dnSciOly.scioly[row].events.join(&quot;, &quot;) + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + dnSciOly.scioly[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table id = &#39;result&#39;&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(dnSciOly._toHtml()); . NameGradeEventsRole . Rohang Gaikwad | 11th | Dynamic planet, Astronomy, Rocks and Minerals | Vice President | John | 9th | Fermi questions, Trajectory | Competitor | Jack | 10th | Anatomy, Cell Biology | Competitor | Jill | 12th | Astronomy, Write It Do It | Competitor | Bob | 10th | Green Generation, Environmental Chemistry | Competitor | Becca | 11th | Flight, Scrambler | Competitor | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/javascript/week%205/2022/09/23/html-javascript.html",
            "relUrl": "/pbl/javascript/week%205/2022/09/23/html-javascript.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Fibonacci Extends and Data Modeling",
            "content": "Fibonacci Sequence . Object Oriented Programming (Inheritance and Polymorphism) . Two of the most important pillars of OOP are Inheritance and Polymorphism. . Inheritance allows for the passing of constructors and data variables from one class to another creating a hierarchical structure. This is especially useful for code to be reused for certain classes like methods while also allowing for the sub classes to implement their own methods either overwriting them or creating entirely new ones. This can be implemented through extends key word which indicates inheritance and can either be done through an abstract class (a class with abstract methods that have undefined logic that must be defined in child classes) or normal classes. . Polymorphism allows for a single action to be performed in multiple ways meaning that the name space for functions is easier to manage as functions that do a single action will do the same thing as another function but can be implemented in a different way. Typically this comes in the form of overwriting a super class&#39;s methods with a class with the same signature but a different implementation, or establishing the logic of an abstract method from an abstract class. . Class Running Fibonacci in Multiple Ways . Here, we&#39;ll explore the different ways of implementing the Fibonacci sequence while using inheritance and polymorphism to our advantage to avoid clutter and create cleaner more effective code. Here, I&#39;ll start with Mr. Mort&#39;s code before working my way down and creating an abstract class and its respective sub classes. . Abstract Class . Abstract key word when creating class. Cannot make an instance of this class and can only extend using a subclass . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* * Zero parameter constructor uses Telescoping technique to allow setting of the * required value nth * * @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* * Construct the nth fibonacci number * * @param: nth number, the value is constrained to 92 because of overflow in a * long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); // initialize fibonacci and time mvc this.init(); } /* * This Method should be &quot;abstract&quot; * Leave method as protected, as it is only authorized to extender of the class * Make new class that extends and defines init() * Inside references within this class would change from this to super * Repeat process using for, while, recursion */ protected abstract void init(); /* * Number is added to fibonacci sequence, current state of &quot;list&quot; is added to * hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* * Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* * Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* * Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i = 0; i &lt; this.size; i++) { System.out.println(&quot;fibonacci Sequence &quot; + (i + 1) + &quot; = &quot; + this.getNthSeq(i)); } } } . Fibonacci Using Stream Extended Class . Does Mr. Mort&#39;s code for streams in a subclass of fibo. It&#39;s only purpose is processing the data before putting it into the setData method which it inherited. . //Original Code Fibo (Stream) import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; public class FiboStream extends Fibo { public FiboStream() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboStream(int nth) { super(nth); } @Override protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[] { 0, 1 }, f -&gt; new long[] { f[1], f[0] + f[1] }) .limit(this.size) .forEach(f -&gt; this.setData(f[0])); } /* * Tester class method. If this becomes abstract you will not be able to test it * directly ... * Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboStream fib = new FiboStream(); fib.print(); } } FiboStream.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibo Using For Loop . public class FiboFor extends Fibo { public FiboFor() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboFor(int nth) { super(nth); } @Override protected void init() { this.name = &quot;For&quot;; long f[] = new long[] { 0, 1 }; for (int i = 0; i &lt; size; i++) { long n = f[0]; this.setData(f[0]); f[0] = f[1]; f[1] = n + f[1]; } } static public void main(String[] args) { FiboFor fib = new FiboFor(); fib.print(); } } FiboFor.main(null); . Init method = For fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibo Using While Loop . import java.util.ArrayList; import java.util.HashMap; public class FiboWhile extends Fibo { public FiboWhile() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboWhile(int nth) { super(nth); } @Override protected void init() { this.name = &quot;While&quot;; long f[] = new long[] { 0, 1 }; int i = 0; while (i &lt; size) { long n = f[0]; this.setData(f[0]); f[0] = f[1]; f[1] = n + f[1]; i++; } } /* * Tester class method. If this becomes abstract you will not be able to test it * directly ... * Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboWhile fib = new FiboWhile(); fib.print(); } } FiboWhile.main(null); . Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibo Using Recursion . import java.util.ArrayList; import java.util.HashMap; public class FiboRecursion extends Fibo { public FiboRecursion() { this(20); // telescope to avoid code duplication, using default as 20 } public FiboRecursion(int nth) { super(nth); } @Override protected void init() { this.name = &quot;Recursion&quot;; for (int i = 0; i &lt; size; i++) { setData(fiboRecursion(i)); } } private long fiboRecursion(long n) { if (n &lt;= 1) { return n; } return (fiboRecursion(n - 1) + fiboRecursion(n - 2)); } /* * Tester class method. If this becomes abstract you will not be able to test it * directly ... * Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboRecursion fib = new FiboRecursion(); fib.print(); } } FiboRecursion.main(null); . Init method = Recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%205/java/2022/09/22/fibo-extends-data-modeling.html",
            "relUrl": "/college%20board/week%205/java/2022/09/22/fibo-extends-data-modeling.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Week 4 Ticket",
            "content": "Score: 2.7+/3.0 . Requirements . FRQ #1 Control Structures - 2019 | 2D Array Iteration MiniLab | . Extra . Agile Reflection | Front End Updates - Fastpages &amp; Springboot | Functions in Calculator | .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%204/2022/09/19/week4-ticket.html",
            "relUrl": "/markdown/fastpages/week%204/2022/09/19/week4-ticket.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Iteration Mini Lab - The Aquarium",
            "content": "Iteration Using 2D Arrays vs Iteration Using Objects . Iteration is especially useful when going through long lists of items. Two instances of this could be iterating through a 2D Array which in this case is an array of an array of strings which allows me to create rows and columns for each of my ASCII art pieces, or a 1D array of Objects who&#39;s properties include a 1D array of strings that make up my ASCII art piece. . Let&#39;s see both of them in action: . Iteration Using 2D Arrays . Unlike the example in Mr. Mort&#39;s blog, I&#39;ll be using an aquarium and slightly edited version of the monkeys jumping on the bed rhyme and be putting them horizontally as opposed to vertically. . public class Aquarium{ //Instantiate a 2D Array (made of columns and rows) like a grid String [][] aquarium; //Constructor (&quot;Builds&quot; (Constructs) aquarium in this example) public Aquarium(){ aquarium = new String[][]{ { &quot; / &quot;, &quot; _/./ &quot;, &quot; ,-&#39; `-:..-&#39;/ &quot;, &quot;: o ) _ ( &quot;, &quot; `-....,--; `-. &quot;, &quot; `&#39; &quot;, &quot; &quot;, &quot; &quot; }, { &quot; /`·.¸ &quot;, &quot; /¸...¸`:· &quot;, &quot; ¸.·´ ¸ `·.¸.·´) &quot;, &quot;: © ):´; ¸ { &quot;, &quot; `·.¸ `· ¸.·´ `·¸)&quot;, &quot; ` ´´ ¸.·´ &quot;, &quot; &quot;, &quot; &quot; }, { &quot; | o &quot;, &quot; | o &quot;, &quot;| / . o &quot;, &quot;| | ( &quot;, &quot;|/ / &quot;, &quot; | / &quot;, &quot; |/ &quot;, &quot; &quot; }, { &quot; ___ &quot;, &quot; _ / __)_ ° &quot;, &quot; _ .&#39;_&#39;-&#39; /-&#39;-. o ° &quot;, &quot; &#39;-._.&#39;-&#39; / _ -(O)_: O &quot;, &quot; (__ /_ &#39;._) _ o &quot;, &quot; /.&#39; (_.&#39;-&#39;&#39;./&#39; &quot;, &quot; &#39; &quot;, &quot; &quot; }, { &quot; ____ &quot;, &quot; / &quot;, &quot; /-./ &quot;, &quot;/ o /| &quot;, &quot;&gt; | &quot;, &quot; &lt;) / | &quot;, &quot; -&#39; &quot;, &quot; ____/ &quot; } }; } public void print(){ System.out.println(); System.out.println(&quot;The Sea Aquarium&quot;); int aquariumCount = aquarium.length; for (int i = aquariumCount; i &gt; 0; i--){ System.out.println(i + &quot; Little fishies swimming in the sea...&quot;); for (int col = 0; col &lt; aquarium[0].length; col++){ for (int row = 0; row &lt; i; row++){ System.out.print(aquarium[row][col] + &quot; t&quot;); } System.out.println(); } System.out.println(&quot;A shark gobbled up one in a spree&quot;); System.out.println(&quot;The employee called the manager and the manager said, &quot;); System.out.println(&quot;&#39;No more sharks swimming in the sea!&#39;&quot;); System.out.println(&quot; n-- n&quot;); aquariumCount -= 1; } System.out.println(&quot;No more fishies living in the sea :( n&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new Aquarium().print(); } } Aquarium.main(null); . The Sea Aquarium 5 Little fishies swimming in the sea... / /`·.¸ | o ___ ____ _/./ /¸...¸`:· | o _ / __)_ ° / ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o _ .&#39;_&#39;-&#39; /-&#39;-. o ° /-./ : o ) _ ( : © ):´; ¸ { | | ( &#39;-._.&#39;-&#39; / _ -(O)_: O / o /| `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / (__ /_ &#39;._) _ o &gt; | `&#39; ` ´´ ¸.·´ | / /.&#39; (_.&#39;-&#39;&#39;./&#39; &lt;) / | |/ &#39; -&#39; ____/ A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 4 Little fishies swimming in the sea... / /`·.¸ | o ___ _/./ /¸...¸`:· | o _ / __)_ ° ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o _ .&#39;_&#39;-&#39; /-&#39;-. o ° : o ) _ ( : © ):´; ¸ { | | ( &#39;-._.&#39;-&#39; / _ -(O)_: O `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / (__ /_ &#39;._) _ o `&#39; ` ´´ ¸.·´ | / /.&#39; (_.&#39;-&#39;&#39;./&#39; |/ &#39; A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 3 Little fishies swimming in the sea... / /`·.¸ | o _/./ /¸...¸`:· | o ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o : o ) _ ( : © ):´; ¸ { | | ( `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / `&#39; ` ´´ ¸.·´ | / |/ A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 2 Little fishies swimming in the sea... / /`·.¸ _/./ /¸...¸`:· ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) : o ) _ ( : © ):´; ¸ { `-....,--; `-. `·.¸ `· ¸.·´ `·¸) `&#39; ` ´´ ¸.·´ A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 1 Little fishies swimming in the sea... / _/./ ,-&#39; `-:..-&#39;/ : o ) _ ( `-....,--; `-. `&#39; A shark gobbled up one in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- No more fishies living in the sea :( -- THE END . Iteration Using Objects . Now let&#39;s see this example but in the form of objects! Because the static key word, I can create a class for just the fish alone which creates fish objects and also perform methods. In this sense, the class has universal methods which can be called to do something to the objects it (the class) created. It&#39;s pretty crazy cool. . By using OOP, the fishes are far easier to replicate and I can even give them other properties such as names, age, type etc. So, unlike iteration using purely 2D arrays, each fish I make can have unique properties. Both of them however are relatively easy to expand the list that the print function iterates through. However, OOP makes it far easier to manipulate the data of the fishes and the list that is iterated through. . import java.util.ArrayList; public class AquariumFish{ //Instantiates a static array list of fish objects (belongs to class) static ArrayList&lt;AquariumFish&gt; fishesList = new ArrayList&lt;AquariumFish&gt;(); // Stores individual fishes (the strings that make up the fish) for each object String[] fish; // Name of each fish String name; //Constructor which takes the string array of fish and the name of each fish as arguments public AquariumFish(String[] fish, String name) { this.fish = fish; //body this.name = name; //name fishesList.add(this); } public static void print(){ System.out.println(); System.out.println(&quot;The Sea Aquarium&quot;); int aquariumCount = fishesList.size(); for (int i = aquariumCount; i &gt; 0; i--){ System.out.println(i + &quot; Little fishies swimming in the sea...&quot;); for (int col = 0; col &lt; fishesList.get(0).fish.length; col++){ for (int row = 0; row &lt; i; row++){ System.out.print(fishesList.get(row).fish[col] + &quot; t&quot;); } System.out.println(); } System.out.println(&quot;A shark gobbled up &quot; + fishesList.get(i-1).name + &quot; in a spree&quot;); System.out.println(&quot;The employee called the manager and the manager said, &quot;); System.out.println(&quot;&#39;No more sharks swimming in the sea!&#39;&quot;); System.out.println(&quot; n-- n&quot;); aquariumCount -= 1; } System.out.println(&quot;No more fishies living in the sea :( n&quot;); System.out.print(&quot;Poor &quot;); for (int i = AquariumFish.fishesList.size(); i &gt; 0; i--){ System.out.print(AquariumFish.fishesList.get(i-1).name + &quot; &quot;); } System.out.println(&quot;did not survive.&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { AquariumFish fish0 = new AquariumFish(new String[]{ &quot; / &quot;, // Argument for Fish Body &quot; _/./ &quot;, &quot; ,-&#39; `-:..-&#39;/ &quot;, &quot;: o ) _ ( &quot;, &quot; `-....,--; `-. &quot;, &quot; `&#39; &quot;, &quot; &quot;, &quot; &quot; }, &quot;Ing&quot;); // Argumentfor Fish Name AquariumFish fish1 = new AquariumFish(new String[]{ &quot; /`·.¸ &quot;, &quot; /¸...¸`:· &quot;, &quot; ¸.·´ ¸ `·.¸.·´) &quot;, &quot;: © ):´; ¸ { &quot;, &quot; `·.¸ `· ¸.·´ `·¸)&quot;, &quot; ` ´´ ¸.·´ &quot;, &quot; &quot;, &quot; &quot; }, &quot;Groov&quot;); AquariumFish fish2 = new AquariumFish(new String[]{ &quot; | o &quot;, &quot; | o &quot;, &quot;| / . o &quot;, &quot;| | ( &quot;, &quot;|/ / &quot;, &quot; | / &quot;, &quot; |/ &quot;, &quot; &quot; }, &quot;In&quot;); AquariumFish fish3 = new AquariumFish(new String[]{ &quot; ___ &quot;, &quot; _ / __)_ ° &quot;, &quot; _ .&#39;_&#39;-&#39; /-&#39;-. o ° &quot;, &quot; &#39;-._.&#39;-&#39; / _ -(O)_: O &quot;, &quot; (__ /_ &#39;._) _ o &quot;, &quot; /.&#39; (_.&#39;-&#39;&#39;./&#39; &quot;, &quot; &#39; &quot;, &quot; &quot; }, &quot;Jam&quot;); AquariumFish fish4 = new AquariumFish(new String[]{ &quot; ____ &quot;, &quot; / &quot;, &quot; /-./ &quot;, &quot;/ o /| &quot;, &quot;&gt; | &quot;, &quot; &lt;) / | &quot;, &quot; -&#39; &quot;, &quot; ____/ &quot; }, &quot;Ben&quot;); AquariumFish.print(); } } AquariumFish.main(null); . The Sea Aquarium 5 Little fishies swimming in the sea... / /`·.¸ | o ___ ____ _/./ /¸...¸`:· | o _ / __)_ ° / ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o _ .&#39;_&#39;-&#39; /-&#39;-. o ° /-./ : o ) _ ( : © ):´; ¸ { | | ( &#39;-._.&#39;-&#39; / _ -(O)_: O / o /| `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / (__ /_ &#39;._) _ o &gt; | `&#39; ` ´´ ¸.·´ | / /.&#39; (_.&#39;-&#39;&#39;./&#39; &lt;) / | |/ &#39; -&#39; ____/ A shark gobbled up Ben in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 4 Little fishies swimming in the sea... / /`·.¸ | o ___ _/./ /¸...¸`:· | o _ / __)_ ° ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o _ .&#39;_&#39;-&#39; /-&#39;-. o ° : o ) _ ( : © ):´; ¸ { | | ( &#39;-._.&#39;-&#39; / _ -(O)_: O `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / (__ /_ &#39;._) _ o `&#39; ` ´´ ¸.·´ | / /.&#39; (_.&#39;-&#39;&#39;./&#39; |/ &#39; A shark gobbled up Jam in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 3 Little fishies swimming in the sea... / /`·.¸ | o _/./ /¸...¸`:· | o ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) | / . o : o ) _ ( : © ):´; ¸ { | | ( `-....,--; `-. `·.¸ `· ¸.·´ `·¸) |/ / `&#39; ` ´´ ¸.·´ | / |/ A shark gobbled up In in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 2 Little fishies swimming in the sea... / /`·.¸ _/./ /¸...¸`:· ,-&#39; `-:..-&#39;/ ¸.·´ ¸ `·.¸.·´) : o ) _ ( : © ):´; ¸ { `-....,--; `-. `·.¸ `· ¸.·´ `·¸) `&#39; ` ´´ ¸.·´ A shark gobbled up Groov in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- 1 Little fishies swimming in the sea... / _/./ ,-&#39; `-:..-&#39;/ : o ) _ ( `-....,--; `-. `&#39; A shark gobbled up Ing in a spree The employee called the manager and the manager said, &#39;No more sharks swimming in the sea!&#39; -- No more fishies living in the sea :( Poor Ben Jam In Groov Ing did not survive. -- THE END .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/college%20board/oop/week%204/2022/09/15/iteration-mini-lab.html",
            "relUrl": "/pbl/college%20board/oop/week%204/2022/09/15/iteration-mini-lab.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Agile Reflection",
            "content": "Agile Summary . 12 Points of Agile . Agile is a type of software development philosophy widely used and considered one of the most effective philosophies for development. There are 12 Principles which define software: . Satisfy customers need ASAP(early) w/ continuous delivery of software to customers [customers #1] | Changing requirements, even late into development | Deliver software frequently | All parties of a project must be involved throughout | Build around motivated individuals and create environment &amp; support for them to get the job done | Team face-to-face conversations is the most effective and efficient form of communication | Working software =&gt; progress | Sustainable development, constant pace of all parties [indefinitely] | Attention to design and &quot;technical excellence&quot; | Simplicity is key | An effective self-organized team is the produces the best architectures, requirements, and designs | Regular reflection on effectiveness and ways to fine tune and improve | Sprints . The typical software cycle (Sprint) [and by no means a strict one] consists of Meeting, Planning, Designing, Developing, Testing, Deploying, Evaluating, Launching, and then repeating. . Class Project Notes . During our project, some key things need to be considered: . Daily Scrums to understand state of the project and necessary adjustments/plans Assingments for integration and deployment | . | Roles: Scrum Master: Ensures Agile, tacks issues and maintains scrum boards, find ways to improve and tune workflow | DevOps: Role is to combine and ensure the implementation of philosophies, tools, and practices to increase high velocity delivery of application and service; version control, integration, managing dependencies, POM file management, AWS deployment | Frontend Developers: The physical front of the service/application the user sees and interacts with | Backend Developers: Builds mechanisms for data processing and perform actions (data storage, security, other non-visible server functions) | . | Use class time (3-4 hours a week) | During Sprints (2 weeks of 5-6 hours) total per person (20-24 hours) total of work | Sprints should be focused efforts to produce a working program for the client Daily Meetings, Scrum Boards, Planning, Agile, etc. | . | . 7 Important Transferable Skills . Creativity (Problem Solving, Conceptualization, Foresight, Connections, Synthesizing Ideas &amp; Data) | Critical Thinking (Problem Solving, Ability to Question/Ponder, Problems Combatted Before Even Found) | Communication (Verbal, Writing, Listening, Technological Comms, Communicating w/ All Teammates/Group and Audience) | Collaboration - Leadership (Responsibility Delegation, Time Management, Decision Making, Conflict, Group, Multi Tasking, Teaching/Mentoring) | Collaboration - Teamwork (Accepting Responsibility, Making/Implementing Decisions, Time Management, Meeting for Short &amp; Long Goals, Organizations, Deadlines) | Research (Analyzing Info, Brainstorming, Delineating Needs/Reqs, Gathering &amp; Extracting Data, Forecasting Problems, Setting Goals, Solving Problems) | Technical (Easy to Work w/, Quick to Learn, Appreciative to Learn, Failing and Always Willing to Try New Things, New Doors Esp in Cases of Oversight) | . Reflection . Given the practical use Agile has in software development, the philosophy I personally think can apply to any where whether it be in another field of work or even my own life. For any successful person, I suspect that, especially for the 7 important transferable skills, they practice Agile in some way or form throughout their lives. I think getting a grasp for this kind of experience will go a long way to improving myself as a programmer and person. .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/human/week%204/2022/09/15/agile-reflection.html",
            "relUrl": "/pbl/human/week%204/2022/09/15/agile-reflection.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "FRQ Method and Control Structures!!",
            "content": "2019 FRQ Question 1 . This FRQ type is labeled as a Method and Control Structure which covers (as implied) methods (functions) and control structures (if else, loops, etc.). This question deals with the creation of a calendar in code. It&#39;s interesting, at least to me, because it deals with a pretty standard yet extremely useful everyday tool, a calendar and after completing it, I found calendars to be surprisingly straight forward in terms of backend calculations (more on that in my reflection). . Instructions are labeled below while an explanation of my approach and code is down below. Peer grades are below after both parts to the question. At the very end is a reflection for the FRQ. See the TOC to jump to each section. . Question 1 . Instructions (It hurts my eyes and brain to read :&#39;) . The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. public class APCalendar { / Returns true if year is a leap year and false otherwise. / private static boolean isLeapYear(int year) { / implementation not shown */ } / Returns the number of leap years between year1 and year2, inclusive. | Precondition:0 &lt;= year1 &lt;= year2&gt; / public static int numberOfLeapYears(int year1, int year2) { / to be implemented in part (a) */ } /** Returns the value representing the day of the week for the first day of year, | where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. / private static int firstDayOfYear(int year) { / implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. | Returns 1 for January 1 (month = 1, day = 1) of any year. | Precondition:The date represented by month, day, year is a valid date.&gt; / private static int dayOfYear(int month, int day, int year) { / implementation not shown */ } /** Returns the value representing the day of the week for the given date | (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., | and 6 denotes Saturday. | Precondition:The date represented by month, day, year is a valid date.&gt; / public static int dayOfWeek(int month, int day, int year) { / to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } | . Part A . (a) Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. • isLeapYear(year) returns true if year is a leap year and false otherwise. Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. /** Returns the number of leap years between year1 and year2, inclusive. . Precondition:0 &lt;= year1 &lt;= year2&gt; */ public static int numberOfLeapYears(int year1, int year2) | . Approach to Part A . Note to Self: Preconditions means that the following condition is assumed to be met when inputs are implemented. Therefore, it is redundant and unnecessary to specify an if statement to check the Preconditions . They provide the function isLeapYear which significantly eases how much I need to do b/c finding if it is a leap year or not would hurt my brain to code and check. Therefore, the only concern would be the function which they ask for which outputs the number of leap years on a range of years from year1 to year2. . First we create our method signature (a static method as asked) and set its return type as an integer (since it&#39;ll return the # of years that are actually leap years) w/ the arguments year 1 and year 2 (the range of years). Since we are returning the # of years that are leap years, we can instantiate a int variable, leapYearCounter, to 0. . Now that we&#39;re done with creating the base of the method, we can start w/ the meat of the method. Since we can check if each year is a leap year with isLeapYear(), we simply need to iterate through each year in the range (inclusive) and pass them through isLeapYear(). If the isLeapYear() returns true, we add 1 to our leapYearCounter. The result should be a the number of leap years being recorded in leapYearCounter and thus we can return that value as the output. . public static int numberOfLeapYears(int year1, int year2){ int leapYearCounter = 0; for(int year = year1; year &lt;= year2; year++){ if(isLeapYear(year)){ leapYearCounter++; } } return leapYearCounter; } . Part B . (b) Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. . For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. In order to calculate this value, two helper methods are provided for you. . • firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. . • dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. . Class information for this question . public class APCalendar private static boolean isLeapYear(int year) public static int numberOfLeapYears(int year1, int year2) private static int firstDayOfYear(int year) private static int dayOfYear(int month, int day, int year) public static int dayOfWeek(int month, int day, int year) . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . /** Returns the value representing the day of the week for the given date . (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., | and 6 denotes Saturday. | Precondition:The date represented by month, day, year is a valid date.&gt; */ public static int dayOfWeek(int month, int day, int year) | . Approach to Part B . Despite how ridiculously long Part B&#39;s instructions are, the solution that they ask for is simple with one line of code. The necessary information are the two functions they provide, firstDayOfYear(year) and dayOfYear(month, day, year), which finds the day of the week that a given year starts on in the form of an integer and the number of days that have passed since the beginning of a year given the month, day, and year, respectively. . Since we know that, we can instantiate a static method (as prompted for) that has a return type of int in order to represent the day of the week in integer form. We also pass in the arguments month, day, and year as necessary for the method dayOfYear. . Now, all that needs to be done is returning the day of the month. We can think of every complete week (7 days) of a given year as being negligible for this b/c it&#39;s a full week from Sunday to Saturday which we don&#39;t care about. Also, since we are notating days of the week in days from a range of 0-6, we can use modulo of 7 to determine the date of the year. In addition, the day of the week that the year starts on needs to be accounted. Therefore if we find the total number of days that have passed since the beginning of the year (dayOfYear(month, day, year) - 1) and add on the first day of the year, we&#39;ll have the total days from the last sunday before or on the first day of the year to the current day. Then, we can take modulo 7 to ignore each full 7 day week and produce an output which represents the day of the week. . public static int dayOfWeek(int month, int day, int year){ return (dayOfYear(month, day, year) - 1 + firstDayOfYear(year))%7 } . Peer Grade . Reflection . Overall, this FRQ was not too difficult. It followed a pretty straight forward problem which I needed to solve the solution of. The easiest part was probably identifying which functions, variables, and return type I needed to use within the context of the problem. The hardest part was probably figuring out more minute logic within the control structures such as the bounds of the loop in the context of the problem or the proper expression to correctly produce the right day of the week. . Overall, practicing FRQs, as I likely will be throughout the year, on a completely new question format to me. The weirdest part will be writing out the code physically rather than having an IDE. I don&#39;t realize it totally but IDE&#39;s are so vital. They help me with so many random syntax errors I might make and create a clean way of formatting (smth I suck at ngl). They also give me insight into how College Board formats these types of questions which will be useful for the AP exam. . The best part I think I can take away from it, apart from being practice for an AP exam, is that it gives me the chance to apply problem solving skills and (arguable) creative skills in creating algorithms using Java syntax in the context of plausible problems. . For Methods and Control Structures in particular, the only thing I&#39;d need to pay attention to and perhaps work on is the logic in the context of the problem which I&#39;m likely prone to making mistakes in. Otherwise, I think I&#39;m pretty well set up to complete the FRQs because of my familiarity with the concept of Methods and Control Structures. .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/week%204/2022/09/14/frq1-method-and-control-structures.html",
            "relUrl": "/college%20board/week%204/2022/09/14/frq1-method-and-control-structures.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Week 3 Ticket",
            "content": "Score: 2.7+ . Requirements . If Else and Booleans | Deployed Springboot Project on AWS Blog on AWS | . | Focus/Habits | . Extras . Updated Calculator (Order of Operations) | .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%203/2022/09/11/week3-ticket.html",
            "relUrl": "/markdown/fastpages/week%203/2022/09/11/week3-ticket.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "If Else Statements and Boolean Logic",
            "content": "Booleans . Beans? Leans? Loo Beans? Boo Leans? It&#39;s a Boolean! Booleans are one of the primitive data types that Java supports and are an integral data type to all of computer science. In fact, it&#39;s the idea of booleans that actually makes up an integral part of computers which we know as 0s and 1s (on or off) which in computer speak is called binary. . Established by 19th century mathematician George Bool, booleans are at its core data for logic simply put in two types: true or false. With this you can create a complex structure of computing code and all other manners of code. . Let&#39;s see how they are when we assign them as variables! . boolean a = true; boolean b = false; System.out.println(&quot;variable a: &quot; + a + &quot; nvariable b: &quot; + b); . variable a: true variable b: false . Boolean Operators . Booleans, interestingly enough, have operators to them just as math does. The most common operators you&#39;ll hear about are the comparison operators: and (&amp;&amp;), or (||), &gt;, &lt;, &gt;=, &lt;=, ==. Another common operator is not (!). . The and operator compares two boolean statements and if both are true, then it will return true, otherwise all other combinations of the boolean statements return false. . The or operator also compares two boolean statements and if one of them is true, it returns true while if both of them is false, it will return false. . The not operator is applied to a boolean statement and switches true to false and false to true. . Let&#39;s see them in action! . // examples of some of the operators boolean a = true &amp;&amp; true; boolean b = false &amp;&amp; true; boolean c = 20 &gt;= 19; boolean d = 42 &lt; 23; boolean e = !b; System.out.println(&quot;variable a: &quot; + a + &quot; nvariable b: &quot; + b + &quot; nvariable c: &quot; + c + &quot; nvariable d: &quot; + d + &quot; nvariable e: &quot; + e); . variable a: true variable b: false variable c: true variable d: false variable e: true . If and Else Statements . If statements are, at their core, statements that check the conditions of true or false. If a condition is true, it will perform an action/line of code, if it is false, it will skip over the action/code block under the if statement. . An Else statements is an action/code block that performs if the condition for the if statement is not true. . An Else If statement is a combination of If and Else statements where if a condition is not true, it will move into the else statement which has another if statement. At its core. it is a nested If Else statement. . Let&#39;s see them in action. . int a = 11; int b = 6; int c = 9; if (a &gt; b){ //since a is greater than c, the else statement is ignored if (a &lt; c){ System.out.println(&quot;c is the largest number&quot;); } else{ //since a is greater than c, the else statement&#39;s code block is called because the if statement is false System.out.println(&quot;a is the largest number&quot;); } } else{ if (b &lt; c){ System.out.println(&quot;c is the largest number&quot;); } else{ System.out.println(&quot;b is the largest number&quot;); } } . a is the largest number . Switch Case Statements . Switch Case Statements help simplify/manage the complexity of if else statements which can in many circumstance become overly long especially when comparing by a case by case basis. . It works by stating a variety of Case statements which all have conditions. The code blocks under each case are then run if the condition to one of the cases is met. Just like if else statements, Switch Case statements will go down each case to see if a conditon is met. If it is met, the case&#39;s block of code will run and ignore the rest of the Switch Case statements. . In the examples below, the first will be a chain of If Else statements while the second example will use switch case to demonstrate how Switch Case statements simplify multiple If Else statements. . int n = 7; if (n == 4){ System.out.println(&quot;4 is considered unlucky in Japan because of its pronounciation&#39;s (shi) similarity to the word for death.&quot;); } else if (n == 7){ System.out.println(&quot;7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths.&quot;); } else if (n == 8){ System.out.println(&quot;8 is considered a lucky number in China and Japan because of its relation to the word for prosperity in their cultures.&quot;); } else if (n == 9){ System.out.println(&quot;9 is considered unlucky in both China and Japan because both associate it with the word for sorrow, grief, and suffering.&quot;); } else if (n == 13){ System.out.println(&quot;13 is considered unlucky in Western society due to its association with the Christian Bible where the 13th to sit at the Last Supper was Judas who is known as the betrayer of Jesus Christ.&quot;); } . 7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths. . int n = 7; String output; switch (n){ //variable passed in case 4: //condition checked if equals output = &quot;4 is considered unlucky in Japan because of its pronounciation&#39;s (shi) similarity to the word for death.&quot;; break; case 7: output = &quot;7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths.&quot;; break; case 8: output = &quot;8 is considered a lucky number in China and Japan because of its relation to the word for prosperity in their cultures.&quot;; break; case 9: output = &quot;9 is considered unlucky in both China and Japan because both associate it with the word for sorrow, grief, and suffering.&quot;; break; case 13: output = &quot;13 is considered unlucky in Western society due to its association with the Christian Bible where the 13th to sit at the Last Supper was Judas who is known as the betrayer of Jesus Christ.&quot;; break; } System.out.println(output); . 7 is considered lucky in many cultures because its believed to be associated with its propagation as a positive value in folklores and myths. . De Morgan&#39;s Law . De Morgan&#39;s Law states that in a boolean statement, the not operator ! will reverse all the operators in that statement. For instance, true becomes false, false becomes true, and becomes or, or becomes and, &gt; becomes &lt;=, &lt;= becomes &gt;, etc. A tangible example of this is &#39;I will not drink water and eat a table&#39; which means the same thing as &#39;I will either not drink water or eat a table.&#39; . Here&#39;s some examples! . boolean a = true; boolean b = true; . if (!(A &amp;&amp; B)){ System.out.println(&quot;A and B both are false&quot;); } else{ System.out.println(&quot;A and B are true&quot;); } . A and B are true . if (!A || !B){ System.out.println(&quot;A and B both are false&quot;); } else{ System.out.println(&quot;A and B are true&quot;); } . A and B are true . As shown above, both statements are equal given De Morgan&#39;s Law. It&#39;s important because of how they can break inversions as a complement of a complex boolean expression. .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/week%203/2022/09/09/if-and-else-statement.html",
            "relUrl": "/pbl/week%203/2022/09/09/if-and-else-statement.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Focus and Habits",
            "content": "Blog! . Hey, welcome to my focus and habits week 3 blog. There’s a lot of cool insights, goals, and other things here to see. . Yale Video . Laurie Santos’s speach on her new course in Yale Psychology and the Good Life talks about a lot of the mental struggles and stress that students both in college and even in high school, middle schools, and elementary schools face as a result of the pressures of placed upon them by themselves, their parents, their teachers, and even society’s norms and expectations. . Here at Del Norte, almost all of the teacher I know complain in one form or another that student culture is very pushy towards taking APs and high level academic classes. Lot’s of times, just as Santos surveyed, I find that I, and many of my other peers, struggle to actually effectively learn other arguably more important skills and overly burden ourselves. This comes in the form of practical struggles which we’ll face in our adulthood such as independence, communication, and mental coping. In turn, we also over look many of the arguably more happier and fulfilling aspects of our lives. . In my opinion, much of this stress in high school is the result of expectations of going to college. Look at Europe for instance, although it’s cliche to compare American and European institutions, it is undeniable that most European students are relatively far more laxed in getting into university and studying in university. The rigor and academic load is still relatively the same but most of the students find themselves far less pressured than their American counterparts. . To achieve and recognize some of this hapiness, learning and applying the methods to make one happy is essential. Letting go of some excessive or unnecessary expectations can often go a long way towards seeing the fulfilling aspects of our lives. . Among some really important practices she lists are: adequate sleep, time to appreciate and acknowledge gratitude (both self and outside), meditation, exercise, breaks. All of these are practices that can go a long way towards creating a healthier and ultimately more fulfilling life. . There’s definitely a lot more especially her insights regarding her course material and how to live fulfilling lives but I think that can be something I blog another time and watch in my own time to let sink in. . Code Code Code Goals . Applying the mindset that Santos’s speach sort of brings to light, I think as I code, I definitely want to keep in mind that I shouldn’t be coding for the sake of a grade or getting skills to go into a related CS major (as I likely am) but rather I should be coding to develop my interest within the field and seeing its applications as a powerful tool in my life and society. . For one, in CSA, the most important Code Code Code goal I have is being able to use CSA as a way not only to learn AP CSA material for the AP Exam, but also the best practices of coding, how to become a profficient programmer, and developing my creativity as one. This means creating self projects for me and briefly sharing an overview of either what I’m learning or what I’m doing. . Interests/Goals and Plans . In addition to recognizing the learning I gained through the Yale video, I think it would also be helpful to create a list of my interests, goals, and plans to create a clear sense of the things I’d like to accomplish in life. I have a lot of interests and truthfully a lot more than I’m able to commit or get through. But here’s a comprehensive list! . Piano: I’m an avid pianist and love playing songs I listen to Play songs by ear | Practice CM 10 songs | Find more songs | Practice rhythms and scales | . | Traveling: Travel to more countries Paris | Munich | Singapore | Japan | Taiwan | Vietnam | London | Madrid | Barcelona | More! | . | Eat and try more new foods | Travel independently (preferably pay for own trip w/ income) | Travel w/ friends abroad! | Study abroad in university! | . | Cooking: Learn to cook traditional Vietnamese Dishes Pho | Bun Bo Hue | etc. | . | Sandwhiches! (Banh Mi) | Salads | Bentos Learn assortments | Rolls? | . | Bake Cheese cake | Caneles | Chocolate Lava Cake | Flan Cake | Beignet | Chocolate | . | . | Guitar: Learn to play finger style | Learn to play chord progressions | . | Deep Learning AI: Learn Deep Learning Algorithms | Deep Learning Libraries | Applicaitons and Use | . | Quantum Computing: How they work | Grasp understanding of theory | Learn to program them (theoretically) | . | Web Development: Create personal website for myself (fastpages limited) | Learn to create complex HTML/CSS elements | Learn Javascript | . | SciOly: Set up website for SciOly that’s easy to manage? | Learn Fermi Questions Methods | On Hand Knowledge | . | Get Fermi Question Materials | Study for other events | . | Languages: Japanese Grammar | Reading/Listening | . | French | German | . | More: This is by no means a comprehensive list but it does list a lot of the things I’d like to do | .",
            "url": "https://dontran15.github.io/CSAFastPages/human%20prep/week%203/2022/09/09/focus-and-habits.html",
            "relUrl": "/human%20prep/week%203/2022/09/09/focus-and-habits.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "AWS Deployment",
            "content": "",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/week%203/2022/09/09/aws-deployment.html",
            "relUrl": "/pbl/week%203/2022/09/09/aws-deployment.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Week 2 Ticket",
            "content": "Week 2 Assignment and Hacks: Innovation - Using Objects . Score 2.7+/3.0 . Completed code.org | Demonstration of use of objects and classes | Team Project using Spring Boot | Blog Link | Spring Boot Java Project Repo | . Hacks . Code.org . . Using Objects . Using Objects &amp; Code.Org Learning Shows using objects | Shows extends and inheritance | . | . Other . SpringBoot Project Notebook &amp; Basic Calculators Implements GUI Desktop Application | Implements GUI Web Browser Application | Simple Calculators | . | SpringBoot Project Plan and Team | Personal Plan for Fastpages | .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%202/2022/09/05/week2-ticket.html",
            "relUrl": "/markdown/fastpages/week%202/2022/09/05/week2-ticket.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Spring Boot Progress 1",
            "content": "Our Progress . Woooo so far we’ve created only a basic calculator but we’re hoping to expand upon that when we can. So far we have two versions of a basic calculator, each with its own limitations. . Desktop Application Calculator (Krish and Nicky) . . Krish and Nicky worked together to set up a Desktop GUI that implemented a calculator using JFrame and Springboot. At its core, it simply takes two numbers which the user inputs and a function that the user specifies to perform a mathematical operation and output the value. . Some limitations include: a lack of practical usability as a UI, limits to only two numbers being computed at a time, only one operator/function being able to be used at a time. . Some pros include: a clean GUI that is accurate and does not need to interface with Spring’s web application programs, can perform relatively complex mathematical operations due to its ease of accessibility to Java’s math library. . Some improvements: preferably a better GUI that gives the user a better range of options, maybe more operations, performing multiple operations at a time . Web Browser Application (Don and Nathan) . . Don and Nathan worked together to set up a Web Browser Application that works as a very basic calculator that takes a string as an input. It then performs the operations it sees in the string on each of the values. It uses Spring Boot and MVC to interface the html output with the actual logic. . Using MVC, we have the html template that serves as the basis of the page for the calculator with the buttons, the text input, and the output. Next, we have the logic which is in Calculator.java and that essentially takes in a userInput string and parses it and applies the operations. Finally, we have the controller which is in the file CalcController and that passes the userinput from the html form the user submits into the Calculator.java logic which returns a string output. That is put into the model that Spring Boot provides which then returns the form to the browser and displays the output. . Some limitations include: a disregard for order of operations, very specific syntax has to be used most of the time or else it wont output at all or will output what the user outputted, its limited only to the four basic operations, the GUI only has a string user input and an = sign button that functions. . Some pros include: it can perform multiple operations at a time, has a functioning GUI that is clean, runs on a web browser, is easy to visualize . Some improvements include: Creating functioning buttons in its GUI, accounting for order of operations (likely to try to use tree data structure in order to implement this), more operators and functions . Future Work . To make a well made calculator and preferably to expand it as a tool to help with math problems, we’re likely to move towards the web development side of Spring Boot. It’s tools provide a relatively straightforward method to putting our java programs onto a web browser through its boiler plate code and hopefully that should enable us to focus mainly on the functionality of our web. . Through this, we learned how to use JFRame and also understand how Spring Boot uses MVC to build a webpage using mostly HTML and Java files. .",
            "url": "https://dontran15.github.io/CSAFastPages/spring%20boot/2022/09/05/springboot-report-0.html",
            "relUrl": "/spring%20boot/2022/09/05/springboot-report-0.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Spring Boot Project Plan",
            "content": "Our Goal . Our hope is to learn how to use Spring Boot as both a Desktop Application and Web Application tool. We also hope that the project we make will somewhat serve to be productive to us. . As a result, we’ve decided that if we go on with this project we’d make a web application related to studying and practicing for different school subjects. For now, we’ve decided math might be best because of how algorithmic it typically is. The first project we’ll plan on doing is creating a calculator with an interface to get used to using spring. Then we’ll hope to improve our calculator and also work on more comprehensive problem solving and how to help us study for math. . We may upload our previous code related to math and hopefully find ways to interface them with SpringBoot. . Although this is not a comprehensive plan of what we will or could do, we hope this post will serve as a baseline as to what we can do and may be able to use Spring Boot for. The most important thing is creating a project that we can all work on together as teammates while learning the intricacies of backend and to a small degree front end development. . Team Makeup . Of course it’d be great if everyone could learn all the parts but delegating some roles would definitely help ease our work load and mark out clear responsibilities. We’re hoping to divide the work as so: . Don: Spring Boot and MVC | Krish: Calculator Functionality (parsing, functions, etc.) | Nicky: Calculator Functionality (parsing, functions, etc.) | Nathan: HTML/CSS, Calculator Functionality (compatibility with Spring Boot) | .",
            "url": "https://dontran15.github.io/CSAFastPages/spring%20boot/2022/09/05/springboot-plan.html",
            "relUrl": "/spring%20boot/2022/09/05/springboot-plan.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Plan for Personal Fastpages",
            "content": "Future Plan For Fastpages! . I&#39;ll update and give a comprehensive plan relatively soon. .",
            "url": "https://dontran15.github.io/CSAFastPages/pbl/week%202/2022/09/05/fastpages-plans.html",
            "relUrl": "/pbl/week%202/2022/09/05/fastpages-plans.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Teddy Bear Factory - Code.org Learning",
            "content": "Object Oriented Programming . Object Oriented Programming (abrreviated as OOP) is a coding paradigm (style in which code is organized) which organizes code into classes and objects. . Java is one of the most popular and well known OOP based languages and is the language I&#39;ll use for my demonstration of my OOP learning. . Factory . I like to think of OOP as factories (commonly it&#39;s likened to blueprints but I like my analogy better &gt;:) . Imagine you are an entrepreneur, fresh out of college (or maybe you dropped out) and you&#39;re ready to show the world your brilliant ideas and products. . Creating a Class (Factory) . Let&#39;s say you buy a factory. Here&#39;s your new factory: . //Creates a class public class Factory{ } . Variables and Constructor (Factory Data) . Pretty empty huh. Let&#39;s try making a frame work to plan out your factory and statistics we&#39;ll need to keep track of as we obtain equipment and come up with what it&#39;s going to produce. . To do this, we&#39;ll initialize variables, create a constructor, and make an empty function meant to be the instructions for what the factory needs to produce. . import java.util.ArrayList; //Import ArrayList class public class Factory{ //Initialize Variables: Variables for our generic Factory String owner; static double factoryProfit; //static variable -&gt; belongs to class (our factories); the profit of our factories //Constructer (more details later) public Factory(String owner){ //When this constructer is called, we will have to fill out some info which will be assigned to our new factory&#39;s (object&#39;s) data this.owner = owner; } public void production(int days){ //Function (return type: void); produces our product } } . Classes Part 2 (Products &amp; Product Data) . Now, we can&#39;t just start your factory if it doesn&#39;t make anything. Let&#39;s say you decide on starting out with toy production. . Let&#39;s create a toy class (our blueprint) to build toys! . //Create Toy class public class Toy{ ArrayList&lt;String&gt; materials = new ArrayList(); double cost; double price; //Toy Constructor public Toy(ArrayList&lt;String&gt; materials, double cost, double price){ this.materials = materials; this.cost = cost; this.price = price; } public void function(){ //Function of the toy } } . Inheritance (Teddy Bears) . Good work! We&#39;re almost there. As a suggestion, Teddy Bears are quite popular! Let&#39;s consider making that your first product. . Below, let&#39;s create a child class that inherits its properties from our toy class! We call super to access the superclass&#39;s constructor. . //TeddyBear is a child class of the parent class Toy (inherits all of the variables and methods of Toy) public class TeddyBear extends Toy { //Unique variable for TeddyBear String color; //TeddyBear constructor public TeddyBear(ArrayList&lt;String&gt; materials, double cost, double price, String color){ super(materials, cost, price); //super() references all the parent classes&#39; constructors this.color = color; } public void function(){ System.out.println(&quot;Woah a teddy bear! It&#39;s &quot; + color + &quot; and gives great hugs!&quot;); } public static TeddyBear createBrownTeddyBear(){ //Static method that instantiates (creates) a TeddyBear object w/ TeddyBear return type //Specifies the materials, price, and cost of a a &#39;Brown&#39; TeddyBear ArrayList&lt;String&gt; materials = new ArrayList&lt;String&gt;(); materials.add(&quot;Cotton&quot;); materials.add(&quot;Mohair&quot;); materials.add(&quot;Ribbon&quot;); materials.add(&quot;Plastic Eyes&quot;); double cost = 5.00; double price = 10.00; //Instantiates an object of itself (almost like a factory) and returns the object TeddyBear teddyBear = new TeddyBear(materials, cost, price, &quot;Brown&quot;); return teddyBear; } } . Instantiation (Creating a Factory!) . Now that we have our product, a framework for our factory, and hopefully a little funding, we can start producing our teddy bears (might be in pretty big debt though &gt;:) . Here&#39;s our teddy bear factory and an instantiation of this factory. Then we will call the production function to start producing teddy bears and make some profit &gt;:) Let&#39;s say our factory makes 5 bears a day. We&#39;ll also make a method to calculate the profit of all the functions we have and instantiate an ArrayList to keep track of how many TeddyBears we have. . public class TeddyBearFactory extends Factory{ //Creates child class for TeddyBearFactory and constructor w/ super() method static ArrayList&lt;TeddyBear&gt; teddyBears = new ArrayList&lt;TeddyBear&gt;(); //List collection of all the TeddyBear objects, static so universal list belonging to class public TeddyBearFactory(String owner){ super(owner); } public void production(int days){ //Production of teddyBears over a certain number of days for(int i = 0; i &lt; days*5; i++){ //For loop that repeatedly calls createBrownTeddyBear() and adds to static list TeddyBear teddyBear = TeddyBear.createBrownTeddyBear(); teddyBears.add(teddyBear); } } public static void calculateProfit(){//Function to calculate universal profit among any given amount of teddy bear factories for (int i = 0; i &lt; teddyBears.size(); i++){ //For loop factoryProfit += (teddyBears.get(i).price - teddyBears.get(i).cost); //Accesses static arraylist belonging to TeddyBearFactory and each object&#39;s properties } } } . Main Method (Production) . Now that we have the building blocks to open our first toy factory, let&#39;s create (instantiate) one and get it running! . public class Main{ public static void main(String[] args){ TeddyBearFactory teddyBearFactory0 = new TeddyBearFactory(&quot;You&quot;); //Instantiates our very first TeddyBearFactory teddyBearFactory0.production(3); //Calls production() method of our new factory with the argument of 3 days passed in TeddyBearFactory.calculateProfit(); //Calculates profit of our new factory after 3 days of production System.out.println(&quot;Here&#39;s how many Brown Teddy Bears we&#39;ve produced: &quot; + TeddyBearFactory.teddyBears.size()); System.out.println(&quot;Here&#39;s our profit over three days: &quot; + TeddyBearFactory.factoryProfit); } } Main.main(null); . Here&#39;s how many Brown Teddy Bears we&#39;ve produced: 15 Here&#39;s our profit over three days: 75.0 . More Production . Let&#39;s open some new factories for some more sweet profit &gt;:) We&#39;ll count our total profit from the previous three days and the next 3 days. . public class Main{ public static void main(String[] args){ TeddyBearFactory teddyBearFactory0 = new TeddyBearFactory(&quot;You&quot;); //instantiates our very first TeddyBearFactory TeddyBearFactory teddyBearFactory1 = new TeddyBearFactory(&quot;You&quot;); //instantiates our a second TeddyBearFactory TeddyBearFactory teddyBearFactory2 = new TeddyBearFactory(&quot;You&quot;); //instantiates a third TeddyBearFactory teddyBearFactory0.production(3); //Calls production() method of our new factory with the argument of 3 days passed in teddyBearFactory1.production(3); //Calls production() method of our new factory with the argument of 3 days passed in teddyBearFactory2.production(3); //Calls production() method of our new factory with the argument of 3 days passed in TeddyBearFactory.calculateProfit(); //Calculates profit of our new factory after 3 days of production System.out.println(&quot;Here&#39;s how many Brown Teddy Bears we&#39;ve produced with all our factories: &quot; + TeddyBearFactory.teddyBears.size()); System.out.println(&quot;Here&#39;s our profit: &quot; + TeddyBearFactory.factoryProfit); } } Main.main(null); . Here&#39;s how many Brown Teddy Bears we&#39;ve produced with all our factories: 60 Here&#39;s our profit: 375.0 . Takeaways . Object Oriented Programming is quite powerful. It allows programmer to create archetypes through the concept of classes which they can then expand upon through inheritance. Additionally, it&#39;s abstraction of programming into objects allow code to be organized and modeled after the real world. . In my example, I used a factory to represent that classes act as a factory (slightly redundant). Every non-static method or variable is a blueprint within them that serve as instructions to produce a certain good (object) with its own functions and properties. Every static method or variable is a function or property of the factory itself which the factory can call upon. . Constructors are the initial instructions that are run in order to instantiate objects. This is the bulk of the factory&#39;s (class&#39;s) blueprint to create goods (objects). Sometimes this factory can also cause an object to run methods in when it&#39;s instantiating the object. For instance, an iPhone goes through quality control before it is packaged and sent as a final product. . Classes can also instantiate themselves so long as the constructor is called. In a factory example, a factory (class) producing electricity (object) can also use the electricity to power a toaster in the factory (method using electricity). This is one of the many examples of how unlike procedural programming which usually follows a set path of code, OOP enables programmers to utilize code from anywhere even outside the main() function. This leads into the topic of abstraction which I&#39;ll talk about sometime in the future. . All in all, OOP is pretty cool! .",
            "url": "https://dontran15.github.io/CSAFastPages/college%20board/java/week%202/2022/09/03/oop-and-using-objects.html",
            "relUrl": "/college%20board/java/week%202/2022/09/03/oop-and-using-objects.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Week 1 Ticket",
            "content": "Week 1 Assignment and Hacks: Innovation - Primitives . Canvas Requirements . Code.org . Lessons 1-5 Completed for OOP Unit | . Productive Blogging . Primitives Java Notebook . Demonstrates primitives use | . Bash Notebook . Demonstrates bash use and checks for installations and versions | Verifies kernels | Notes on bash and its uses (to be added) | . Fastpages notes to go along with Tech Talks and Fastpages notes to go along with College Board learning . Created PBL and College Board Pages to organize learning PBL sorted by week to see progress and organize tools and material | College Board sorted by unit and content covered | . | . Others . Salary Calculator using primitives | Definite Integral Calculator for Polynomials | Use of Tags/Categories | .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%201/2022/08/29/week1-ticket.html",
            "relUrl": "/markdown/fastpages/week%201/2022/08/29/week1-ticket.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Vectors vs. Scalars",
            "content": "Vectors vs. Scalars . Vectors Quantities . Vectors quantities are, in the context of physics, quantifiable values that have a magnitude (quantifiable value) and direction that indicates its movment. . Examples include: . velocity | displacement | weight | acceleration | force | pressure | momentum | gravity | drag | etc. | . Scalar Quantities . Scalar quantities are, in the context of physics, quantifiable values that have only a magnitude without regard to direction but indicates movement. . Examples include: . Distance | Speed | Energy | Mass | Density | Power | Length, Area, Volume | Time | Temperature | Work | etc. | . Summary/Concluding Thoughts . Vectors and Scalars are incredibly important values that I need to remember and distinguish between when dealing with physics. .",
            "url": "https://dontran15.github.io/CSAFastPages/physics/2022/08/28/vectorscalar.html",
            "relUrl": "/physics/2022/08/28/vectorscalar.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "An Integral Calculator for Polynomials",
            "content": "An Integral Calculator for Polynomials . About This Calculator . It&#39;s pretty straight forward in methodology. It takes in arguements for the upper bound, lower bound, and polynomial function from the user and then makes an estimate (which is pretty accurate) the value of the definite interval of that polynomial function using the upper and lower bounds. . The Algorithm . Simply explained, the polynomial function entered is in a string format and therefore needs to be parsed to be able convert the string into mathematical semantics. The algorithm then creates two ArrayLists that records the power and coefficient of each term respectively. The lists are then passed through a function which has a loop which calculates the output of the polynomial function for a given term of x. Being able to calculate the value of the polynomial function now, the algorithm uses the trapezoid method of estimation for definite integrals for a 1,000,000 intervals in a loop. The answer is then outputted. . Limitations . The user input unfortunately has to be very strict in formatting where each term must specify +/- ax^n where +/- denotes a positive or negative term, a denotes the coefficient, and n denotes the power of the term. It can also only calculate polynomials. Can I code it to include more functions and less strict formatting? Theoretically, yes. In actuality, I&#39;m lazy and parsing is way too much work to code code code so we&#39;re stuck with strict polynomial inputs only. Ok have fun. Or use SymboLab 💀 . import java.util.ArrayList; public class Polynomial { ArrayList&lt;Integer&gt; powersList = new ArrayList&lt;&gt;(); ArrayList&lt;Integer&gt; coefficientsList = new ArrayList&lt;&gt;(); public static Polynomial parse (String input) throws Exception { Polynomial polynomial = new Polynomial(); for (int i = 0; i &lt; input.length();){ int xIndex = input.indexOf(&quot;x&quot;, i); if (xIndex == -1){ throw new Exception(&quot;Invalid input, x variable expected&quot;); } String coeffString = input.substring(i, xIndex); int coefficient = Integer.valueOf(coeffString); polynomial.coefficientsList.add(coefficient); i = xIndex + 2; int nextCoeffSign = 1; int pIndexPos = input.indexOf(&quot;+&quot;, i); int pIndexNeg = input.indexOf(&quot;-&quot;, i); int pIndex = pIndexPos; if (pIndexNeg != -1 &amp;&amp; (pIndexNeg &lt; pIndexPos || pIndex == -1)) { pIndex = pIndexNeg; nextCoeffSign = -1; } if (pIndex == -1){ pIndex = input.length(); } String powString = input.substring(i, pIndex); int power = Integer.valueOf(powString); polynomial.powersList.add(power); if (nextCoeffSign == -1){ i = pIndex; } else { i = pIndex + 1; } } return polynomial; } public double polynomialOutput(double x){ double output = 0; for (int i = 0; i &lt; powersList.size(); i++){ output += coefficientsList.get(i) * Math.pow(x, powersList.get(i)); } return output; } public double polynomialIntegralCalc(double lowerBound, double upperBound){ int iterations = 1000000; double interval = (upperBound - lowerBound)/iterations; double output = 0; for (int i = 0; i &lt; iterations; i++) { double x1 = lowerBound + interval*i; double x2 = x1 + interval; double lowerOutput = polynomialOutput(x1); double upperOutput = polynomialOutput(x2); double trapezoidArea = (upperOutput+lowerOutput)*interval/2; output += trapezoidArea; } return output; } } . import java.util.Scanner; public class PolynomialIntegralCalculator { public static void happyCase() throws Exception { Scanner userInput = new Scanner(System.in); System.out.println(&quot;Type your polynomial: must be single variable (x) polynomial with no spaces and all terms with powers specified {Ex: -5x^4+10x^1-2x^0}&quot;); String input = userInput.nextLine(); System.out.println(&quot;Polynomial Function: &quot; + input); System.out.println(&quot;Type the lower bound of the integral&quot;); double lowerBound = Double.valueOf(userInput.nextLine().trim()); System.out.println(&quot;Lower Bound: &quot; + String.valueOf(lowerBound)); System.out.println(&quot;Type the upper bound of the integral&quot;); double upperBound = Double.valueOf(userInput.nextLine().trim()); System.out.println(&quot;Higher Bound: &quot; + String.valueOf(upperBound)); userInput.close(); Polynomial polynomial = Polynomial.parse(input.trim()); System.out.println(polynomial.polynomialIntegralCalc(lowerBound, upperBound)); } public static void main(String[] args) throws Exception{ PolynomialIntegralCalculator.happyCase(); } } PolynomialIntegralCalculator.main(null); . Type your polynomial: must be single variable (x) polynomial with no spaces and all terms with powers specified {Ex: -5x^4+10x^1-2x^0} Polynomial Function: -5x^4+10x^1 Type the lower bound of the integral Lower Bound: 0.0 Type the upper bound of the integral Higher Bound: 2.0 -12.000000000053387 .",
            "url": "https://dontran15.github.io/CSAFastPages/java/object-oriented/primitives/college%20board/week%201/2022/08/26/polynomial-integral-calculator.html",
            "relUrl": "/java/object-oriented/primitives/college%20board/week%201/2022/08/26/polynomial-integral-calculator.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Bash",
            "content": "Bash Checks . This notebook is to check if bash is running well on my system and all the other necessary tools I&#39;ll need for this course are also running smoothly. . Kernels . To check if my kernels are installed, I can run the command &quot;jupyter kernelspec list&quot; . echo &quot;Using jupyter kernelspec list to see if all the necessary kernals are installed.&quot; jupyter kernelspec list . Using jupyter kernelspec list to see if all the necessary kernals are installed. Available kernels: bash /Users/don/Library/Jupyter/kernels/bash java /Users/don/Library/Jupyter/kernels/java javascript /Users/don/Library/Jupyter/kernels/javascript python3 /Users/don/opt/anaconda3/share/jupyter/kernels/python3 . Checking Conda . Let&#39;s confirm if conda is running with conda list. . conda list . # packages in environment at /Users/don/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . Programming Languages and Anaconda Version Check . Now, let&#39;s check the versions of Python, Java (Java itself and the JDK), Javascript, Bash, Anaconda, Jupyter . echo &quot;Python and Python 2 Versions:&quot; python --version python2 --version #Checks Java and JDK versions echo &quot;Java and JDK Versions:&quot; java --version javac --version #Checks JS version echo &quot;JS Version:&quot; npm --version #Checks for conda version echo &quot;Anaconda Version:&quot; conda --version #Checks for jupyter version echo &quot;Jupyter Version:&quot; jupyter --version . Python and Python 2 Versions: Python 3.9.12 Python 2.7.18 Java and JDK Versions: java 18.0.1.1 2022-04-22 Java(TM) SE Runtime Environment (build 18.0.1.1+2-6) Java HotSpot(TM) 64-Bit Server VM (build 18.0.1.1+2-6, mixed mode, sharing) javac 18.0.1.1 JS Version: 6.4.1 Anaconda Version: conda 4.13.0 Jupyter Version: Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 . Installations . Automization of developer installations via bash! Provided anaconda is already installed via Linux or online. . echo(&quot;Update and upgrade brew given one&#39;s device already has Brew: &quot;) brew list brew update brew upgrade echo(&quot;Complete!&quot;) echo(&quot;Installing git through brew: &quot;) brew install git echo(&quot;Complete!&quot;) echo(&quot;Python installation via brew: &quot;) brew install python echo(&quot;Complete!&quot;) echo(&quot;Java installation via brew: &quot;) brew install java echo(&quot;Complete!&quot;) echo(&quot;Jupyter installation via conda: &quot;) conda install jupyter echo(&quot;Complete!&quot;) echo(&quot;Bash Kernel installation via Python: &quot;) pip install bash_kernel python -m bash_kernel.install echo(&quot;Complete!&quot;) echo(&quot;NodeJS and javascript installation via conda&quot;) conda install nodejs npm -version npm install -g ijavascript ijsinstall echo(&quot;Complete!&quot;) echo(&quot;Installing ijava kernal via python: &quot;) wget https://github.com/SpencerPark/IJava/releases/download/v1.3.0/ijava-1.3.0.zip unzip ijava-1.3.0.zip python install.py --user echo(&quot;Complete!&quot;) . Bash Notes .",
            "url": "https://dontran15.github.io/CSAFastPages/java/bash/week%201/2022/08/24/bash.html",
            "relUrl": "/java/bash/week%201/2022/08/24/bash.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Primitives",
            "content": "Primitives Data Type Notes . Java is a data type language and all data is defined with explicit use. This can be in the form of primitive data types or non primitive data types (objects/wrapper classes). . Primitives . Primitives are fundemental data types in Java that solely hold certain data types and lack any methods. Among the most basic primitives there are: . Booleans (true or false values) boolean | . | Characters (individual characters) char | . | Integers (integer numbers and its representations) int | byte | long | short | . | Floating-Points (decimals) float | double | . | . The most commonly used ones in java are boolean, char, int, and double. . Non-Primitives . Because Java likes everything to be a class, all data types, including forms of the primitives, are iterated as classes. The difference between primitives and non-primitives however is that non-primitves are able to perform method calls. Among some examples of Non-Primitives are: . String | ArrayList | any other object that may take the form of data | . Applications . Below is a demonstration of the use of some primitives and a string in Java. (examples include int, double, boolean, and String) . public class Primitives { public static void main (String[] args) { int integer = 55; // This is an integer, this is a primitive data type which holds integer values double doub = 10.92; // This is a double, this is a primitive data type which holds decimal values boolean bool = true; // This is a boolean, this is a primitive data type which holds the two values true or false String string = &quot;This is a string&quot;; // This is a String, this is a wrapper class data type which an array of characters System.out.println(&quot;This is an integer: &quot; + integer); System.out.println(&quot;This is an double: &quot; + doub); System.out.println(&quot;This is an bool: &quot; + bool); System.out.println(&quot;This is an string: &quot; + string); } } Primitives.main(null); . This is an integer: 55 This is an double: 10.92 This is an bool: true This is an string: This is a string . Salary Raise Calculator . About This Calculator . This is a calculator that demonstrates implementations of boolean, int, double, and String within the code. . Do you ever struggle to calculate your salary raise or are just too lazy to plug those large numbers into a calculator? Then, welcome to a salary raise calculator where your only job is to input your old salary and the amount your salary has been raised by. . Not only does it calculate it for you it calcualate your new salary but also the manages the percent raise of your salary before informing you whether you&#39;ve been scammed in your raise and that your employer is not appreciating you enough. I would encourage you to go on strike but unfortunately I&#39;m a code code coder and not a strike strike striker so I don&#39;t have any advice for that. Good luck! . How It Works . A scanner is created to read the inputs of users and prompts users to enter double type inputs for the users salary and raise which is then used to calculate the new salary by adding the two values together. The percent increase is calculated by dividing the calculated new salary by the old salary and multiplied by 100 before being subtracted by 100. The in code comments go more in detail with what each line of code does. . Use of Primitives . Integers . Outputs percent increase as a raise | . Doubles . Salaries are taken in as double values which does double division and casted as an integer output when calculating the percent | . Boolean . Uses booleans to check if the output of the percent increase is good or not returning true for a percent value that is good | . String . Outputs string message which includes all the values computed or collected above into a message that outputs new salary (double), precent increase (int), and quality of raise (boolean) | . Contributions . This code was made in java in conjuction with fellow coder Nathan using pair programming. . import java.util.Scanner; public class SalaryRaiseCalculator{ public static void main(String[] args) { Scanner salaryInput = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Enter a salary: &quot;); // salary input message prompt double salary = salaryInput.nextDouble(); // Read user input double oldSalary = salary; // Records oldsalary for percent calculation later System.out.println(&quot;Enter your pay raise: &quot;); // raise input message prompt double raise = salaryInput.nextDouble(); // Read user input salary += raise; // The inputted number of &quot;raise&quot; is added onto the original inputted &quot;salary&quot; int percent = (int) (100*(salary / oldSalary)-100); // Calculates percent raise salaryInput.close(); //Closes Scanner object salaryInput; stops reading text inputs boolean payraisequality; String message; if(percent &gt; 5){ payraisequality = true; } else{ payraisequality = false; } if (payraisequality == true){ message = &quot;You got a good pay raise!&quot;; } else{ message = &quot;You got a bad pay raise!&quot;; } System.out.println(&quot;Your final salary is: &quot; + salary + &quot;, which is around a &quot; + percent + &quot;% raise from your original salary. &quot; + message); // Output user input } } SalaryRaiseCalculator.main(null); . Enter a salary: Enter your pay raise: Your final salary is: 1020000.0, which is around a 2% raise from your original salary. You got a bad pay raise! .",
            "url": "https://dontran15.github.io/CSAFastPages/java/primitives/week%201/college%20board/pbl/2022/08/23/primitives.html",
            "relUrl": "/java/primitives/week%201/college%20board/pbl/2022/08/23/primitives.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Week 0 Ticket",
            "content": "Hacks Part 1 . Link to Personal Fastpages / Github pages running on github.io | Link to a new post in Fastpages project | Link to first Python Jupter notebook printing “Hello” | Link to first Java Jupter notebook printing “Hello” | Screenshot image of Fastpages project using VSCode IDE . | Link to GitHub Insights | . Hacks Part 2 . . Link to commit of minor change of Java Project | Seed: Link to commit change to fix Birds page dropdown | Seed: Link to commit change to fix Java 17 compiling | .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%200/2022/08/22/week0-ticket.html",
            "relUrl": "/markdown/fastpages/week%200/2022/08/22/week0-ticket.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Graphical Analysis Physics Lab1",
            "content": "Don Tran . 09.04.2022 . AP Physics C: Mechanics . Purpose . For this lab, we are going to need to measure the thickness, radius, and mass of each of the 5 disks. To collect the data, we’ll need to collect 5 disks of different radius of the same thickness and material, a ruler/meter stick, and a scale. . For the thickness, because each of the disks are the same thickness, we only need to measure one. We can use the biggest one (because it is the easiest to fold) and fold it 6 times. Then, we can measure the thickness of the disk and divide it by the number of layers (64 layers for 6 folds). . For the radius, we use the ruler/meter stick and measure from the center of each disk to the edge. . For the mass, we weigh each disk on a scale and record their weights in grams. . The precision of the meter stick/ruler was in millimeters. Given the meter stick/ruler, the data is measured all measurements are measured in centimeters with markers representing each tenth of a centimeter which is a millimeter. Therefore the precision of the measurements are in millimeters. . # . Data . Aluminum Disks Radius and Mass . Disk . Radius (mm) . Mass (g) . . r2 (mm2) . . Disk 1 (Largest) | 72.2 mm | .72 g | | 5212.84 | . Disk 2 (2nd Largest) | 52.2 mm | .38 g | | 2724.84 | . Disk 3 (3rd Largest) | 43.5 mm | .25 g | | 1892.25 | . Disk 4 (4th Largest) | 31.8 mm | .13 g | | 1011.24 | . Disk 5 (5th Largest) | 23.2 mm | .07 g | | 538.24 | . Graph . Graph 1: Radius vs Mass Quadratic Graph . . Graph 1 is non-linear because it’s a quadratic graph which shows a clear curve of the data. The equation for the graph is: . (y = 0.000141609 x^{2} - 0.000156579 x - 0.00530521) . Graph 2: Radius2 vs Mass Linearized Graph . . Graph 2 is a linear graph with the equation for its line of best fit being: . y = 0.000140016 ( frac{g}{cm^{2}}) * x - 0.00866072 (g) . Analysis . 1) What is the independent variable in your y = mx +b formula? . The independent variable of my line of best fit function is x which represents the value of (r^{2}) of the disks. . 2) What does the slope represent in your y = mx +b formula? Show dimensionally that indeed that is what your slope represents and that the formula is valid dimensionally. . The slope in the formula represents ( pi times rho times text{ h}), or pi (which has no dimensions) x density (in g/mm^3) x h (in cm) which is dimensionally measured as (g/cm^{2}). Dimensionally we know the slope is in (g/mm^{2}) and that this equation is dimensionally valid because: . y = mx + b is measured in the units where y is the mass and x is measured in (mm^{2}). . Therefore, in y = mx + b using its dimensions, g = slope * (cm^{2}) + g and therefore, slope = (g/cm) and the equation is dimensionally valid. . 3) Should the “b” in your y = mx + b formula be zero? Explain your answer. . No, b in the line of best fit formula should theoretically be zero because if the radius of the disk is 0 mm, the mass by intuition would also have to be 0 grams because the area that the disk covers is nonexistent. Therefore, it is implausible that b should be a negative value because the weight of the disks can’t be negative or any other value besides zero when there is no radius. . 4) Measure/estimate the “thickness” of your cylinders. Use that value to find the experimental density of your cylinders. Find a percent difference between your found density and the actual density. The actual material is aluminum. . Cylinder thickness (h): 1/64 mm = 0.015625 mm . ( rho = frac{m}{V}), ( rho = frac{m}{ pi r^{2}h}), ( rho times pi times h = m/r^{2}) . ( pi times rho times h = slope = 0.000140 frac{g}{mm^{2}} ) . ( rho = 0.000140 frac{g}{mm^{2}} times frac{1}{1/64 mm times pi} = 0.002852 frac{g}{mm^{3}} times frac{1000 mm^{3}}{1 cm^{3}} = 2.852 frac{g}{cm^{3}} ) . Actual aluminum density: (2.7 frac{g}{cm^{3}}) . ( % Error = 100 % cdot frac{(Experimental - Theoretical)}{ text{Theoretical}}) . ( % Error = 100 % cdot frac{2.852 frac{g}{cm^{3}} - 2.7 frac{g}{cm^{3}}}{2.7 frac{g}{cm^{3}}} = 5.63 %) . 5) errors. Make sure you explain why your number is bigger or smaller than (if positive or negative difference.) . In the experiment, some possible errors might have been due to outside effects such as thermal expansion causing a larger radius compared to the mass, thereby raising the slope value and making the density larger than it actually is. Another possible cause for error might have been imprecise measuring devices when measuring the thickness which was still partly too large to accurately measure, especially given its thinness. One other factor may have been that the disks weren’t perfect circles causing our radius measurements to be overestimated thereby raising the slope value and in turn the density.. . Multiple Choice Questions . 1. You perform the same experiment, but this time you plot a linear relationship between mass and the circumference of the disks rather than the radius. What is the slope of the linear plot? . A. 4π2 r2 . B. 2πr2 . C. (h rho/2 pi) . D. 1/4π . E. (h rho/4 pi) . (c = 2 pi r) . c is proportional to r and r2 is proportional to m, therefore c2 is proportional to m. To linearize: . (c^{2} = (2 pi r)^{2} = 4 pi^{2}r^{2} ) . ( rho = m/v ), (m = rho v) . (m = rho times 2 pi r^{2}), ( rho = frac{m}{ pi r^{2}h} cdot frac{4 pi}{4 pi}) , ( rho = frac{m cdot 4 pi}{4 pi^{2}r^{2}h}), ( rho = frac{m}{c^{2}} cdot frac{4 pi}{h}), ( rho = frac{4 pi*slope}{h}), (slope = frac{ rho h}{4 pi}) . Therefore the slope of the linear plot is h( rho)/4π. Answer E. . 2. SKIP . 3. Consider an experiment in which a student measures the mass and diameter of 10 different-sized spheres, all made of the same material of uniform density ρ. For this student to create a linear graph relating the mass of the sphere to its radius r, the student would need to plot mass m versus which quantity: . A. r . B. r2 . C. r3 . D. r4 . E. r1/2 . (m = varrho v), (v = frac{4}{3} pi r^{3}), (m = varrho cdot frac{4}{3} pi r^{3}), ( varrho cdot frac{4}{3} pi = frac{m}{r^{3}}) . Therefore the student would plot mass m versus r3 to linearize the data. Answer: C. . Synthesis Questions . 1. In this experiment, if we had used disks with a greater thickness, would the slope of your best fit line have been different? Would your experimental value for density be the same? Explain. . Yes, the slope of my best fit line would not have been different because the greater thickness of all the disks would have caused the mass of the disks to be greater. Therefore, since mass was the y-axis, the ratio between the mass and r2 would have also been greater causing the slope of the line of best fit to increase. . The experimental density would also have been different because the thickness of the disks would have been much easier to measure without requiring us to fold it since folding it still left air pockets that were unaccounted for likely overestimating the height. Therefore, in the relationship between ( pi times rho times h = slope) to be more accurate. . 2. How would your graph of m versus r2 be different if you had used disks of the same . thickness, but made out of steel? Draw a second line on your m versus r2 plot that . represents disks made of steel. . The graph of m vs r2 would have a much higher slope if the disks of the same thickness were made of steel instead. This is because steel has a higher density than aluminum thereby increasing the mass of the disks and causing the ratio between the mass and radius to be higher. . Graph of Experimental Aluminum Disk Graph vs Theoretical Steel Disk Graph . . Black represents the line of best fit for the aluminum plates’ m and r2. Red represents the theoretical line of best fit for the relationship between m and r2. . ** ** . 3. Another group of students has acquired data for the exact same experiment; however, their disks are made of an unknown material that they are trying to determine. The group’s m versus r2 data produced a line of best fit with slope equal to 122 kg/m2. Each disk they measured had the same 0.5 cm thickness. Calculate the density of the unknown material and use the table below to help determine what material their disks are made of. . Material Density (g/cm3) . Magnesium | 1.7 | . Aluminum | 2.7 | . Copper | 8.3 to 9.0 | . Gold | 19.3 | . Iron | 7.8 | . Lead | 11.3 | . Platinum | 21.4 | . Uranium | 18.7 | . Osmium | 22.5 | . ( rho h pi = slope = 122 kg/m^{2}, 0.5 cm cdot frac{1 m}{100 cm} = 0.005 m, rho pi*0.005 m = 122 kg/m^{2}) . ( rho = frac{122 kg/m^{2}}{0.005 m cdot pi} = 7800 kg/m^{3} cdot frac{1 m^{3}}{(100 cm)^{3}} cdot frac{1000 g{}^{}}{1 kg} = 7.8 g/cm^{3}) . The calculated density according to the student’s data comes out to be equal to that of the density of iron and therefore the unknown material that the disks are made from must be iron. .",
            "url": "https://dontran15.github.io/CSAFastPages/2022/08/22/graphical-analysis-physics-lab1.html",
            "relUrl": "/2022/08/22/graphical-analysis-physics-lab1.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Stein Rhetorical Precis",
            "content": "Don Tran . Mrs. DaFoe . AP English Language . 21 August 2022 . Rhetorical Précis Joel Stein . In his Op-Ed, “We’re teaching kids to follow their dreams. Maybe teach them to be helpful instead,” Joel Stein, author of “In Defense of Elitism: Why I’m Better Than You and You’re Better Than Someone Who Didn’t Buy This Book,” asserts that rather than being taught the importance of toiling to help others, American society teaches children to reach for dreams of personal achievement, thereby creating a dangerous mindset. To help his audience conceptualize American society’s emphasis on individual achievement, Stein notes examples of students’ speeches during his son’s class, living wax museum. In one instance he observes, Stein remarks, “Ruth Ginsburg did not toil to be one of the first female Supreme Court justices; she fought to expand the rights of all women.” Stein uses the student’s speech regarding Ginsburg as an example of the failure of students to recognize Ginsburg’s motives for working hard to become a Supreme Court Justice. He notes that her goal was not to become a Supreme Court Justice, as he implies the student pointed out, instead, he emphasizes the idea that she labored herself to fight for women’s rights. As a result, Stein’s example provides evidence for his audience that students fail to recognize the motives of the hard work that famous figures endured to help others and instead focus on the personal achievements that those figures attained. By highlighting this, he helps lead his readers to conclude that children, like the students he observed, are focused on dreaming to attain personal achievements just as the important figures they chose did, rather than harboring genuine desires to contribute to creating a better world. By establishing that students are focused on attaining individualistic dreams, Stein suggests that raising children to believe in this way is ultimately dangerous for society through an allusion. At the end of his op-ed, he notes that children who seek individualistic accomplishments will create a future generation that “will be asking not what can they do for their country, but rather what the country can do for them.” In this line, he makes a clear allusion to President John F. Kennedy’s inaugural address, where he called upon Americans not to seek what their country could do for them but rather seek what they could do for their country to promote his New Frontier policies which depended on the cooperation and effort of the American people. By alluding to Kennedy, an integral figure of American history, and the society he attempted to promote, Stein highlights to his audience that if children continue to be raised without a genuine desire to help people, society will ultimately follow a dangerous direction away from a society that works to build itself together. By alluding to a reversal of the ideas Kennedy remarks in his address, Stein infers that American society will also oppositely fail to succeed. All together, Stein creates a constructive tone as he attempts to warn parents, teachers and adults that kids must learn to seek to help one another or else American society will be filled with the conflict of individualism. .",
            "url": "https://dontran15.github.io/CSAFastPages/2022/08/21/stein-rhetorical-precis.html",
            "relUrl": "/2022/08/21/stein-rhetorical-precis.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "My First Post!",
            "content": "First Fastpages Post 😎🥱 . Hi I’m Don. Welcome to my first fastpages post, the start to my year long experience to cope cope cope while I code code code. . . What to Expect . This post is to see if I didn’t botch my fast pages and set them up right. It’s also here to test how much markdown I vaguely remember. . Some Fun Facts . I have a dog | I ate bun bo hue | Things I like: Drinking Boba | Bread | Sleeping | . | Things I hate: Insects | Spiders | Anything that looks like it could or can kill me | . | . Quote . “Thumbs up.” 👍 . Markdown Styling Examples . Markings Syntax Description Example . Strike Through | Puts a Strike through words | Hello | . Italics | Slants characters in italic style | Hello | . Bold | Thickens characters in bold style | Hello | . End of My First Blog . Note: Wishing myself good luck for this year. . Tip: Remember to code code code and cope cope cope. . Important: This is the end of my fist blog post on fast pages. .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%200/pbl/2022/08/20/first-post.html",
            "relUrl": "/markdown/fastpages/week%200/pbl/2022/08/20/first-post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "First Python Jupyter Notebook",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://dontran15.github.io/CSAFastPages/jupyter/python/fastpages/week%200/pbl/2022/08/19/python-nb.html",
            "relUrl": "/jupyter/python/fastpages/week%200/pbl/2022/08/19/python-nb.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "First Java Jupyter Notebook",
            "content": "System.out.println(&quot;Hello&quot;); . Hello .",
            "url": "https://dontran15.github.io/CSAFastPages/jupyter/java/fastpages/week%200/pbl/2022/08/19/java-nb.html",
            "relUrl": "/jupyter/java/fastpages/week%200/pbl/2022/08/19/java-nb.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Arguments Around Us",
            "content": "Don Tran . Mrs. Dafoe . AP English Language : Period 3 . 19 August 2022 . In his column, “Column: The Atlantic says ‘the California Dream is dying,” Michael Hiltzik argues through an informal and sarcastic tone that pieces such as Connor Friedersdorf’s piece, “The California Dream is Dying,” is another instance of a flawed notion of the “dying California dream” overlooks its obvious inherent flaws and objective successes. Hiltzik starts with a clear informal tone, immediately using a variety of colloquial language such as “Magazine writers’ chestnuts,” “buzz,” and “glittering.” Through this colloquial language, he sets up his abrasive and sarcastic tone, which establishes his open disagreement with Friedersdorf’s piece and the “ ‘California is dying’ trope.” The most prominent example is his acerbic remark regarding business owners cited for violations which Friedersdorf cites as reasons against California’s regulation: “My guess” A poll of such business owners would turn up unanimous agreement that regulation is bad.” Through the informal and abrasive tone Hiltzik uses, he creates a feeling of ridicule towards the article, setting up his breakdown of Friedersdorf’s arguments as silly and tedious. While he does make scathing remarks about the piece and the “trope” in general, he attempts to appeal to his audience’s logos through quotes and statistics that he uses to break apart Friedersdorf’s arguments. In response to the special pleading that Fridersdorf’s analysis of an almond farmer who “grouses” about his water struggles, Hiltzik notes that Friedersdorf disregards that almond farms require large quantities of continuous water necessary to facilitate them. He furthermore cites an article regarding the likely reversal of California’s population decline in addition to achievements such as its high median household income, low new COVID case rates, strong economic growth, and model pollution and water conservation regulations. By appealing to his audience through organized logic, Hiltzik reinforces the idea that California’s situation has always been filled with tenuous and inevitable struggles, which the state has met with its own successes. For the most part, Hiltzik provides a fair assessment of the flaws within Friedersdorf’s piece and reveals that California is not all doom and gloom and has never been perfect. However, his argument provided an overall favorable view of California as a state, especially its performance as a US state, and tended to portray Californian economic and environmental practices as successes. Consequently, Hiltzik also tended to overlook issues California faces not just as an American state but as a broader systemic problem unique to the state. California may have a high median household income, especially in comparison to Texas or Florida. Yet, it also ranks as having the US’s 3rd highest cost of living and 2nd highest median home prices. Therefore it’s important to note California as a state still has a lot of work to do to reach towards a brighter future. Although the opportunity the state presented during the Gold Rush has subsided, now, the cultural and economic value that Hollywood and Silicon Valley provide are uniquely Californian and therefore be leveraged to all levels of society if California wishes to continue being a leading US state. Friedersdorf’s piece, in contrast to Hiltzik’s critical tone of the piece infers, is not all too against the “Californian dream” compared to the other much more hostile attitudes of “California Dream” critics. Friedersdorf, as a Californian, believes that the attitude that California is great as it is in the face of troubles and flaws fundamentally hurts California as it creates preservationists. In that regard, I believe that Hiltzik’s belief in California’s perseverance comes off as temporarily hopeful, especially in the face of future problems. So, if California is to survive the 21st century, I, like Friedersdorf, believe it will be up to Californians to focus on creating a future that all its current and future residents can enjoy. .",
            "url": "https://dontran15.github.io/CSAFastPages/2022/08/19/arguments-around-us.html",
            "relUrl": "/2022/08/19/arguments-around-us.html",
            "date": " • Aug 19, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Who Am I?? 🥸",
          "content": "Hey! Welcome to my fastpages! I’m Don Tran and I’m a junior at Del Norte High School. I like playing piano and drinking boba. I like learning and probably am planning to go into some CS field. Anyways very cool 😈😈1. . so awesome! 😎😎 &#8617; . |",
          "url": "https://dontran15.github.io/CSAFastPages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
  

  

  
  

  

  
  

  
  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dontran15.github.io/CSAFastPages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}