{
  
    
        "post0": {
            "title": "Week 1 Ticket",
            "content": "Week 1 Assignment and Hacks: Innovation - Primitives . Canvas Requirements . Code.org . Lessons 1-5 Completed for OOP Unit | . Productive Blogging . Primitives Java Notebook . Demonstrates primitives use | . Bash Notebook . Demonstrates bash use and checks for installations and versions | Verifies kernels | Notes on bash and its uses (to be added) | . Fastpages notes to go along with Tech Talks and Fastpages notes to go along with College Board learning . Created PBL and College Board Pages to organize learning PBL sorted by week to see progress and organize tools and material | College Board sorted by unit and content covered | . | . Others . Salary Calculator using primitives | Definite Integral Calculator for Polynomials | Use of Tags/Categories | .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%201/2022/08/29/week1-ticket.html",
            "relUrl": "/markdown/fastpages/week%201/2022/08/29/week1-ticket.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Vectors vs. Scalars",
            "content": "Vectors vs. Scalars . Vectors Quantities . Vectors quantities are, in the context of physics, quantifiable values that have a magnitude (quantifiable value) and direction that indicates its movment. . Examples include: . velocity | displacement | weight | acceleration | force | pressure | momentum | gravity | drag | etc. | . Scalar Quantities . Scalar quantities are, in the context of physics, quantifiable values that have only a magnitude without regard to direction but indicates movement. . Examples include: . Distance | Speed | Energy | Mass | Density | Power | Length, Area, Volume | Time | Temperature | Work | etc. | . Summary/Concluding Thoughts . Vectors and Scalars are incredibly important values that I need to remember and distinguish between when dealing with physics. .",
            "url": "https://dontran15.github.io/CSAFastPages/physics/2022/08/28/vectorscalar.html",
            "relUrl": "/physics/2022/08/28/vectorscalar.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "An Integral Calculator for Polynomials",
            "content": "An Integral Calculator for Polynomials . About This Calculator . It&#39;s pretty straight forward in methodology. It takes in arguements for the upper bound, lower bound, and polynomial function from the user and then makes an estimate (which is pretty accurate) the value of the definite interval of that polynomial function using the upper and lower bounds. . The Algorithm . Simply explained, the polynomial function entered is in a string format and therefore needs to be parsed to be able convert the string into mathematical semantics. The algorithm then creates two ArrayLists that records the power and coefficient of each term respectively. The lists are then passed through a function which has a loop which calculates the output of the polynomial function for a given term of x. Being able to calculate the value of the polynomial function now, the algorithm uses the trapezoid method of estimation for definite integrals for a 1,000,000 intervals in a loop. The answer is then outputted. . Limitations . The user input unfortunately has to be very strict in formatting where each term must specify +/- ax^n where +/- denotes a positive or negative term, a denotes the coefficient, and n denotes the power of the term. It can also only calculate polynomials. Can I code it to include more functions and less strict formatting? Theoretically, yes. In actuality, I&#39;m lazy and parsing is way too much work to code code code so we&#39;re stuck with strict polynomial inputs only. Ok have fun. Or use SymboLab 💀 . import java.util.ArrayList; public class Polynomial { ArrayList&lt;Integer&gt; powersList = new ArrayList&lt;&gt;(); ArrayList&lt;Integer&gt; coefficientsList = new ArrayList&lt;&gt;(); public static Polynomial parse (String input) throws Exception { Polynomial polynomial = new Polynomial(); for (int i = 0; i &lt; input.length();){ int xIndex = input.indexOf(&quot;x&quot;, i); if (xIndex == -1){ throw new Exception(&quot;Invalid input, x variable expected&quot;); } String coeffString = input.substring(i, xIndex); int coefficient = Integer.valueOf(coeffString); polynomial.coefficientsList.add(coefficient); i = xIndex + 2; int nextCoeffSign = 1; int pIndexPos = input.indexOf(&quot;+&quot;, i); int pIndexNeg = input.indexOf(&quot;-&quot;, i); int pIndex = pIndexPos; if (pIndexNeg != -1 &amp;&amp; pIndexNeg &lt; pIndexPos) { pIndex = pIndexNeg; nextCoeffSign = -1; } if (pIndex == -1){ pIndex = input.length(); } String powString = input.substring(i, pIndex); int power = Integer.valueOf(powString); polynomial.powersList.add(power); if (nextCoeffSign == -1){ i = pIndex; } else { i = pIndex + 1; } } return polynomial; } public double polynomialOutput(double x){ double output = 0; for (int i = 0; i &lt; powersList.size(); i++){ output += coefficientsList.get(i) * Math.pow(x, powersList.get(i)); } return output; } public double polynomialIntegralCalc(double lowerBound, double upperBound){ int iterations = 1000000; double interval = (upperBound - lowerBound)/iterations; double output = 0; for (int i = 0; i &lt; iterations; i++) { double x1 = lowerBound + interval*i; double x2 = x1 + interval; double lowerOutput = polynomialOutput(x1); double upperOutput = polynomialOutput(x2); double trapezoidArea = (upperOutput+lowerOutput)*interval/2; output += trapezoidArea; } return output; } } . import java.util.Scanner; public class PolynomialIntegralCalculator { public static void happyCase() throws Exception { Scanner userInput = new Scanner(System.in); System.out.println(&quot;Type your polynomial: must be single variable (x) polynomial with no spaces and all terms with powers specified {Ex: -5x^4+10x^1-2x^0}&quot;); String input = userInput.nextLine(); System.out.println(&quot;Type the lower bound of the integral&quot;); double lowerBound = Double.valueOf(userInput.nextLine().trim()); System.out.println(&quot;Type the upper bound of the integral&quot;); double upperBound = Double.valueOf(userInput.nextLine().trim()); userInput.close(); Polynomial polynomial = Polynomial.parse(input.trim()); System.out.println(polynomial.polynomialIntegralCalc(lowerBound, upperBound)); } public static void main(String[] args) throws Exception{ PolynomialIntegralCalculator.happyCase(); } } PolynomialIntegralCalculator.main(null); . Type your polynomial: must be single variable (x) polynomial with no spaces and all terms with powers specified {Ex: -5x^4+10x^1-2x^0} Type the lower bound of the integral Type the upper bound of the integral 109.1111111117665 .",
            "url": "https://dontran15.github.io/CSAFastPages/java/object-oriented/primitives/college%20board/2022/08/26/polynomial-integral-calculator.html",
            "relUrl": "/java/object-oriented/primitives/college%20board/2022/08/26/polynomial-integral-calculator.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Bash",
            "content": "Bash Checks . This notebook is to check if bash is running well on my system and all the other necessary tools I&#39;ll need for this course are also running smoothly. . Kernels . To check if my kernels are installed, I can run the command &quot;jupyter kernelspec list&quot; . echo &quot;Using jupyter kernelspec list to see if all the necessary kernals are installed.&quot; jupyter kernelspec list . Using jupyter kernelspec list to see if all the necessary kernals are installed. Available kernels: bash /Users/don/Library/Jupyter/kernels/bash java /Users/don/Library/Jupyter/kernels/java javascript /Users/don/Library/Jupyter/kernels/javascript python3 /Users/don/opt/anaconda3/share/jupyter/kernels/python3 . Checking Conda . Let&#39;s confirm if conda is running with conda list. . conda list . # packages in environment at /Users/don/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . Programming Languages and Anaconda Version Check . Now, let&#39;s check the versions of Python, Java (Java itself and the JDK), Javascript, Bash, Anaconda, Jupyter . echo &quot;Python and Python 2 Versions:&quot; python --version python2 --version #Checks Java and JDK versions echo &quot;Java and JDK Versions:&quot; java --version javac --version #Checks JS version echo &quot;JS Version:&quot; npm --version #Checks for conda version echo &quot;Anaconda Version:&quot; conda --version #Checks for jupyter version echo &quot;Jupyter Version:&quot; jupyter --version . Python and Python 2 Versions: Python 3.9.12 Python 2.7.18 Java and JDK Versions: java 18.0.1.1 2022-04-22 Java(TM) SE Runtime Environment (build 18.0.1.1+2-6) Java HotSpot(TM) 64-Bit Server VM (build 18.0.1.1+2-6, mixed mode, sharing) javac 18.0.1.1 JS Version: 6.4.1 Anaconda Version: conda 4.13.0 Jupyter Version: Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 . Installations . Automization of developer installations via bash! Provided anaconda is already installed via Linux or online. . echo(&quot;Update and upgrade brew given one&#39;s device already has Brew: &quot;) brew list brew update brew upgrade echo(&quot;Complete!&quot;) echo(&quot;Installing git through brew: &quot;) brew install git echo(&quot;Complete!&quot;) echo(&quot;Python installation via brew: &quot;) brew install python echo(&quot;Complete!&quot;) echo(&quot;Java installation via brew: &quot;) brew install java echo(&quot;Complete!&quot;) echo(&quot;Jupyter installation via conda: &quot;) conda install jupyter echo(&quot;Complete!&quot;) echo(&quot;Bash Kernel installation via Python: &quot;) pip install bash_kernel python -m bash_kernel.install echo(&quot;Complete!&quot;) echo(&quot;NodeJS and javascript installation via conda&quot;) conda install nodejs npm -version npm install -g ijavascript ijsinstall echo(&quot;Complete!&quot;) echo(&quot;Installing ijava kernal via python: &quot;) wget https://github.com/SpencerPark/IJava/releases/download/v1.3.0/ijava-1.3.0.zip unzip ijava-1.3.0.zip python install.py --user echo(&quot;Complete!&quot;) .",
            "url": "https://dontran15.github.io/CSAFastPages/java/bash/week%201/2022/08/24/bash.html",
            "relUrl": "/java/bash/week%201/2022/08/24/bash.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Primitives",
            "content": "Primitives Data Type Notes . Java is a data type language and all data is defined with explicit use. This can be in the form of primitive data types or non primitive data types (objects/wrapper classes). . Primitives . Primitives are fundemental data types in Java that solely hold certain data types and lack any methods. Among the most basic primitives there are: . Booleans (true or false values) boolean | . | Characters (individual characters) char | . | Integers (integer numbers and its representations) int | byte | long | short | . | Floating-Points (decimals) float | double | . | . The most commonly used ones in java are boolean, char, int, and double. . Non-Primitives . Because Java likes everything to be a class, all data types, including forms of the primitives, are iterated as classes. The difference between primitives and non-primitives however is that non-primitves are able to perform method calls. Among some examples of Non-Primitives are: . String | ArrayList | any other object that may take the form of data | . Applications . Below is a demonstration of the use of some primitives and a string in Java. (examples include int, double, boolean, and String) . public class Primitives { public static void main (String[] args) { int integer = 55; // This is an integer, this is a primitive data type which holds integer values double doub = 10.92; // This is a double, this is a primitive data type which holds decimal values boolean bool = true; // This is a boolean, this is a primitive data type which holds the two values true or false String string = &quot;This is a string&quot;; // This is a String, this is a wrapper class data type which an array of characters System.out.println(&quot;This is an integer: &quot; + integer); System.out.println(&quot;This is an double: &quot; + doub); System.out.println(&quot;This is an bool: &quot; + bool); System.out.println(&quot;This is an string: &quot; + string); } } Primitives.main(null); . This is an integer: 55 This is an double: 10.92 This is an bool: true This is an string: This is a string . Salary Raise Calculator . About This Calculator . This is a calculator that demonstrates implementations of boolean, int, double, and String within the code. . Do you ever struggle to calculate your salary raise or are just too lazy to plug those large numbers into a calculator? Then, welcome to a salary raise calculator where your only job is to input your old salary and the amount your salary has been raised by. . Not only does it calculate it for you it calcualate your new salary but also the manages the percent raise of your salary before informing you whether you&#39;ve been scammed in your raise and that your employer is not appreciating you enough. I would encourage you to go on strike but unfortunately I&#39;m a code code coder and not a strike strike striker so I don&#39;t have any advice for that. Good luck! . How It Works . A scanner is created to read the inputs of users and prompts users to enter double type inputs for the users salary and raise which is then used to calculate the new salary by adding the two values together. The percent increase is calculated by dividing the calculated new salary by the old salary and multiplied by 100 before being subtracted by 100. The in code comments go more in detail with what each line of code does. . Use of Primitives . Integers . Outputs percent increase as a raise | . Doubles . Salaries are taken in as double values which does double division and casted as an integer output when calculating the percent | . Boolean . Uses booleans to check if the output of the percent increase is good or not returning true for a percent value that is good | . String . Outputs string message which includes all the values computed or collected above into a message that outputs new salary (double), precent increase (int), and quality of raise (boolean) | . Contributions . This code was made in java in conjuction with fellow coder Nathan using pair programming. . import java.util.Scanner; public class SalaryRaiseCalculator{ public static void main(String[] args) { Scanner salaryInput = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Enter a salary: &quot;); // salary input message prompt double salary = salaryInput.nextDouble(); // Read user input double oldSalary = salary; // Records oldsalary for percent calculation later System.out.println(&quot;Enter your pay raise: &quot;); // raise input message prompt double raise = salaryInput.nextDouble(); // Read user input salary += raise; // The inputted number of &quot;raise&quot; is added onto the original inputted &quot;salary&quot; int percent = (int) (100*(salary / oldSalary)-100); // Calculates percent raise salaryInput.close(); //Closes Scanner object salaryInput; stops reading text inputs boolean payraisequality; String message; if(percent &gt; 5){ payraisequality = true; } else{ payraisequality = false; } if (payraisequality == true){ message = &quot;You got a good pay raise!&quot;; } else{ message = &quot;You got a bad pay raise!&quot;; } System.out.println(&quot;Your final salary is: &quot; + salary + &quot;, which is around a &quot; + percent + &quot;% raise from your original salary. &quot; + message); // Output user input } } SalaryRaiseCalculator.main(null); . Enter a salary: Enter your pay raise: Your final salary is: 1020000.0, which is around a 2% raise from your original salary. You got a bad pay raise! .",
            "url": "https://dontran15.github.io/CSAFastPages/java/primitives/week%201/college%20board/pbl/2022/08/23/primitives.html",
            "relUrl": "/java/primitives/week%201/college%20board/pbl/2022/08/23/primitives.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Week 0 Ticket",
            "content": "Hacks Part 1 . Link to Personal Fastpages / Github pages running on github.io | Link to a new post in Fastpages project | Link to first Python Jupter notebook printing “Hello” | Link to first Java Jupter notebook printing “Hello” | Screenshot image of Fastpages project using VSCode IDE . | Link to GitHub Insights | . Hacks Part 2 . . Link to commit of minor change of Java Project | Seed: Link to commit change to fix Birds page dropdown | Seed: Link to commit change to fix Java 17 compiling | .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%200/2022/08/22/week0-ticket.html",
            "relUrl": "/markdown/fastpages/week%200/2022/08/22/week0-ticket.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Graphical Analysis Physics Lab1",
            "content": "Don Tran . 09.04.2022 . AP Physics C: Mechanics . Purpose . For this lab, we are going to need to measure the thickness, radius, and mass of each of the 5 disks. To collect the data, we’ll need to collect 5 disks of different radius of the same thickness and material, a ruler/meter stick, and a scale. . For the thickness, because each of the disks are the same thickness, we only need to measure one. We can use the biggest one (because it is the easiest to fold) and fold it 6 times. Then, we can measure the thickness of the disk and divide it by the number of layers (64 layers for 6 folds). . For the radius, we use the ruler/meter stick and measure from the center of each disk to the edge. . For the mass, we weigh each disk on a scale and record their weights in grams. . The precision of the meter stick/ruler was in millimeters. Given the meter stick/ruler, the data is measured all measurements are measured in centimeters with markers representing each tenth of a centimeter which is a millimeter. Therefore the precision of the measurements are in millimeters. . # . Data . Aluminum Disks Radius and Mass . Disk . Radius (mm) . Mass (g) . . r2 (mm2) . . Disk 1 (Largest) | 72.2 mm | .72 g | | 5212.84 | . Disk 2 (2nd Largest) | 52.2 mm | .38 g | | 2724.84 | . Disk 3 (3rd Largest) | 43.5 mm | .25 g | | 1892.25 | . Disk 4 (4th Largest) | 31.8 mm | .13 g | | 1011.24 | . Disk 5 (5th Largest) | 23.2 mm | .07 g | | 538.24 | . Graph . Graph 1: Radius vs Mass Quadratic Graph . . Graph 1 is non-linear because it’s a quadratic graph which shows a clear curve of the data. The equation for the graph is: . (y = 0.000141609 x^{2} - 0.000156579 x - 0.00530521) . Graph 2: Radius2 vs Mass Linearized Graph . . Graph 2 is a linear graph with the equation for its line of best fit being: . y = 0.000140016 ( frac{g}{cm^{2}}) * x - 0.00866072 (g) . Analysis . 1) What is the independent variable in your y = mx +b formula? . The independent variable of my line of best fit function is x which represents the value of (r^{2}) of the disks. . 2) What does the slope represent in your y = mx +b formula? Show dimensionally that indeed that is what your slope represents and that the formula is valid dimensionally. . The slope in the formula represents ( pi times rho times text{ h}), or pi (which has no dimensions) x density (in g/mm^3) x h (in cm) which is dimensionally measured as (g/cm^{2}). Dimensionally we know the slope is in (g/mm^{2}) and that this equation is dimensionally valid because: . y = mx + b is measured in the units where y is the mass and x is measured in (mm^{2}). . Therefore, in y = mx + b using its dimensions, g = slope * (cm^{2}) + g and therefore, slope = (g/cm) and the equation is dimensionally valid. . 3) Should the “b” in your y = mx + b formula be zero? Explain your answer. . No, b in the line of best fit formula should theoretically be zero because if the radius of the disk is 0 mm, the mass by intuition would also have to be 0 grams because the area that the disk covers is nonexistent. Therefore, it is implausible that b should be a negative value because the weight of the disks can’t be negative or any other value besides zero when there is no radius. . 4) Measure/estimate the “thickness” of your cylinders. Use that value to find the experimental density of your cylinders. Find a percent difference between your found density and the actual density. The actual material is aluminum. . Cylinder thickness (h): 1/64 mm = 0.015625 mm . ( rho = frac{m}{V}), ( rho = frac{m}{ pi r^{2}h}), ( rho times pi times h = m/r^{2}) . ( pi times rho times h = slope = 0.000140 frac{g}{mm^{2}} ) . ( rho = 0.000140 frac{g}{mm^{2}} times frac{1}{1/64 mm times pi} = 0.002852 frac{g}{mm^{3}} times frac{1000 mm^{3}}{1 cm^{3}} = 2.852 frac{g}{cm^{3}} ) . Actual aluminum density: (2.7 frac{g}{cm^{3}}) . ( % Error = 100 % cdot frac{(Experimental - Theoretical)}{ text{Theoretical}}) . ( % Error = 100 % cdot frac{2.852 frac{g}{cm^{3}} - 2.7 frac{g}{cm^{3}}}{2.7 frac{g}{cm^{3}}} = 5.63 %) . 5) errors. Make sure you explain why your number is bigger or smaller than (if positive or negative difference.) . In the experiment, some possible errors might have been due to outside effects such as thermal expansion causing a larger radius compared to the mass, thereby raising the slope value and making the density larger than it actually is. Another possible cause for error might have been imprecise measuring devices when measuring the thickness which was still partly too large to accurately measure, especially given its thinness. One other factor may have been that the disks weren’t perfect circles causing our radius measurements to be overestimated thereby raising the slope value and in turn the density.. . Multiple Choice Questions . 1. You perform the same experiment, but this time you plot a linear relationship between mass and the circumference of the disks rather than the radius. What is the slope of the linear plot? . A. 4π2 r2 . B. 2πr2 . C. (h rho/2 pi) . D. 1/4π . E. (h rho/4 pi) . (c = 2 pi r) . c is proportional to r and r2 is proportional to m, therefore c2 is proportional to m. To linearize: . (c^{2} = (2 pi r)^{2} = 4 pi^{2}r^{2} ) . ( rho = m/v ), (m = rho v) . (m = rho times 2 pi r^{2}), ( rho = frac{m}{ pi r^{2}h} cdot frac{4 pi}{4 pi}) , ( rho = frac{m cdot 4 pi}{4 pi^{2}r^{2}h}), ( rho = frac{m}{c^{2}} cdot frac{4 pi}{h}), ( rho = frac{4 pi*slope}{h}), (slope = frac{ rho h}{4 pi}) . Therefore the slope of the linear plot is h( rho)/4π. Answer E. . 2. SKIP . 3. Consider an experiment in which a student measures the mass and diameter of 10 different-sized spheres, all made of the same material of uniform density ρ. For this student to create a linear graph relating the mass of the sphere to its radius r, the student would need to plot mass m versus which quantity: . A. r . B. r2 . C. r3 . D. r4 . E. r1/2 . (m = varrho v), (v = frac{4}{3} pi r^{3}), (m = varrho cdot frac{4}{3} pi r^{3}), ( varrho cdot frac{4}{3} pi = frac{m}{r^{3}}) . Therefore the student would plot mass m versus r3 to linearize the data. Answer: C. . Synthesis Questions . 1. In this experiment, if we had used disks with a greater thickness, would the slope of your best fit line have been different? Would your experimental value for density be the same? Explain. . Yes, the slope of my best fit line would not have been different because the greater thickness of all the disks would have caused the mass of the disks to be greater. Therefore, since mass was the y-axis, the ratio between the mass and r2 would have also been greater causing the slope of the line of best fit to increase. . The experimental density would also have been different because the thickness of the disks would have been much easier to measure without requiring us to fold it since folding it still left air pockets that were unaccounted for likely overestimating the height. Therefore, in the relationship between ( pi times rho times h = slope) to be more accurate. . 2. How would your graph of m versus r2 be different if you had used disks of the same . thickness, but made out of steel? Draw a second line on your m versus r2 plot that . represents disks made of steel. . The graph of m vs r2 would have a much higher slope if the disks of the same thickness were made of steel instead. This is because steel has a higher density than aluminum thereby increasing the mass of the disks and causing the ratio between the mass and radius to be higher. . Graph of Experimental Aluminum Disk Graph vs Theoretical Steel Disk Graph . . Black represents the line of best fit for the aluminum plates’ m and r2. Red represents the theoretical line of best fit for the relationship between m and r2. . ** ** . 3. Another group of students has acquired data for the exact same experiment; however, their disks are made of an unknown material that they are trying to determine. The group’s m versus r2 data produced a line of best fit with slope equal to 122 kg/m2. Each disk they measured had the same 0.5 cm thickness. Calculate the density of the unknown material and use the table below to help determine what material their disks are made of. . Material Density (g/cm3) . Magnesium | 1.7 | . Aluminum | 2.7 | . Copper | 8.3 to 9.0 | . Gold | 19.3 | . Iron | 7.8 | . Lead | 11.3 | . Platinum | 21.4 | . Uranium | 18.7 | . Osmium | 22.5 | . ( rho h pi = slope = 122 kg/m^{2}, 0.5 cm cdot frac{1 m}{100 cm} = 0.005 m, rho pi*0.005 m = 122 kg/m^{2}) . ( rho = frac{122 kg/m^{2}}{0.005 m cdot pi} = 7800 kg/m^{3} cdot frac{1 m^{3}}{(100 cm)^{3}} cdot frac{1000 g{}^{}}{1 kg} = 7.8 g/cm^{3}) . The calculated density according to the student’s data comes out to be equal to that of the density of iron and therefore the unknown material that the disks are made from must be iron. .",
            "url": "https://dontran15.github.io/CSAFastPages/2022/08/22/graphical-analysis-physics-lab1.html",
            "relUrl": "/2022/08/22/graphical-analysis-physics-lab1.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Stein Rhetorical Precis",
            "content": "Don Tran . Mrs. DaFoe . AP English Language . 21 August 2022 . Rhetorical Précis Joel Stein . In his Op-Ed, “We’re teaching kids to follow their dreams. Maybe teach them to be helpful instead,” Joel Stein, author of “In Defense of Elitism: Why I’m Better Than You and You’re Better Than Someone Who Didn’t Buy This Book,” asserts that rather than being taught the importance of toiling to help others, American society teaches children to reach for dreams of personal achievement, thereby creating a dangerous mindset. To help his audience conceptualize American society’s emphasis on individual achievement, Stein notes examples of students’ speeches during his son’s class, living wax museum. In one instance he observes, Stein remarks, “Ruth Ginsburg did not toil to be one of the first female Supreme Court justices; she fought to expand the rights of all women.” Stein uses the student’s speech regarding Ginsburg as an example of the failure of students to recognize Ginsburg’s motives for working hard to become a Supreme Court Justice. He notes that her goal was not to become a Supreme Court Justice, as he implies the student pointed out, instead, he emphasizes the idea that she labored herself to fight for women’s rights. As a result, Stein’s example provides evidence for his audience that students fail to recognize the motives of the hard work that famous figures endured to help others and instead focus on the personal achievements that those figures attained. By highlighting this, he helps lead his readers to conclude that children, like the students he observed, are focused on dreaming to attain personal achievements just as the important figures they chose did, rather than harboring genuine desires to contribute to creating a better world. By establishing that students are focused on attaining individualistic dreams, Stein suggests that raising children to believe in this way is ultimately dangerous for society through an allusion. At the end of his op-ed, he notes that children who seek individualistic accomplishments will create a future generation that “will be asking not what can they do for their country, but rather what the country can do for them.” In this line, he makes a clear allusion to President John F. Kennedy’s inaugural address, where he called upon Americans not to seek what their country could do for them but rather seek what they could do for their country to promote his New Frontier policies which depended on the cooperation and effort of the American people. By alluding to Kennedy, an integral figure of American history, and the society he attempted to promote, Stein highlights to his audience that if children continue to be raised without a genuine desire to help people, society will ultimately follow a dangerous direction away from a society that works to build itself together. By alluding to a reversal of the ideas Kennedy remarks in his address, Stein infers that American society will also oppositely fail to succeed. All together, Stein creates a constructive tone as he attempts to warn parents, teachers and adults that kids must learn to seek to help one another or else American society will be filled with the conflict of individualism. .",
            "url": "https://dontran15.github.io/CSAFastPages/2022/08/21/stein-rhetorical-precis.html",
            "relUrl": "/2022/08/21/stein-rhetorical-precis.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "My First Post!",
            "content": "First Fastpages Post 😎🥱 . Hi I’m Don. Welcome to my first fastpages post, the start to my year long experience to cope cope cope while I code code code. . . What to Expect . This post is to see if I didn’t botch my fast pages and set them up right. It’s also here to test how much markdown I vaguely remember. . Some Fun Facts . I have a dog | I ate bun bo hue | Things I like: Drinking Boba | Bread | Sleeping | . | Things I hate: Insects | Spiders | Anything that looks like it could or can kill me | . | . Quote . “Thumbs up.” 👍 . Markdown Styling Examples . Markings Syntax Description Example . Strike Through | Puts a Strike through words | Hello | . Italics | Slants characters in italic style | Hello | . Bold | Thickens characters in bold style | Hello | . End of My First Blog . Note: Wishing myself good luck for this year. . Tip: Remember to code code code and cope cope cope. . Important: This is the end of my fist blog post on fast pages. .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/week%200/pbl/2022/08/20/first-post.html",
            "relUrl": "/markdown/fastpages/week%200/pbl/2022/08/20/first-post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "First Python Jupyter Notebook",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://dontran15.github.io/CSAFastPages/jupyter/python/fastpages/week%200/pbl/2022/08/19/python-nb.html",
            "relUrl": "/jupyter/python/fastpages/week%200/pbl/2022/08/19/python-nb.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "First Java Jupyter Notebook",
            "content": "System.out.println(&quot;Hello&quot;); . Hello .",
            "url": "https://dontran15.github.io/CSAFastPages/jupyter/java/fastpages/week%200/pbl/2022/08/19/java-nb.html",
            "relUrl": "/jupyter/java/fastpages/week%200/pbl/2022/08/19/java-nb.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Arguments Around Us",
            "content": "Don Tran . Mrs. Dafoe . AP English Language : Period 3 . 19 August 2022 . In his column, “Column: The Atlantic says ‘the California Dream is dying,” Michael Hiltzik argues through an informal and sarcastic tone that pieces such as Connor Friedersdorf’s piece, “The California Dream is Dying,” is another instance of a flawed notion of the “dying California dream” overlooks its obvious inherent flaws and objective successes. Hiltzik starts with a clear informal tone, immediately using a variety of colloquial language such as “Magazine writers’ chestnuts,” “buzz,” and “glittering.” Through this colloquial language, he sets up his abrasive and sarcastic tone, which establishes his open disagreement with Friedersdorf’s piece and the “ ‘California is dying’ trope.” The most prominent example is his acerbic remark regarding business owners cited for violations which Friedersdorf cites as reasons against California’s regulation: “My guess” A poll of such business owners would turn up unanimous agreement that regulation is bad.” Through the informal and abrasive tone Hiltzik uses, he creates a feeling of ridicule towards the article, setting up his breakdown of Friedersdorf’s arguments as silly and tedious. While he does make scathing remarks about the piece and the “trope” in general, he attempts to appeal to his audience’s logos through quotes and statistics that he uses to break apart Friedersdorf’s arguments. In response to the special pleading that Fridersdorf’s analysis of an almond farmer who “grouses” about his water struggles, Hiltzik notes that Friedersdorf disregards that almond farms require large quantities of continuous water necessary to facilitate them. He furthermore cites an article regarding the likely reversal of California’s population decline in addition to achievements such as its high median household income, low new COVID case rates, strong economic growth, and model pollution and water conservation regulations. By appealing to his audience through organized logic, Hiltzik reinforces the idea that California’s situation has always been filled with tenuous and inevitable struggles, which the state has met with its own successes. For the most part, Hiltzik provides a fair assessment of the flaws within Friedersdorf’s piece and reveals that California is not all doom and gloom and has never been perfect. However, his argument provided an overall favorable view of California as a state, especially its performance as a US state, and tended to portray Californian economic and environmental practices as successes. Consequently, Hiltzik also tended to overlook issues California faces not just as an American state but as a broader systemic problem unique to the state. California may have a high median household income, especially in comparison to Texas or Florida. Yet, it also ranks as having the US’s 3rd highest cost of living and 2nd highest median home prices. Therefore it’s important to note California as a state still has a lot of work to do to reach towards a brighter future. Although the opportunity the state presented during the Gold Rush has subsided, now, the cultural and economic value that Hollywood and Silicon Valley provide are uniquely Californian and therefore be leveraged to all levels of society if California wishes to continue being a leading US state. Friedersdorf’s piece, in contrast to Hiltzik’s critical tone of the piece infers, is not all too against the “Californian dream” compared to the other much more hostile attitudes of “California Dream” critics. Friedersdorf, as a Californian, believes that the attitude that California is great as it is in the face of troubles and flaws fundamentally hurts California as it creates preservationists. In that regard, I believe that Hiltzik’s belief in California’s perseverance comes off as temporarily hopeful, especially in the face of future problems. So, if California is to survive the 21st century, I, like Friedersdorf, believe it will be up to Californians to focus on creating a future that all its current and future residents can enjoy. .",
            "url": "https://dontran15.github.io/CSAFastPages/2022/08/19/arguments-around-us.html",
            "relUrl": "/2022/08/19/arguments-around-us.html",
            "date": " • Aug 19, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Who Am I?? 🥸",
          "content": "Hey! Welcome to my fastpages! I’m Don Tran and I’m a junior at Del Norte High School. I like playing piano and drinking boba. I like learning and probably am planning to go into some CS field. Anyways very cool 😈😈1. . so awesome! 😎😎 &#8617; . |",
          "url": "https://dontran15.github.io/CSAFastPages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dontran15.github.io/CSAFastPages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}