{
  
    
        "post0": {
            "title": "An Integral Calculator for Polynomials",
            "content": "An Integral Calculator for Polynomials . About This Calculator . It&#39;s pretty straight forward in methodology. It takes in arguements for the upper bound, lower bound, and polynomial function from the user and then makes an estimate (which is pretty accurate) the value of the definite interval of that polynomial function using the upper and lower bounds. . The Algorithm . Simply explained, the polynomial function entered is in a string format and therefore needs to be parsed to be able convert the string into mathematical semantics. The algorithm then creates two ArrayLists that records the power and coefficient of each term respectively. The lists are then passed through a function which has a loop which calculates the output of the polynomial function for a given term of x. Being able to calculate the value of the polynomial function now, the algorithm uses the trapezoid method of estimation for definite integrals for a 1,000,000 intervals in a loop. The answer is then outputted. . Limitations . The user input unfortunately has to be very strict in formatting where each term must specify +/- ax^n where +/- denotes a positive or negative term, a denotes the coefficient, and n denotes the power of the term. It can also only calculate polynomials. Can I code it to include more functions and less strict formatting? Theoretically, yes. In actuality, I&#39;m lazy and parsing is way too much work to code code code so we&#39;re stuck with strict polynomial inputs only. Ok have fun. Or use SymboLab 💀 . import java.util.ArrayList; public class Polynomial { ArrayList&lt;Integer&gt; powersList = new ArrayList&lt;&gt;(); ArrayList&lt;Integer&gt; coefficientsList = new ArrayList&lt;&gt;(); public static Polynomial parse (String input) throws Exception { Polynomial polynomial = new Polynomial(); for (int i = 0; i &lt; input.length();){ int xIndex = input.indexOf(&quot;x&quot;, i); if (xIndex == -1){ throw new Exception(&quot;Invalid input, x variable expected&quot;); } String coeffString = input.substring(i, xIndex); int coefficient = Integer.valueOf(coeffString); polynomial.coefficientsList.add(coefficient); i = xIndex + 2; int nextCoeffSign = 1; int pIndexPos = input.indexOf(&quot;+&quot;, i); int pIndexNeg = input.indexOf(&quot;-&quot;, i); int pIndex = pIndexPos; if (pIndexNeg != -1 &amp;&amp; pIndexNeg &lt; pIndexPos) { pIndex = pIndexNeg; nextCoeffSign = -1; } if (pIndex == -1){ pIndex = input.length(); } String powString = input.substring(i, pIndex); int power = Integer.valueOf(powString); polynomial.powersList.add(power); if (nextCoeffSign == -1){ i = pIndex; } else { i = pIndex + 1; } } return polynomial; } public double polynomialOutput(double x){ double output = 0; for (int i = 0; i &lt; powersList.size(); i++){ output += coefficientsList.get(i) * Math.pow(x, powersList.get(i)); } return output; } public double polynomialIntegralCalc(double lowerBound, double upperBound){ int iterations = 1000000; double interval = (upperBound - lowerBound)/iterations; double output = 0; for (int i = 0; i &lt; iterations; i++) { double x1 = lowerBound + interval*i; double x2 = x1 + interval; double lowerOutput = polynomialOutput(x1); double upperOutput = polynomialOutput(x2); double trapezoidArea = (upperOutput+lowerOutput)*interval/2; output += trapezoidArea; } return output; } } . import java.util.Scanner; public class PolynomialIntegralCalculator { public static void happyCase() throws Exception { Scanner userInput = new Scanner(System.in); System.out.println(&quot;Type your polynomial: must be single variable (x) polynomial with no spaces and all terms with powers specified {Ex: -5x^4+10x^1-2x^0}&quot;); String input = userInput.nextLine(); System.out.println(&quot;Type the lower bound of the integral&quot;); double lowerBound = Double.valueOf(userInput.nextLine().trim()); System.out.println(&quot;Type the upper bound of the integral&quot;); double upperBound = Double.valueOf(userInput.nextLine().trim()); userInput.close(); Polynomial polynomial = Polynomial.parse(input.trim()); System.out.println(polynomial.polynomialIntegralCalc(lowerBound, upperBound)); } public static void main(String[] args) throws Exception{ PolynomialIntegralCalculator.happyCase(); } } PolynomialIntegralCalculator.main(null); . Type your polynomial: must be single variable (x) polynomial with no spaces and all terms with powers specified {Ex: -5x^4+10x^1-2x^0} Type the lower bound of the integral Type the upper bound of the integral 109.1111111117665 .",
            "url": "https://dontran15.github.io/CSAFastPages/java/object-oriented/primitives/2022/08/26/polynomial-integral-calculator.html",
            "relUrl": "/java/object-oriented/primitives/2022/08/26/polynomial-integral-calculator.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Primitives",
            "content": "Primitives Data Type Notes . Java is a data type language and all data is defined with explicit use. This can be in the form of primitive data types or non primitive data types (objects/wrapper classes). . Primitives . Primitives are fundemental data types in Java that solely hold certain data types and lack any methods. Among the most basic primitives there are: . Booleans (true or false values) boolean | . | Characters (individual characters) char | . | Integers (integer numbers and its representations) int | byte | long | short | . | Floating-Points (decimals) float | double | . | . The most commonly used ones in java are boolean, char, int, and double. . Non-Primitives . Because Java likes everything to be a class, all data types, including forms of the primitives, are iterated as classes. The difference between primitives and non-primitives however is that non-primitves are able to perform method calls. Among some examples of Non-Primitives are: . String | ArrayList | any other object that may take the form of data | . Applications . Below is a demonstration of the use of some primitives and a string in Java. (examples include int, double, boolean, and String) . public class Primitives { public static void main (String[] args) { int integer = 55; // This is an integer, this is a primitive data type which holds integer values double doub = 10.92; // This is a double, this is a primitive data type which holds decimal values boolean bool = true; // This is a boolean, this is a primitive data type which holds the two values true or false String string = &quot;This is a string&quot;; // This is a String, this is a wrapper class data type which an array of characters System.out.println(&quot;This is an integer: &quot; + integer); System.out.println(&quot;This is an double: &quot; + doub); System.out.println(&quot;This is an bool: &quot; + bool); System.out.println(&quot;This is an string: &quot; + string); } } Primitives.main(null); . This is an integer: 55 This is an double: 10.92 This is an bool: true This is an string: This is a string . Salary Raise Calculator . About This Calculator . This is a calculator that demonstrates implementations of boolean, int, double, and String within the code. . Do you ever struggle to calculate your salary raise or are just too lazy to plug those large numbers into a calculator? Then, welcome to a salary raise calculator where your only job is to input your old salary and the amount your salary has been raised by. . Not only does it calculate it for you it calcualate your new salary but also the manages the percent raise of your salary before informing you whether you&#39;ve been scammed in your raise and that your employer is not appreciating you enough. I would encourage you to go on strike but unfortunately I&#39;m a code code coder and not a strike strike striker so I don&#39;t have any advice for that. Good luck! . How It Works . A scanner is created to read the inputs of users and prompts users to enter double type inputs for the users salary and raise which is then used to calculate the new salary by adding the two values together. The percent increase is calculated by dividing the calculated new salary by the old salary and multiplied by 100 before being subtracted by 100. The in code comments go more in detail with what each line of code does. . Use of Primitives . Integers . Outputs percent increase as a raise | . Contributions . This code was made in java in conjuction with fellow coder Nathan using pair programming. . import java.util.Scanner; public class SalaryRaiseCalculator{ public static void main(String[] args) { Scanner salaryInput = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Enter a salary: &quot;); // salary input message prompt double salary = salaryInput.nextDouble(); // Read user input double oldSalary = salary; // Records oldsalary for percent calculation later System.out.println(&quot;Enter your pay raise: &quot;); // raise input message prompt double raise = salaryInput.nextDouble(); // Read user input salary += raise; // The inputted number of &quot;raise&quot; is added onto the original inputted &quot;salary&quot; int percent = (int) (100*(salary / oldSalary)-100); // Calculates percent raise salaryInput.close(); //Closes Scanner object salaryInput; stops reading text inputs boolean payraisequality; String message; if(percent &gt; 5){ payraisequality = true; } else{ payraisequality = false; } if (payraisequality == true){ message = &quot;You got a good pay raise!&quot;; } else{ message = &quot;You got a bad pay raise!&quot;; } System.out.println(&quot;Your final salary is: &quot; + salary + &quot;, which is around a &quot; + percent + &quot;% raise from your original salary. &quot; + message); // Output user input } } SalaryRaiseCalculator.main(null); . Enter a salary: Enter your pay raise: Your final salary is: 1020000.0, which is around a 2% raise from your original salary. You got a bad pay raise! .",
            "url": "https://dontran15.github.io/CSAFastPages/java/primitives/2022/08/23/primitives.html",
            "relUrl": "/java/primitives/2022/08/23/primitives.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "My First Post!",
            "content": "First Fastpages Post 😎🥱 . Hi I’m Don. Welcome to my first fastpages post, the start to my year long experience to cope cope cope while I code code code. . . What to Expect . This post is to see if I didn’t botch my fast pages and set them up right. It’s also here to test how much markdown I vaguely remember. . Some Fun Facts . I have a dog | I ate bun bo hue | Things I like: Drinking Boba | Bread | Sleeping | . | Things I hate: Insects | Spiders | Anything that looks like it could or can kill me | . | . Quote . “Thumbs up.” 👍 . Markdown Styling Examples . Markings Syntax Description Example . Strike Through | Puts a Strike through words | Hello | . Italics | Slants characters in italic style | Hello | . Bold | Thickens characters in bold style | Hello | . End of My First Blog . Note: Wishing myself good luck for this year. . Tip: Remember to code code code and cope cope cope. . Important: This is the end of my fist blog post on fast pages. .",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/fastpages/2022/08/20/first-post.html",
            "relUrl": "/markdown/fastpages/2022/08/20/first-post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "First Python Jupyter Notebook",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://dontran15.github.io/CSAFastPages/jupyter/python/fastpages/2022/08/19/python-nb.html",
            "relUrl": "/jupyter/python/fastpages/2022/08/19/python-nb.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "First Java Jupyter Notebook",
            "content": "System.out.println(&quot;Hello&quot;); . Hello .",
            "url": "https://dontran15.github.io/CSAFastPages/jupyter/java/fastpages/2022/08/19/java-nb.html",
            "relUrl": "/jupyter/java/fastpages/2022/08/19/java-nb.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://dontran15.github.io/CSAFastPages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://dontran15.github.io/CSAFastPages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "About Me . Hey! Welcome to my fastpages! I’m Don Tran and I’m a junior at Del Norte High School. I like playing piano and drinking boba. I like learning and probably am planning to go into some CS field. Anyways very cool 😈😈1. . so awesome! 😎😎 &#8617; . |",
          "url": "https://dontran15.github.io/CSAFastPages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dontran15.github.io/CSAFastPages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}